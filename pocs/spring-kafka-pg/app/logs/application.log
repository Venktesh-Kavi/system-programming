{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:50:32.589","level":"ERROR", thread="main", "uri":"", "traceId": "", "spanId": "", "message":"Application run failed"}
java.lang.IllegalStateException: java.lang.IllegalStateException: Could not initialize Log4J2 logging from classpath:log4j2.xml
	at org.springframework.boot.context.logging.LoggingApplicationListener.initializeSystem(LoggingApplicationListener.java:344) ~[spring-boot-2.7.4.jar:2.7.4]
	at org.springframework.boot.context.logging.LoggingApplicationListener.initialize(LoggingApplicationListener.java:298) ~[spring-boot-2.7.4.jar:2.7.4]
	at org.springframework.boot.context.logging.LoggingApplicationListener.onApplicationEnvironmentPreparedEvent(LoggingApplicationListener.java:246) ~[spring-boot-2.7.4.jar:2.7.4]
	at org.springframework.boot.context.logging.LoggingApplicationListener.onApplicationEvent(LoggingApplicationListener.java:223) ~[spring-boot-2.7.4.jar:2.7.4]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:176) ~[spring-context-5.3.23.jar:5.3.23]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:169) ~[spring-context-5.3.23.jar:5.3.23]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:143) ~[spring-context-5.3.23.jar:5.3.23]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:131) ~[spring-context-5.3.23.jar:5.3.23]
	at org.springframework.boot.context.event.EventPublishingRunListener.environmentPrepared(EventPublishingRunListener.java:85) ~[spring-boot-2.7.4.jar:2.7.4]
	at org.springframework.boot.SpringApplicationRunListeners.lambda$environmentPrepared$2(SpringApplicationRunListeners.java:66) ~[spring-boot-2.7.4.jar:2.7.4]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at org.springframework.boot.SpringApplicationRunListeners.doWithListeners(SpringApplicationRunListeners.java:120) ~[spring-boot-2.7.4.jar:2.7.4]
	at org.springframework.boot.SpringApplicationRunListeners.doWithListeners(SpringApplicationRunListeners.java:114) ~[spring-boot-2.7.4.jar:2.7.4]
	at org.springframework.boot.SpringApplicationRunListeners.environmentPrepared(SpringApplicationRunListeners.java:65) ~[spring-boot-2.7.4.jar:2.7.4]
	at org.springframework.boot.SpringApplication.prepareEnvironment(SpringApplication.java:344) ~[spring-boot-2.7.4.jar:2.7.4]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:302) ~[spring-boot-2.7.4.jar:2.7.4]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1306) ~[spring-boot-2.7.4.jar:2.7.4]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1295) ~[spring-boot-2.7.4.jar:2.7.4]
	at com.pg.vkt.kafka.App.main(App.java:12) ~[main/:?]
Caused by: java.lang.IllegalStateException: Could not initialize Log4J2 logging from classpath:log4j2.xml
	at org.springframework.boot.logging.log4j2.Log4J2LoggingSystem.loadConfiguration(Log4J2LoggingSystem.java:230) ~[spring-boot-2.7.4.jar:2.7.4]
	at org.springframework.boot.logging.log4j2.Log4J2LoggingSystem.loadConfiguration(Log4J2LoggingSystem.java:193) ~[spring-boot-2.7.4.jar:2.7.4]
	at org.springframework.boot.logging.AbstractLoggingSystem.initializeWithSpecificConfig(AbstractLoggingSystem.java:66) ~[spring-boot-2.7.4.jar:2.7.4]
	at org.springframework.boot.logging.AbstractLoggingSystem.initialize(AbstractLoggingSystem.java:57) ~[spring-boot-2.7.4.jar:2.7.4]
	at org.springframework.boot.logging.log4j2.Log4J2LoggingSystem.initialize(Log4J2LoggingSystem.java:169) ~[spring-boot-2.7.4.jar:2.7.4]
	at org.springframework.boot.context.logging.LoggingApplicationListener.initializeSystem(LoggingApplicationListener.java:332) ~[spring-boot-2.7.4.jar:2.7.4]
	... 18 more
Caused by: java.io.FileNotFoundException: class path resource [log4j2.xml] cannot be resolved to URL because it does not exist
	at org.springframework.util.ResourceUtils.getURL(ResourceUtils.java:137) ~[spring-core-5.3.23.jar:5.3.23]
	at org.springframework.boot.logging.log4j2.Log4J2LoggingSystem.load(Log4J2LoggingSystem.java:235) ~[spring-boot-2.7.4.jar:2.7.4]
	at org.springframework.boot.logging.log4j2.Log4J2LoggingSystem.loadConfiguration(Log4J2LoggingSystem.java:221) ~[spring-boot-2.7.4.jar:2.7.4]
	at org.springframework.boot.logging.log4j2.Log4J2LoggingSystem.loadConfiguration(Log4J2LoggingSystem.java:193) ~[spring-boot-2.7.4.jar:2.7.4]
	at org.springframework.boot.logging.AbstractLoggingSystem.initializeWithSpecificConfig(AbstractLoggingSystem.java:66) ~[spring-boot-2.7.4.jar:2.7.4]
	at org.springframework.boot.logging.AbstractLoggingSystem.initialize(AbstractLoggingSystem.java:57) ~[spring-boot-2.7.4.jar:2.7.4]
	at org.springframework.boot.logging.log4j2.Log4J2LoggingSystem.initialize(Log4J2LoggingSystem.java:169) ~[spring-boot-2.7.4.jar:2.7.4]
	at org.springframework.boot.context.logging.LoggingApplicationListener.initializeSystem(LoggingApplicationListener.java:332) ~[spring-boot-2.7.4.jar:2.7.4]
	... 18 more
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:10.387","level":"ERROR", thread="main", "uri":"", "traceId": "", "spanId": "", "message":"Application run failed"}
java.lang.IllegalStateException: java.lang.IllegalStateException: Could not initialize Log4J2 logging from classpath:log4j2.xml
	at org.springframework.boot.context.logging.LoggingApplicationListener.initializeSystem(LoggingApplicationListener.java:344) ~[spring-boot-2.7.4.jar:2.7.4]
	at org.springframework.boot.context.logging.LoggingApplicationListener.initialize(LoggingApplicationListener.java:298) ~[spring-boot-2.7.4.jar:2.7.4]
	at org.springframework.boot.context.logging.LoggingApplicationListener.onApplicationEnvironmentPreparedEvent(LoggingApplicationListener.java:246) ~[spring-boot-2.7.4.jar:2.7.4]
	at org.springframework.boot.context.logging.LoggingApplicationListener.onApplicationEvent(LoggingApplicationListener.java:223) ~[spring-boot-2.7.4.jar:2.7.4]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:176) ~[spring-context-5.3.23.jar:5.3.23]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:169) ~[spring-context-5.3.23.jar:5.3.23]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:143) ~[spring-context-5.3.23.jar:5.3.23]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:131) ~[spring-context-5.3.23.jar:5.3.23]
	at org.springframework.boot.context.event.EventPublishingRunListener.environmentPrepared(EventPublishingRunListener.java:85) ~[spring-boot-2.7.4.jar:2.7.4]
	at org.springframework.boot.SpringApplicationRunListeners.lambda$environmentPrepared$2(SpringApplicationRunListeners.java:66) ~[spring-boot-2.7.4.jar:2.7.4]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at org.springframework.boot.SpringApplicationRunListeners.doWithListeners(SpringApplicationRunListeners.java:120) ~[spring-boot-2.7.4.jar:2.7.4]
	at org.springframework.boot.SpringApplicationRunListeners.doWithListeners(SpringApplicationRunListeners.java:114) ~[spring-boot-2.7.4.jar:2.7.4]
	at org.springframework.boot.SpringApplicationRunListeners.environmentPrepared(SpringApplicationRunListeners.java:65) ~[spring-boot-2.7.4.jar:2.7.4]
	at org.springframework.boot.SpringApplication.prepareEnvironment(SpringApplication.java:344) ~[spring-boot-2.7.4.jar:2.7.4]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:302) ~[spring-boot-2.7.4.jar:2.7.4]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1306) ~[spring-boot-2.7.4.jar:2.7.4]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1295) ~[spring-boot-2.7.4.jar:2.7.4]
	at com.pg.vkt.kafka.App.main(App.java:12) ~[main/:?]
Caused by: java.lang.IllegalStateException: Could not initialize Log4J2 logging from classpath:log4j2.xml
	at org.springframework.boot.logging.log4j2.Log4J2LoggingSystem.loadConfiguration(Log4J2LoggingSystem.java:230) ~[spring-boot-2.7.4.jar:2.7.4]
	at org.springframework.boot.logging.log4j2.Log4J2LoggingSystem.loadConfiguration(Log4J2LoggingSystem.java:193) ~[spring-boot-2.7.4.jar:2.7.4]
	at org.springframework.boot.logging.AbstractLoggingSystem.initializeWithSpecificConfig(AbstractLoggingSystem.java:66) ~[spring-boot-2.7.4.jar:2.7.4]
	at org.springframework.boot.logging.AbstractLoggingSystem.initialize(AbstractLoggingSystem.java:57) ~[spring-boot-2.7.4.jar:2.7.4]
	at org.springframework.boot.logging.log4j2.Log4J2LoggingSystem.initialize(Log4J2LoggingSystem.java:169) ~[spring-boot-2.7.4.jar:2.7.4]
	at org.springframework.boot.context.logging.LoggingApplicationListener.initializeSystem(LoggingApplicationListener.java:332) ~[spring-boot-2.7.4.jar:2.7.4]
	... 18 more
Caused by: java.io.FileNotFoundException: class path resource [log4j2.xml] cannot be resolved to URL because it does not exist
	at org.springframework.util.ResourceUtils.getURL(ResourceUtils.java:137) ~[spring-core-5.3.23.jar:5.3.23]
	at org.springframework.boot.logging.log4j2.Log4J2LoggingSystem.load(Log4J2LoggingSystem.java:235) ~[spring-boot-2.7.4.jar:2.7.4]
	at org.springframework.boot.logging.log4j2.Log4J2LoggingSystem.loadConfiguration(Log4J2LoggingSystem.java:221) ~[spring-boot-2.7.4.jar:2.7.4]
	at org.springframework.boot.logging.log4j2.Log4J2LoggingSystem.loadConfiguration(Log4J2LoggingSystem.java:193) ~[spring-boot-2.7.4.jar:2.7.4]
	at org.springframework.boot.logging.AbstractLoggingSystem.initializeWithSpecificConfig(AbstractLoggingSystem.java:66) ~[spring-boot-2.7.4.jar:2.7.4]
	at org.springframework.boot.logging.AbstractLoggingSystem.initialize(AbstractLoggingSystem.java:57) ~[spring-boot-2.7.4.jar:2.7.4]
	at org.springframework.boot.logging.log4j2.Log4J2LoggingSystem.initialize(Log4J2LoggingSystem.java:169) ~[spring-boot-2.7.4.jar:2.7.4]
	at org.springframework.boot.context.logging.LoggingApplicationListener.initializeSystem(LoggingApplicationListener.java:332) ~[spring-boot-2.7.4.jar:2.7.4]
	... 18 more
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:49.101","level":"INFO", thread="main", "uri":"", "traceId": "", "spanId": "", "message":"Starting App using Java 17.0.14 on CALTM00891 with PID 49907 (/Users/venktesh.k/workspace/personal/system-programming/spring-kafka-pg/app/build/classes/java/main started by venktesh.k in /Users/venktesh.k/workspace/personal/system-programming/spring-kafka-pg/app)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:49.104","level":"DEBUG", thread="main", "uri":"", "traceId": "", "spanId": "", "message":"Running with Spring Boot v2.7.4, Spring v5.3.23"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:49.105","level":"INFO", thread="main", "uri":"", "traceId": "", "spanId": "", "message":"No active profile set, falling back to 1 default profile: "default""}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:49.467","level":"INFO", thread="main", "uri":"", "traceId": "", "spanId": "", "message":"Tomcat initialized with port(s): 8085 (http)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:49.474","level":"INFO", thread="main", "uri":"", "traceId": "", "spanId": "", "message":"Initializing ProtocolHandler ["http-nio-8085"]"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:49.474","level":"INFO", thread="main", "uri":"", "traceId": "", "spanId": "", "message":"Starting service [Tomcat]"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:49.475","level":"INFO", thread="main", "uri":"", "traceId": "", "spanId": "", "message":"Starting Servlet engine: [Apache Tomcat/9.0.65]"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:49.525","level":"INFO", thread="main", "uri":"", "traceId": "", "spanId": "", "message":"Initializing Spring embedded WebApplicationContext"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:49.525","level":"INFO", thread="main", "uri":"", "traceId": "", "spanId": "", "message":"Root WebApplicationContext: initialization completed in 404 ms"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:49.716","level":"INFO", thread="main", "uri":"", "traceId": "", "spanId": "", "message":"ConsumerConfig values: 
	allow.auto.create.topics = true
	auto.commit.interval.ms = 5000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.dns.lookup = use_all_dns_ips
	client.id = consumer-plain-kafka-consumer-1
	client.rack = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = false
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = plain-kafka-consumer
	group.instance.id = null
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	internal.throw.on.fetch.stable.offset.unsupported = false
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor, class org.apache.kafka.clients.consumer.CooperativeStickyAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	session.timeout.ms = 45000
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:49.717","level":"DEBUG", thread="main", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Initializing the Kafka consumer"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:49.755","level":"INFO", thread="main", "uri":"", "traceId": "", "spanId": "", "message":"Kafka version: 3.1.2"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:49.755","level":"INFO", thread="main", "uri":"", "traceId": "", "spanId": "", "message":"Kafka commitId: f8c67dc3ae0a3265"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:49.755","level":"INFO", thread="main", "uri":"", "traceId": "", "spanId": "", "message":"Kafka startTimeMs: 1750152109754"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:49.756","level":"DEBUG", thread="main", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Kafka consumer initialized"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:49.757","level":"INFO", thread="main", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Subscribed to topic(s): test"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:49.762","level":"INFO", thread="main", "uri":"", "traceId": "", "spanId": "", "message":"Starting ProtocolHandler ["http-nio-8085"]"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:49.763","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: -1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:49.770","level":"INFO", thread="main", "uri":"", "traceId": "", "spanId": "", "message":"Tomcat started on port(s): 8085 (http) with context path ''"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:49.775","level":"INFO", thread="main", "uri":"", "traceId": "", "spanId": "", "message":"Started App in 0.812 seconds (JVM running for 1.112)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:49.840","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"Resolved host localhost as 127.0.0.1"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:49.840","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Initiating connection to node localhost:9092 (id: -1 rack: null) using address localhost/127.0.0.1"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:49.844","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Created socket with SO_RCVBUF = 342972, SO_SNDBUF = 146988, SO_TIMEOUT = 0 to node -1"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:49.845","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Completed connection to node -1. Fetching API versions."}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:49.845","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Initiating API versions fetch from node -1."}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:49.851","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending API_VERSIONS request with header RequestHeader(apiKey=API_VERSIONS, apiVersion=3, clientId=consumer-plain-kafka-consumer-1, correlationId=1) and timeout 30000 to node -1: ApiVersionsRequestData(clientSoftwareName='apache-kafka-java', clientSoftwareVersion='3.1.2')"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:49.898","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received API_VERSIONS response from node -1 for request with header RequestHeader(apiKey=API_VERSIONS, apiVersion=3, clientId=consumer-plain-kafka-consumer-1, correlationId=1): ApiVersionsResponseData(errorCode=0, apiKeys=[ApiVersion(apiKey=0, minVersion=0, maxVersion=9), ApiVersion(apiKey=1, minVersion=0, maxVersion=15), ApiVersion(apiKey=2, minVersion=0, maxVersion=8), ApiVersion(apiKey=3, minVersion=0, maxVersion=12), ApiVersion(apiKey=8, minVersion=0, maxVersion=8), ApiVersion(apiKey=9, minVersion=0, maxVersion=8), ApiVersion(apiKey=10, minVersion=0, maxVersion=4), ApiVersion(apiKey=11, minVersion=0, maxVersion=9), ApiVersion(apiKey=12, minVersion=0, maxVersion=4), ApiVersion(apiKey=13, minVersion=0, maxVersion=5), ApiVersion(apiKey=14, minVersion=0, maxVersion=5), ApiVersion(apiKey=15, minVersion=0, maxVersion=5), ApiVersion(apiKey=16, minVersion=0, maxVersion=4), ApiVersion(apiKey=17, minVersion=0, maxVersion=1), ApiVersion(apiKey=18, minVersion=0, maxVersion=3), ApiVersion(apiKey=19, minVersion=0, maxVersion=7), ApiVersion(apiKey=20, minVersion=0, maxVersion=6), ApiVersion(apiKey=21, minVersion=0, maxVersion=2), ApiVersion(apiKey=22, minVersion=0, maxVersion=4), ApiVersion(apiKey=23, minVersion=0, maxVersion=4), ApiVersion(apiKey=24, minVersion=0, maxVersion=3), ApiVersion(apiKey=25, minVersion=0, maxVersion=3), ApiVersion(apiKey=26, minVersion=0, maxVersion=3), ApiVersion(apiKey=27, minVersion=0, maxVersion=1), ApiVersion(apiKey=28, minVersion=0, maxVersion=3), ApiVersion(apiKey=29, minVersion=0, maxVersion=3), ApiVersion(apiKey=30, minVersion=0, maxVersion=3), ApiVersion(apiKey=31, minVersion=0, maxVersion=3), ApiVersion(apiKey=32, minVersion=0, maxVersion=4), ApiVersion(apiKey=33, minVersion=0, maxVersion=2), ApiVersion(apiKey=34, minVersion=0, maxVersion=2), ApiVersion(apiKey=35, minVersion=0, maxVersion=4), ApiVersion(apiKey=36, minVersion=0, maxVersion=2), ApiVersion(apiKey=37, minVersion=0, maxVersion=3), ApiVersion(apiKey=42, minVersion=0, maxVersion=2), ApiVersion(apiKey=43, minVersion=0, maxVersion=2), ApiVersion(apiKey=44, minVersion=0, maxVersion=1), ApiVersion(apiKey=45, minVersion=0, maxVersion=0), ApiVersion(apiKey=46, minVersion=0, maxVersion=0), ApiVersion(apiKey=47, minVersion=0, maxVersion=0), ApiVersion(apiKey=48, minVersion=0, maxVersion=1), ApiVersion(apiKey=49, minVersion=0, maxVersion=1), ApiVersion(apiKey=50, minVersion=0, maxVersion=0), ApiVersion(apiKey=51, minVersion=0, maxVersion=0), ApiVersion(apiKey=55, minVersion=0, maxVersion=1), ApiVersion(apiKey=57, minVersion=0, maxVersion=1), ApiVersion(apiKey=60, minVersion=0, maxVersion=0), ApiVersion(apiKey=61, minVersion=0, maxVersion=0), ApiVersion(apiKey=64, minVersion=0, maxVersion=0), ApiVersion(apiKey=65, minVersion=0, maxVersion=0), ApiVersion(apiKey=66, minVersion=0, maxVersion=0)], throttleTimeMs=0, supportedFeatures=[SupportedFeatureKey(name='metadata.version', minVersion=1, maxVersion=11)], finalizedFeaturesEpoch=3333, finalizedFeatures=[FinalizedFeatureKey(name='metadata.version', maxVersionLevel=11, minVersionLevel=11)])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:49.908","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node -1 has finalized features epoch: 3333, finalized features: [FinalizedFeatureKey(name='metadata.version', maxVersionLevel=11, minVersionLevel=11)], supported features: [SupportedFeatureKey(name='metadata.version', minVersion=1, maxVersion=11)], API versions: (Produce(0): 0 to 9 [usable: 9], Fetch(1): 0 to 15 [usable: 13], ListOffsets(2): 0 to 8 [usable: 7], Metadata(3): 0 to 12 [usable: 12], LeaderAndIsr(4): UNSUPPORTED, StopReplica(5): UNSUPPORTED, UpdateMetadata(6): UNSUPPORTED, ControlledShutdown(7): UNSUPPORTED, OffsetCommit(8): 0 to 8 [usable: 8], OffsetFetch(9): 0 to 8 [usable: 8], FindCoordinator(10): 0 to 4 [usable: 4], JoinGroup(11): 0 to 9 [usable: 7], Heartbeat(12): 0 to 4 [usable: 4], LeaveGroup(13): 0 to 5 [usable: 4], SyncGroup(14): 0 to 5 [usable: 5], DescribeGroups(15): 0 to 5 [usable: 5], ListGroups(16): 0 to 4 [usable: 4], SaslHandshake(17): 0 to 1 [usable: 1], ApiVersions(18): 0 to 3 [usable: 3], CreateTopics(19): 0 to 7 [usable: 7], DeleteTopics(20): 0 to 6 [usable: 6], DeleteRecords(21): 0 to 2 [usable: 2], InitProducerId(22): 0 to 4 [usable: 4], OffsetForLeaderEpoch(23): 0 to 4 [usable: 4], AddPartitionsToTxn(24): 0 to 3 [usable: 3], AddOffsetsToTxn(25): 0 to 3 [usable: 3], EndTxn(26): 0 to 3 [usable: 3], WriteTxnMarkers(27): 0 to 1 [usable: 1], TxnOffsetCommit(28): 0 to 3 [usable: 3], DescribeAcls(29): 0 to 3 [usable: 2], CreateAcls(30): 0 to 3 [usable: 2], DeleteAcls(31): 0 to 3 [usable: 2], DescribeConfigs(32): 0 to 4 [usable: 4], AlterConfigs(33): 0 to 2 [usable: 2], AlterReplicaLogDirs(34): 0 to 2 [usable: 2], DescribeLogDirs(35): 0 to 4 [usable: 2], SaslAuthenticate(36): 0 to 2 [usable: 2], CreatePartitions(37): 0 to 3 [usable: 3], CreateDelegationToken(38): UNSUPPORTED, RenewDelegationToken(39): UNSUPPORTED, ExpireDelegationToken(40): UNSUPPORTED, DescribeDelegationToken(41): UNSUPPORTED, DeleteGroups(42): 0 to 2 [usable: 2], ElectLeaders(43): 0 to 2 [usable: 2], IncrementalAlterConfigs(44): 0 to 1 [usable: 1], AlterPartitionReassignments(45): 0 [usable: 0], ListPartitionReassignments(46): 0 [usable: 0], OffsetDelete(47): 0 [usable: 0], DescribeClientQuotas(48): 0 to 1 [usable: 1], AlterClientQuotas(49): 0 to 1 [usable: 1], DescribeUserScramCredentials(50): 0 [usable: 0], AlterUserScramCredentials(51): 0 [usable: 0], DescribeQuorum(55): 0 to 1 [usable: 0], AlterIsr(56): UNSUPPORTED, UpdateFeatures(57): 0 to 1 [usable: 0], DescribeCluster(60): 0 [usable: 0], DescribeProducers(61): 0 [usable: 0], UnregisterBroker(64): 0 [usable: 0], DescribeTransactions(65): 0 [usable: 0], ListTransactions(66): 0 [usable: 0], AllocateProducerIds(67): UNSUPPORTED)."}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:49.910","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: -1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:49.910","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=2) and timeout 30000 to node -1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:49.910","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=0) and timeout 30000 to node -1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:49.915","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node -1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=2): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:49.917","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Resetting the last seen epoch of partition test-0 to 0 since the associated topicId changed from null to k1kDvVZsSlKrd1UHvk6VKg"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:49.918","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Cluster ID: OTYwMzU2ZWU3ZmY0NGQ5OQ"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:49.918","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 2 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:49.923","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node -1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=0): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:49.924","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152109923, latencyMs=85, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=0), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:49.924","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:49.924","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.015","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Initialize connection to node localhost:9092 (id: 1 rack: null) for sending metadata request"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.015","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"Resolved host localhost as 127.0.0.1"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.016","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Initiating connection to node localhost:9092 (id: 1 rack: null) using address localhost/127.0.0.1"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.016","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Created socket with SO_RCVBUF = 342972, SO_SNDBUF = 146988, SO_TIMEOUT = 0 to node 1"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.017","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Completed connection to node 1. Fetching API versions."}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.017","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Initiating API versions fetch from node 1."}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.017","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending API_VERSIONS request with header RequestHeader(apiKey=API_VERSIONS, apiVersion=3, clientId=consumer-plain-kafka-consumer-1, correlationId=3) and timeout 30000 to node 1: ApiVersionsRequestData(clientSoftwareName='apache-kafka-java', clientSoftwareVersion='3.1.2')"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.020","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received API_VERSIONS response from node 1 for request with header RequestHeader(apiKey=API_VERSIONS, apiVersion=3, clientId=consumer-plain-kafka-consumer-1, correlationId=3): ApiVersionsResponseData(errorCode=0, apiKeys=[ApiVersion(apiKey=0, minVersion=0, maxVersion=9), ApiVersion(apiKey=1, minVersion=0, maxVersion=15), ApiVersion(apiKey=2, minVersion=0, maxVersion=8), ApiVersion(apiKey=3, minVersion=0, maxVersion=12), ApiVersion(apiKey=8, minVersion=0, maxVersion=8), ApiVersion(apiKey=9, minVersion=0, maxVersion=8), ApiVersion(apiKey=10, minVersion=0, maxVersion=4), ApiVersion(apiKey=11, minVersion=0, maxVersion=9), ApiVersion(apiKey=12, minVersion=0, maxVersion=4), ApiVersion(apiKey=13, minVersion=0, maxVersion=5), ApiVersion(apiKey=14, minVersion=0, maxVersion=5), ApiVersion(apiKey=15, minVersion=0, maxVersion=5), ApiVersion(apiKey=16, minVersion=0, maxVersion=4), ApiVersion(apiKey=17, minVersion=0, maxVersion=1), ApiVersion(apiKey=18, minVersion=0, maxVersion=3), ApiVersion(apiKey=19, minVersion=0, maxVersion=7), ApiVersion(apiKey=20, minVersion=0, maxVersion=6), ApiVersion(apiKey=21, minVersion=0, maxVersion=2), ApiVersion(apiKey=22, minVersion=0, maxVersion=4), ApiVersion(apiKey=23, minVersion=0, maxVersion=4), ApiVersion(apiKey=24, minVersion=0, maxVersion=3), ApiVersion(apiKey=25, minVersion=0, maxVersion=3), ApiVersion(apiKey=26, minVersion=0, maxVersion=3), ApiVersion(apiKey=27, minVersion=0, maxVersion=1), ApiVersion(apiKey=28, minVersion=0, maxVersion=3), ApiVersion(apiKey=29, minVersion=0, maxVersion=3), ApiVersion(apiKey=30, minVersion=0, maxVersion=3), ApiVersion(apiKey=31, minVersion=0, maxVersion=3), ApiVersion(apiKey=32, minVersion=0, maxVersion=4), ApiVersion(apiKey=33, minVersion=0, maxVersion=2), ApiVersion(apiKey=34, minVersion=0, maxVersion=2), ApiVersion(apiKey=35, minVersion=0, maxVersion=4), ApiVersion(apiKey=36, minVersion=0, maxVersion=2), ApiVersion(apiKey=37, minVersion=0, maxVersion=3), ApiVersion(apiKey=42, minVersion=0, maxVersion=2), ApiVersion(apiKey=43, minVersion=0, maxVersion=2), ApiVersion(apiKey=44, minVersion=0, maxVersion=1), ApiVersion(apiKey=45, minVersion=0, maxVersion=0), ApiVersion(apiKey=46, minVersion=0, maxVersion=0), ApiVersion(apiKey=47, minVersion=0, maxVersion=0), ApiVersion(apiKey=48, minVersion=0, maxVersion=1), ApiVersion(apiKey=49, minVersion=0, maxVersion=1), ApiVersion(apiKey=50, minVersion=0, maxVersion=0), ApiVersion(apiKey=51, minVersion=0, maxVersion=0), ApiVersion(apiKey=55, minVersion=0, maxVersion=1), ApiVersion(apiKey=57, minVersion=0, maxVersion=1), ApiVersion(apiKey=60, minVersion=0, maxVersion=0), ApiVersion(apiKey=61, minVersion=0, maxVersion=0), ApiVersion(apiKey=64, minVersion=0, maxVersion=0), ApiVersion(apiKey=65, minVersion=0, maxVersion=0), ApiVersion(apiKey=66, minVersion=0, maxVersion=0)], throttleTimeMs=0, supportedFeatures=[SupportedFeatureKey(name='metadata.version', minVersion=1, maxVersion=11)], finalizedFeaturesEpoch=3333, finalizedFeatures=[FinalizedFeatureKey(name='metadata.version', maxVersionLevel=11, minVersionLevel=11)])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.021","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 has finalized features epoch: 3333, finalized features: [FinalizedFeatureKey(name='metadata.version', maxVersionLevel=11, minVersionLevel=11)], supported features: [SupportedFeatureKey(name='metadata.version', minVersion=1, maxVersion=11)], API versions: (Produce(0): 0 to 9 [usable: 9], Fetch(1): 0 to 15 [usable: 13], ListOffsets(2): 0 to 8 [usable: 7], Metadata(3): 0 to 12 [usable: 12], LeaderAndIsr(4): UNSUPPORTED, StopReplica(5): UNSUPPORTED, UpdateMetadata(6): UNSUPPORTED, ControlledShutdown(7): UNSUPPORTED, OffsetCommit(8): 0 to 8 [usable: 8], OffsetFetch(9): 0 to 8 [usable: 8], FindCoordinator(10): 0 to 4 [usable: 4], JoinGroup(11): 0 to 9 [usable: 7], Heartbeat(12): 0 to 4 [usable: 4], LeaveGroup(13): 0 to 5 [usable: 4], SyncGroup(14): 0 to 5 [usable: 5], DescribeGroups(15): 0 to 5 [usable: 5], ListGroups(16): 0 to 4 [usable: 4], SaslHandshake(17): 0 to 1 [usable: 1], ApiVersions(18): 0 to 3 [usable: 3], CreateTopics(19): 0 to 7 [usable: 7], DeleteTopics(20): 0 to 6 [usable: 6], DeleteRecords(21): 0 to 2 [usable: 2], InitProducerId(22): 0 to 4 [usable: 4], OffsetForLeaderEpoch(23): 0 to 4 [usable: 4], AddPartitionsToTxn(24): 0 to 3 [usable: 3], AddOffsetsToTxn(25): 0 to 3 [usable: 3], EndTxn(26): 0 to 3 [usable: 3], WriteTxnMarkers(27): 0 to 1 [usable: 1], TxnOffsetCommit(28): 0 to 3 [usable: 3], DescribeAcls(29): 0 to 3 [usable: 2], CreateAcls(30): 0 to 3 [usable: 2], DeleteAcls(31): 0 to 3 [usable: 2], DescribeConfigs(32): 0 to 4 [usable: 4], AlterConfigs(33): 0 to 2 [usable: 2], AlterReplicaLogDirs(34): 0 to 2 [usable: 2], DescribeLogDirs(35): 0 to 4 [usable: 2], SaslAuthenticate(36): 0 to 2 [usable: 2], CreatePartitions(37): 0 to 3 [usable: 3], CreateDelegationToken(38): UNSUPPORTED, RenewDelegationToken(39): UNSUPPORTED, ExpireDelegationToken(40): UNSUPPORTED, DescribeDelegationToken(41): UNSUPPORTED, DeleteGroups(42): 0 to 2 [usable: 2], ElectLeaders(43): 0 to 2 [usable: 2], IncrementalAlterConfigs(44): 0 to 1 [usable: 1], AlterPartitionReassignments(45): 0 [usable: 0], ListPartitionReassignments(46): 0 [usable: 0], OffsetDelete(47): 0 [usable: 0], DescribeClientQuotas(48): 0 to 1 [usable: 1], AlterClientQuotas(49): 0 to 1 [usable: 1], DescribeUserScramCredentials(50): 0 [usable: 0], AlterUserScramCredentials(51): 0 [usable: 0], DescribeQuorum(55): 0 to 1 [usable: 0], AlterIsr(56): UNSUPPORTED, UpdateFeatures(57): 0 to 1 [usable: 0], DescribeCluster(60): 0 [usable: 0], DescribeProducers(61): 0 [usable: 0], UnregisterBroker(64): 0 [usable: 0], DescribeTransactions(65): 0 [usable: 0], ListTransactions(66): 0 [usable: 0], AllocateProducerIds(67): UNSUPPORTED)."}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.021","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.021","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=4) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.022","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=4): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.022","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.022","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 3 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.022","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.023","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=5) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.024","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=5): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.024","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152110024, latencyMs=1, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=5), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.024","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.024","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.124","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.124","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=6) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.128","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=6): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.128","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.128","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 4 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.129","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.129","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=7) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.138","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=7): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.138","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152110138, latencyMs=9, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=7), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.138","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.138","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.229","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.230","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=8) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.233","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=8): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.233","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.234","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 5 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.234","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.234","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=9) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.237","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=9): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.237","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152110237, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=9), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.237","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.237","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.334","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.334","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=10) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.337","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=10): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.338","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.338","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 6 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.338","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.338","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=11) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.344","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=11): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.344","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152110344, latencyMs=6, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=11), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.344","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.344","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.438","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.438","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=12) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.447","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=12): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.447","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.447","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 7 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.447","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.447","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=13) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.456","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=13): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.456","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152110456, latencyMs=9, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=13), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.456","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.457","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.548","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.549","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=14) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.556","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=14): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.557","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.557","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 8 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.558","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.558","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=15) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.565","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=15): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.565","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152110564, latencyMs=6, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=15), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.565","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.565","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.655","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.656","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=16) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.659","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=16): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.659","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.659","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 9 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.659","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.659","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=17) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.661","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=17): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.661","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152110661, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=17), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.661","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.661","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.759","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.759","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=18) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.765","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=18): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.765","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.766","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 10 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.766","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.766","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=19) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.770","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=19): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.770","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152110770, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=19), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.770","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.770","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.867","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.867","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=20) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.871","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=20): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.871","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.871","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 11 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.871","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.872","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=21) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.877","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=21): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.877","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152110877, latencyMs=6, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=21), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.877","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.877","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.971","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.971","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=22) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.974","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=22): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.974","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.975","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 12 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.975","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.975","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=23) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.980","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=23): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.980","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152110980, latencyMs=5, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=23), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.980","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:50.980","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.076","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.076","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=24) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.081","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=24): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.082","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.082","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 13 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.082","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.082","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=25) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.089","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=25): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.089","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152111089, latencyMs=7, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=25), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.089","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.089","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.181","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.181","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=26) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.184","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=26): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.184","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.184","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 14 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.184","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.184","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=27) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.191","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=27): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.191","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152111191, latencyMs=7, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=27), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.191","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.191","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.284","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.286","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=28) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.314","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=28): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.314","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.314","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 15 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.314","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.315","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=29) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.355","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=29): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.357","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152111355, latencyMs=40, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=29), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.357","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.357","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.415","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.415","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=30) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.421","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=30): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.421","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.421","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 16 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.421","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.421","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=31) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.424","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=31): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.424","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152111424, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=31), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.424","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.424","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.522","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.522","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=32) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.524","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=32): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.524","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.524","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 17 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.524","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.524","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=33) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.525","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=33): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.526","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152111525, latencyMs=1, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=33), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.526","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.526","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.625","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.625","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=34) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.629","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=34): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.629","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.629","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 18 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.629","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.629","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=35) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.633","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=35): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.633","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152111633, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=35), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.633","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.633","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.730","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.730","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=36) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.736","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=36): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.736","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.736","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 19 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.736","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.736","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=37) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.742","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=37): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.742","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152111742, latencyMs=6, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=37), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.742","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.742","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.837","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.837","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=38) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.846","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=38): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.846","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.846","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 20 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.846","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.846","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=39) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.860","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=39): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.860","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152111860, latencyMs=14, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=39), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.860","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.860","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.947","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.947","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=40) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.949","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=40): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.949","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.950","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 21 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.950","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.950","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=41) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.953","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=41): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.953","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152111953, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=41), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.953","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:51.953","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.051","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.051","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=42) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.056","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=42): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.056","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.056","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 22 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.056","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.056","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=43) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.066","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=43): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.066","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152112065, latencyMs=9, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=43), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.066","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.066","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.156","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.156","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=44) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.160","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=44): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.161","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.161","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 23 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.161","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.161","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=45) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.165","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=45): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.165","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152112165, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=45), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.165","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.165","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.261","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.261","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=46) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.265","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=46): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.265","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.265","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 24 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.265","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.265","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=47) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.270","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=47): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.270","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152112270, latencyMs=5, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=47), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.270","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.270","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.366","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.366","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=48) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.372","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=48): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.373","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.373","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 25 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.373","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.373","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=49) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.385","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=49): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.385","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152112385, latencyMs=12, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=49), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.385","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.385","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.473","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.473","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=50) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.485","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=50): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.485","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.485","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 26 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.485","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.485","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=51) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.487","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=51): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.487","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152112487, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=51), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.487","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.487","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.587","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.587","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=52) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.592","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=52): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.592","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.592","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 27 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.592","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.592","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=53) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.596","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=53): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.596","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152112596, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=53), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.596","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.596","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.692","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.692","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=54) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.697","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=54): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.698","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.698","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 28 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.698","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.698","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=55) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.704","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=55): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.704","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152112703, latencyMs=5, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=55), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.704","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.704","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.797","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.797","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=56) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.804","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=56): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.804","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.804","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 29 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.804","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.804","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=57) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.810","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=57): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.810","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152112810, latencyMs=6, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=57), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.810","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.810","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.905","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.905","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=58) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.919","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=58): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.920","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.920","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 30 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.920","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.920","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=59) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.923","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=59): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.923","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152112923, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=59), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.923","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:52.923","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.019","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.019","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=60) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.021","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=60): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.022","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.022","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 31 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.022","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.022","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=61) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.023","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=61): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.023","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152113023, latencyMs=1, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=61), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.023","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.023","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.121","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.121","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=62) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.123","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=62): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.123","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.124","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 32 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.124","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.124","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=63) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.126","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=63): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.126","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152113126, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=63), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.126","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.126","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.224","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.224","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=64) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.226","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=64): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.227","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.227","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 33 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.227","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.227","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=65) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.233","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=65): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.233","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152113233, latencyMs=6, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=65), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.233","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.233","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.328","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.328","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=66) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.347","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=66): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.347","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.348","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 34 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.348","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.348","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=67) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.352","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=67): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.352","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152113352, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=67), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.352","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.352","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.448","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.448","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=68) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.501","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=68): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.502","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.502","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 35 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.502","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.502","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=69) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.527","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=69): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.527","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152113527, latencyMs=25, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=69), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.527","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.527","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.601","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.601","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=70) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.603","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=70): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.603","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.603","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 36 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.603","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.603","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=71) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.605","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=71): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.605","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152113604, latencyMs=1, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=71), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.605","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.605","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.704","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.704","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=72) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.706","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=72): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.706","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.706","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 37 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.706","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.706","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=73) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.708","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=73): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.708","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152113708, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=73), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.708","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.708","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.807","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.807","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=74) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.809","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=74): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.810","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.810","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 38 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.810","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.810","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=75) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.811","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=75): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.811","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152113811, latencyMs=1, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=75), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.811","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.811","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.910","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.910","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=76) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.915","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=76): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.915","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.915","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 39 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.915","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.915","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=77) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.919","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=77): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.919","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152113919, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=77), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.919","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:53.919","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.017","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.017","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=78) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.027","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=78): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.027","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.028","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 40 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.028","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.028","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=79) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.038","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=79): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.038","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152114038, latencyMs=10, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=79), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.038","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.038","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.128","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.128","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=80) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.136","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=80): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.136","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.137","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 41 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.137","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.137","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=81) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.143","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=81): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.143","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152114143, latencyMs=6, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=81), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.143","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.143","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.236","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.237","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=82) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.240","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=82): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.240","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.240","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 42 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.240","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.241","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=83) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.247","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=83): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.248","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152114247, latencyMs=7, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=83), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.248","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.248","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.340","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.341","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=84) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.344","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=84): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.344","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.344","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 43 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.344","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.344","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=85) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.349","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=85): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.349","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152114349, latencyMs=5, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=85), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.349","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.349","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.446","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.446","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=86) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.450","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=86): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.450","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.450","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 44 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.450","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.450","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=87) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.454","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=87): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.454","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152114454, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=87), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.454","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.454","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.550","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.550","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=88) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.557","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=88): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.557","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.558","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 45 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.558","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.558","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=89) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.564","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=89): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.564","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152114564, latencyMs=6, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=89), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.564","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.564","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.657","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.657","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=90) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.660","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=90): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.660","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.661","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 46 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.661","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.661","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=91) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.665","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=91): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.665","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152114665, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=91), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.665","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.665","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.760","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.761","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=92) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.762","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=92): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.762","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.762","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 47 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.766","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.766","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=93) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.768","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=93): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.768","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152114768, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=93), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.768","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.768","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.863","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.863","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=94) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.865","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=94): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.865","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.865","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 48 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.865","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.865","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=95) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.868","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=95): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.868","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152114868, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=95), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.868","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.868","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.966","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.966","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=96) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.969","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=96): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.969","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.969","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 49 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.969","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.969","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=97) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.971","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=97): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.971","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152114970, latencyMs=1, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=97), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.971","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:54.971","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.069","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.069","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=98) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.072","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=98): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.072","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.072","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 50 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.072","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.073","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=99) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.076","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=99): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.076","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152115076, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=99), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.076","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.076","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.173","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.173","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=100) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.177","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=100): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.177","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.177","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 51 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.177","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.177","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=101) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.182","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=101): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.182","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152115182, latencyMs=5, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=101), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.182","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.182","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.278","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.278","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=102) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.282","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=102): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.282","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.282","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 52 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.282","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.282","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=103) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.284","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=103): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.284","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152115284, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=103), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.284","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.284","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.382","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.383","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=104) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.386","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=104): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.386","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.386","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 53 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.386","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.386","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=105) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.390","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=105): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.390","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152115390, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=105), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.390","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.390","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.488","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.488","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=106) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.491","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=106): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.491","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.491","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 54 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.491","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.491","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=107) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.495","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=107): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.495","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152115495, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=107), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.495","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.495","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.592","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.592","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=108) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.597","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=108): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.597","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.597","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 55 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.597","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.598","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=109) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.600","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=109): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.600","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152115600, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=109), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.600","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.600","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.698","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.698","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=110) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.702","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=110): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.702","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.702","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 56 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.702","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.702","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=111) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.707","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=111): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.707","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152115707, latencyMs=5, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=111), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.707","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.707","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.802","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.802","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=112) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.806","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=112): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.806","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.806","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 57 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.806","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.806","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=113) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.810","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=113): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.810","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152115810, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=113), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.810","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.810","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.907","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.907","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=114) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.910","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=114): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.910","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.911","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 58 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.911","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.911","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=115) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.914","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=115): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.914","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152115914, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=115), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.914","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:55.914","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.010","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.011","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=116) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.019","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=116): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.019","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.019","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 59 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.019","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.019","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=117) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.025","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=117): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.025","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152116025, latencyMs=6, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=117), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.025","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.025","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.120","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.121","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=118) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.125","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=118): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.125","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.125","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 60 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.125","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.125","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=119) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.137","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=119): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.137","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152116137, latencyMs=12, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=119), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.137","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.137","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.226","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.226","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=120) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.233","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=120): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.233","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.233","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 61 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.233","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.233","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=121) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.241","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=121): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.241","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152116241, latencyMs=8, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=121), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.241","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.241","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.334","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.334","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=122) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.337","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=122): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.337","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.337","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 62 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.337","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.337","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=123) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.342","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=123): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.342","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152116342, latencyMs=5, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=123), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.342","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.342","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.438","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.438","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=124) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.440","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=124): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.440","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.441","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 63 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.441","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.441","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=125) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.445","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=125): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.445","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152116445, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=125), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.445","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.445","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.541","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.541","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=126) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.547","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=126): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.547","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.548","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 64 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.548","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.548","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=127) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.557","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=127): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.557","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152116557, latencyMs=9, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=127), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.557","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.557","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.649","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.651","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=128) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.668","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=128): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.668","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.668","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 65 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.668","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.668","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=129) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.675","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=129): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.675","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152116675, latencyMs=7, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=129), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.676","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.676","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.769","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.769","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=130) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.771","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=130): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.771","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.771","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 66 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.771","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.771","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=131) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.772","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=131): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.772","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152116772, latencyMs=1, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=131), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.772","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.772","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.873","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.873","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=132) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.875","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=132): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.875","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.875","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 67 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.875","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.875","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=133) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.878","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=133): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.878","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152116878, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=133), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.878","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.878","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.976","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.976","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=134) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.979","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=134): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.979","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.979","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 68 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.979","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.979","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=135) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.990","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=135): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.990","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152116990, latencyMs=11, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=135), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.990","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:56.990","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.080","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.080","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=136) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.086","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=136): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.086","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.086","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 69 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.086","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.086","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=137) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.093","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=137): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.093","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152117093, latencyMs=7, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=137), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.093","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.093","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.186","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.186","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=138) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.194","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=138): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.194","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.194","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 70 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.194","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.194","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=139) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.207","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=139): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.207","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152117207, latencyMs=13, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=139), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.207","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.207","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.295","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.295","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=140) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.308","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=140): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.308","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.309","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 71 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.309","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.309","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=141) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.312","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=141): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.312","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152117312, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=141), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.312","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.312","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.409","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.410","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=142) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.413","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=142): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.413","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.413","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 72 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.413","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.413","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=143) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.419","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=143): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.419","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152117419, latencyMs=6, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=143), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.419","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.419","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.513","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.513","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=144) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.519","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=144): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.519","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.519","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 73 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.519","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.519","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=145) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.527","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=145): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.527","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152117527, latencyMs=8, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=145), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.527","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.527","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.619","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.620","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=146) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.624","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=146): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.624","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.625","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 74 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.625","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.625","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=147) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.629","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=147): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.629","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152117629, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=147), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.629","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.629","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.724","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.725","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=148) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.727","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=148): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.727","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.727","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 75 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.727","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.727","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=149) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.729","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=149): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.729","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152117729, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=149), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.729","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.729","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.829","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.829","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=150) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.834","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=150): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.834","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.835","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 76 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.835","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.835","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=151) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.839","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=151): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.839","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152117839, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=151), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.839","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.839","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.936","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.936","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=152) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.944","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=152): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.944","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.944","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 77 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.944","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.944","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=153) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.947","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=153): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.947","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152117947, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=153), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.947","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:57.947","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.044","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.045","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=154) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.054","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=154): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.054","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.054","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 78 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.055","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.055","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=155) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.062","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=155): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.062","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152118062, latencyMs=7, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=155), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.062","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.062","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.155","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.155","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=156) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.159","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=156): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.159","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.159","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 79 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.159","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.159","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=157) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.162","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=157): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.162","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152118162, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=157), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.162","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.162","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.259","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.259","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=158) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.285","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=158): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.286","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.286","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 80 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.286","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.286","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=159) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.288","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=159): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.288","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152118287, latencyMs=1, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=159), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.288","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.288","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.386","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.386","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=160) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.389","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=160): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.389","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.389","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 81 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.389","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.389","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=161) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.392","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=161): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.392","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152118392, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=161), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.392","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.392","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.488","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.489","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=162) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.492","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=162): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.492","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.492","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 82 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.492","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.492","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=163) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.494","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=163): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.495","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152118494, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=163), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.495","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.495","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.593","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.593","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=164) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.596","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=164): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.596","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.596","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 83 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.596","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.596","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=165) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.600","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=165): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.600","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152118600, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=165), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.600","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.600","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.698","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.698","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=166) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.700","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=166): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.700","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.700","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 84 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.700","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.700","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=167) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.701","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=167): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.702","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152118701, latencyMs=1, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=167), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.702","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.702","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.799","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.799","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=168) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.801","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=168): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.801","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.801","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 85 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.801","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.801","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=169) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.802","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=169): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.803","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152118802, latencyMs=1, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=169), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.803","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.803","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.902","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.902","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=170) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.904","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=170): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.904","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.904","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 86 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.904","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.905","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=171) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.906","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=171): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.906","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152118906, latencyMs=1, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=171), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.906","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:58.906","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.005","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.005","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=172) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.007","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=172): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.007","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.007","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 87 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.007","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.007","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=173) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.008","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=173): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.008","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152119008, latencyMs=1, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=173), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.008","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.008","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.107","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.107","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=174) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.112","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=174): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.112","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.112","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 88 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.112","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.112","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=175) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.119","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=175): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.119","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152119118, latencyMs=6, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=175), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.119","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.119","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.212","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.212","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=176) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.216","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=176): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.217","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.217","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 89 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.217","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.217","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=177) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.227","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=177): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.227","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152119227, latencyMs=10, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=177), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.227","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.227","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.317","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.317","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=178) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.322","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=178): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.322","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.323","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 90 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.323","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.323","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=179) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.325","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=179): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.325","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152119325, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=179), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.325","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.325","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.423","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.423","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=180) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.428","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=180): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.428","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.428","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 91 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.428","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.429","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=181) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.446","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=181): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.446","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152119446, latencyMs=18, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=181), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.446","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.446","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.529","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.529","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=182) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.537","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=182): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.538","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.538","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 92 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.538","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.538","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=183) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.548","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=183): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.548","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152119548, latencyMs=10, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=183), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.548","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.548","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.638","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.638","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=184) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.645","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=184): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.645","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.645","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 93 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.645","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.645","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=185) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.656","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=185): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.656","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152119656, latencyMs=11, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=185), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.656","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.656","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.746","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.746","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=186) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.755","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=186): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.756","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.756","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 94 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.756","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.756","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=187) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.758","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=187): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.758","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152119758, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=187), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.758","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.758","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.769","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.769","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=188) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.778","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=188): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.778","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152119778, latencyMs=9, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=188), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.778","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.778","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.856","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.856","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=189) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.858","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=189): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.859","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.859","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 95 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.859","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.859","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=190) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.861","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=190): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.861","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152119861, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=190), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.861","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.861","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.959","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.959","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=191) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.962","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=191): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.962","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.962","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 96 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.962","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.962","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=192) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.970","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=192): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.970","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152119970, latencyMs=8, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=192), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.970","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:51:59.970","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.063","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.063","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=193) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.067","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=193): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.067","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.067","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 97 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.067","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.067","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=194) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.071","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=194): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.071","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152120071, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=194), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.071","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.071","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.168","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.168","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=195) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.172","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=195): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.172","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.172","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 98 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.172","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.172","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=196) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.178","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=196): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.179","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152120178, latencyMs=6, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=196), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.179","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.179","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.272","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.272","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=197) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.274","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=197): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.274","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.274","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 99 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.274","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.274","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=198) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.276","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=198): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.276","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152120276, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=198), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.276","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.276","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.375","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.375","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=199) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.379","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=199): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.379","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.379","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 100 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.379","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.379","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=200) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.391","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=200): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.391","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152120391, latencyMs=12, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=200), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.391","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.391","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.480","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.480","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=201) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.484","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=201): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.484","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.484","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 101 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.484","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.484","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=202) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.495","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=202): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.495","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152120495, latencyMs=11, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=202), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.495","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.495","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.585","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.585","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=203) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.587","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=203): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.587","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.587","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 102 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.587","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.587","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=204) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.588","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=204): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.589","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152120588, latencyMs=1, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=204), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.589","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.589","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.688","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.688","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=205) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.693","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=205): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.693","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.693","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 103 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.693","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.694","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=206) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.699","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=206): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.699","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152120699, latencyMs=6, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=206), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.699","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.699","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.794","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.794","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=207) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.798","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=207): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.798","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.798","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 104 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.798","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.798","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=208) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.804","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=208): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.804","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152120804, latencyMs=6, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=208), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.804","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.804","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.899","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.899","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=209) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.903","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=209): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.903","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.903","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 105 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.903","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.903","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=210) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.910","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=210): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.910","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152120910, latencyMs=7, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=210), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.910","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:00.910","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.004","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.004","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=211) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.006","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=211): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.006","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.006","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 106 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.006","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.006","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=212) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.009","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=212): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.009","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152121009, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=212), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.009","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.009","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.107","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.107","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=213) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.111","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=213): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.111","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.111","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 107 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.111","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.111","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=214) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.115","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=214): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.115","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152121115, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=214), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.115","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.115","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.211","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.211","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=215) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.214","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=215): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.214","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.214","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 108 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.214","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.214","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=216) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.216","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=216): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.216","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152121216, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=216), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.216","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.216","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.315","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.315","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=217) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.316","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=217): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.317","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.317","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 109 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.317","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.317","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=218) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.320","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=218): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.320","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152121320, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=218), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.320","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.320","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.417","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.417","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=219) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.418","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=219): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.419","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.419","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 110 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.419","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.419","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=220) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.420","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=220): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.420","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152121420, latencyMs=1, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=220), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.420","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.420","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.518","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.518","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=221) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.522","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=221): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.522","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.522","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 111 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.522","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.522","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=222) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.536","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=222): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.536","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152121536, latencyMs=14, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=222), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.536","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.536","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.623","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.623","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=223) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.627","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=223): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.627","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.627","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 112 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.627","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.627","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=224) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.631","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=224): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.631","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152121631, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=224), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.631","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.631","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.728","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.728","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=225) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.731","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=225): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.731","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.731","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 113 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.731","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.731","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=226) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.737","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=226): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.737","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152121737, latencyMs=6, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=226), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.737","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.737","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.832","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.832","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=227) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.840","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=227): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.840","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.840","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 114 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.840","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.841","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=228) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.845","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=228): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.845","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152121845, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=228), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.845","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.845","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.941","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.941","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=229) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.948","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=229): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.948","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.948","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 115 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.948","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.948","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=230) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.959","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=230): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.959","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152121959, latencyMs=11, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=230), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.959","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:01.959","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.049","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.050","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=231) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.059","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=231): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.059","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.059","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 116 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.059","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.059","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=232) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.079","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=232): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.079","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152122079, latencyMs=20, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=232), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.079","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.079","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.160","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.161","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=233) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.165","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=233): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.165","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.165","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 117 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.165","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.165","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=234) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.172","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=234): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.172","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152122171, latencyMs=6, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=234), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.172","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.172","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.266","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.266","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=235) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.271","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=235): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.271","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.271","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 118 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.271","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.272","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=236) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.280","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=236): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.280","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152122280, latencyMs=9, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=236), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.280","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.280","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.372","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.372","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=237) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.375","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=237): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.375","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.375","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 119 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.375","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.375","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=238) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.395","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=238): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.395","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152122395, latencyMs=20, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=238), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.395","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.395","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.476","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.477","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=239) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.481","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=239): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.482","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.482","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 120 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.482","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.482","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=240) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.486","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=240): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.486","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152122486, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=240), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.486","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.486","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.582","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.582","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=241) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.587","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=241): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.587","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.587","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 121 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.587","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:02.587","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=242) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:03.986","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=242): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.004","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152123973, latencyMs=1386, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=242), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.006","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.007","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.014","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.015","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=243) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.028","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=243): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.041","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.044","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 122 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.044","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.044","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=244) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.057","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=244): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.058","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152124057, latencyMs=13, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=244), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.058","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.058","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.127","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.127","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=245) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.145","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=245): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.145","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.204","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 123 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.217","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.225","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=246) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.236","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=246): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.238","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152124236, latencyMs=19, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=246), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.238","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.238","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.245","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.245","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=247) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.254","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=247): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.254","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.254","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 124 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.254","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.254","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=248) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.266","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=248): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.266","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152124266, latencyMs=12, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=248), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.266","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.266","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.357","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.357","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=249) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.369","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=249): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.370","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.371","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 125 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.371","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.371","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=250) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.378","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=250): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.378","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152124378, latencyMs=7, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=250), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.378","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.378","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.483","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.490","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=251) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.506","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=251): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.506","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.506","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 126 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.506","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.506","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=252) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.519","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=252): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.519","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152124519, latencyMs=13, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=252), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.519","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.519","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.624","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.624","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=253) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.677","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=253): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.677","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.678","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 127 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.678","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.678","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=254) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.711","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=254): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.711","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152124710, latencyMs=32, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=254), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.711","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.711","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.774","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.774","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=255) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.777","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.778","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=256) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.779","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=255): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.779","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152124779, latencyMs=5, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=255), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.779","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.779","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.780","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=256): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.780","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.780","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 128 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.780","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.780","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=257) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.807","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=257): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.807","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152124807, latencyMs=27, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=257), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.807","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.807","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.883","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.883","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=258) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.887","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=258): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.888","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.888","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 129 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.888","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.888","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=259) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.891","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=259): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.891","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152124891, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=259), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.891","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.891","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.988","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.989","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=260) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.991","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=260): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.991","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.992","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 130 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.992","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.992","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=261) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.994","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=261): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.995","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152124994, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=261), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.995","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:04.995","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.092","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.092","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=262) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.094","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=262): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.094","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.094","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 131 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.094","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.094","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=263) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.095","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=263): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.095","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152125095, latencyMs=1, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=263), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.095","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.095","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.196","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.196","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=264) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.201","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=264): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.201","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.201","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 132 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.201","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.202","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=265) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.204","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=265): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.204","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152125204, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=265), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.204","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.204","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.301","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.302","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=266) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.303","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=266): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.303","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.304","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 133 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.304","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.304","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=267) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.308","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=267): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.308","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152125308, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=267), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.308","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.308","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.404","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.404","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=268) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.412","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=268): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.413","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.413","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 134 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.413","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.413","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=269) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.423","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=269): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.423","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152125423, latencyMs=10, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=269), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.423","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.423","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.513","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.513","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=270) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.517","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=270): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.517","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.517","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 135 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.517","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.517","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=271) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.528","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=271): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.528","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152125528, latencyMs=11, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=271), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.528","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.528","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.618","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.618","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=272) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.629","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=272): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.632","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.637","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 136 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.637","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.637","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=273) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.650","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=273): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.650","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152125650, latencyMs=13, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=273), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.651","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.651","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.727","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.728","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=274) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.730","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=274): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.730","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.730","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 137 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.730","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.730","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=275) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.732","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=275): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.732","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152125732, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=275), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.732","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.732","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.830","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.831","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=276) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.834","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=276): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.834","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.834","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 138 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.834","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.834","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=277) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.838","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=277): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.838","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152125838, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=277), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.839","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.839","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.934","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.935","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=278) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.940","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=278): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.940","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.940","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 139 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.940","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.941","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=279) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.951","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=279): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.951","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152125951, latencyMs=10, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=279), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.951","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:05.951","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.042","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.042","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=280) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.047","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=280): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.047","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.048","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 140 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.048","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.048","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=281) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.051","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=281): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.051","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152126051, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=281), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.051","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.051","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.148","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.148","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=282) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.150","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=282): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.151","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.151","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 141 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.151","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.151","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=283) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.156","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=283): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.156","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152126156, latencyMs=5, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=283), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.156","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.156","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.251","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.251","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=284) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.256","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=284): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.256","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.256","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 142 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.256","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.256","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=285) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.263","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=285): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.263","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152126263, latencyMs=7, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=285), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.263","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.263","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.357","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.357","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=286) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.361","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=286): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.361","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.361","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 143 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.361","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.361","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=287) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.364","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=287): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.364","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152126364, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=287), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.364","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.364","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.463","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.463","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=288) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.467","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=288): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.467","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.468","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 144 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.468","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.468","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=289) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.474","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=289): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.474","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152126474, latencyMs=6, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=289), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.474","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.474","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.568","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.568","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=290) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.572","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=290): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.572","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.572","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 145 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.572","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.572","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=291) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.578","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=291): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.578","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152126578, latencyMs=6, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=291), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.578","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.578","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.673","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.673","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=292) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.675","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=292): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.675","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.675","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 146 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.675","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.676","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=293) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.677","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=293): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.677","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152126677, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=293), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.677","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.677","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.775","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.776","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=294) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.778","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=294): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.778","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.778","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 147 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.778","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.778","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=295) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.782","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=295): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.782","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152126782, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=295), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.782","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.782","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.879","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.879","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=296) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.882","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=296): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.882","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.882","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 148 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.882","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.882","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=297) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.886","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=297): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.886","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152126886, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=297), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.886","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.886","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.983","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.983","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=298) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.986","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=298): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.986","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.986","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 149 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.986","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.986","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=299) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.996","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=299): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.996","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152126996, latencyMs=10, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=299), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.996","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:06.997","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.086","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.086","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=300) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.089","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=300): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.089","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.089","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 150 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.089","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.089","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=301) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.092","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=301): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.093","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152127092, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=301), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.093","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.093","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.189","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.189","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=302) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.193","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=302): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.194","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.194","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 151 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.194","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.194","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=303) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.201","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=303): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.201","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152127201, latencyMs=7, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=303), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.201","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.201","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.294","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.294","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=304) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.298","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=304): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.298","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.298","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 152 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.298","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.298","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=305) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.302","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=305): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.302","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152127302, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=305), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.302","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.302","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.398","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.399","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=306) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.404","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=306): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.404","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.404","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 153 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.404","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.404","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=307) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.408","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=307): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.408","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152127408, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=307), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.408","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.408","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.505","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.505","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=308) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.508","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=308): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.508","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.508","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 154 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.508","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.508","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=309) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.515","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=309): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.515","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152127515, latencyMs=7, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=309), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.515","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.515","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.608","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.609","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=310) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.611","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=310): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.611","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.611","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 155 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.611","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.611","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=311) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.616","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=311): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.616","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152127616, latencyMs=5, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=311), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.616","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.616","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.712","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.712","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=312) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.716","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=312): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.717","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.717","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 156 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.717","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.717","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=313) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.720","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=313): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.720","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152127720, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=313), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.720","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.720","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.817","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.818","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=314) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.821","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=314): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.821","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.821","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 157 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.821","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.821","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=315) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.824","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=315): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.824","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152127824, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=315), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.824","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.824","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.922","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.922","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=316) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.927","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=316): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.927","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.927","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 158 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.927","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.927","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=317) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.930","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=317): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.930","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152127930, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=317), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.931","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:07.931","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.027","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.028","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=318) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.032","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=318): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.032","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.032","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 159 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.032","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.032","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=319) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.049","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=319): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.050","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152128049, latencyMs=17, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=319), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.050","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.050","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.132","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.132","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=320) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.159","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=320): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.159","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.159","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 160 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.159","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.159","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=321) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.162","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=321): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.162","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152128162, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=321), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.162","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.162","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.260","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.260","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=322) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.268","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=322): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.268","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.268","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 161 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.268","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.268","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=323) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.275","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=323): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.275","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152128275, latencyMs=7, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=323), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.275","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.275","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.368","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.368","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=324) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.380","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=324): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.380","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.381","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 162 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.381","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.381","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=325) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.384","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=325): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.384","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152128384, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=325), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.384","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.384","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.483","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.483","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=326) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.487","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=326): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.487","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.487","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 163 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.488","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.488","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=327) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.496","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=327): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.496","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152128496, latencyMs=8, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=327), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.496","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.496","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.588","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.588","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=328) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.590","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=328): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.590","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.591","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 164 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.591","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.591","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=329) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.593","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=329): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.593","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152128593, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=329), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.593","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.593","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.691","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.691","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=330) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.694","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=330): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.694","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.694","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 165 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.694","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.694","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=331) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.699","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=331): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.699","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152128699, latencyMs=5, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=331), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.699","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.699","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.795","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.795","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=332) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.801","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=332): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.801","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.801","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 166 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.801","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.801","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=333) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.804","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=333): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.804","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152128804, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=333), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.804","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.804","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.902","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.902","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=334) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.905","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=334): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.905","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.905","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 167 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.905","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.905","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=335) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.911","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=335): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.911","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152128911, latencyMs=6, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=335), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.911","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:08.911","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.006","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.006","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=336) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.010","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=336): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.010","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.010","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 168 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.010","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.010","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=337) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.013","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=337): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.014","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152129013, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=337), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.014","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.014","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.111","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.111","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=338) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.114","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=338): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.114","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.114","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 169 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.114","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.114","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=339) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.117","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=339): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.117","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152129117, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=339), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.117","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.117","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.215","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.215","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=340) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.219","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=340): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.220","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.220","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 170 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.220","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.220","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=341) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.226","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=341): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.226","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152129226, latencyMs=6, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=341), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.227","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.227","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.320","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.320","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=342) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.324","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=342): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.324","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.324","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 171 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.324","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.324","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=343) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.327","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=343): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.327","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152129327, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=343), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.327","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.327","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.425","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.426","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=344) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.430","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=344): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.430","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.430","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 172 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.430","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.430","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=345) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.436","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=345): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.436","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152129436, latencyMs=6, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=345), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.436","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.436","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.530","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.530","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=346) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.537","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=346): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.537","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.537","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 173 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.537","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.537","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=347) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.551","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=347): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.551","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152129551, latencyMs=14, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=347), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.551","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.551","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.638","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.638","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=348) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.642","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=348): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.642","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.642","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 174 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.642","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.642","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=349) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.649","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=349): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.649","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152129649, latencyMs=7, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=349), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.649","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.649","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.743","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.743","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=350) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.745","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=350): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.745","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.745","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 175 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.745","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.745","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=351) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.748","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=351): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.748","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152129748, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=351), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.748","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.748","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.776","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.776","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=352) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.780","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=352): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.780","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152129780, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=352), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.780","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.780","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.846","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.846","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=353) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.847","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=353): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.847","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.847","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 176 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.848","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.848","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=354) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.850","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=354): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.850","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152129850, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=354), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.850","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.850","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.948","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.948","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=355) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.949","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=355): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.950","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.950","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 177 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.950","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.950","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=356) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.951","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=356): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.952","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152129951, latencyMs=1, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=356), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.952","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:09.952","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.050","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.050","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=357) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.054","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=357): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.054","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.054","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 178 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.054","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.054","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=358) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.056","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=358): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.056","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152130056, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=358), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.056","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.056","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.155","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.155","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=359) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.158","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=359): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.158","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.158","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 179 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.158","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.158","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=360) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.160","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=360): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.160","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152130160, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=360), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.160","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.160","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.259","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.259","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=361) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.260","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=361): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.260","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.260","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 180 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.260","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.261","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=362) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.262","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=362): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.262","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152130262, latencyMs=1, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=362), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.262","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.262","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.360","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.360","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=363) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.362","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=363): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.362","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.363","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 181 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.363","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.363","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=364) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.364","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=364): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.364","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152130364, latencyMs=1, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=364), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.364","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.364","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.464","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.464","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=365) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.466","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=365): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.466","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.466","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 182 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.466","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.466","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=366) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.467","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=366): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.468","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152130467, latencyMs=1, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=366), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.468","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.468","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.566","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.566","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=367) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.571","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=367): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.571","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.571","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 183 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.571","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.572","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=368) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.577","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=368): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.577","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152130577, latencyMs=6, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=368), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.577","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.577","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.671","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.671","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=369) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.676","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=369): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.676","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.676","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 184 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.676","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.676","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=370) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.680","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=370): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.680","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152130680, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=370), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.680","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.680","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.775","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.775","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=371) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.779","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=371): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.779","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.779","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 185 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.779","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.779","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=372) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.788","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=372): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.789","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152130788, latencyMs=9, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=372), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.789","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.789","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.879","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.879","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=373) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.903","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=373): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.903","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.903","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 186 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.903","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.903","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=374) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.907","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=374): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.907","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152130907, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=374), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.907","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:10.907","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.004","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.005","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=375) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.011","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=375): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.011","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.011","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 187 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.011","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.011","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=376) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.014","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=376): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.014","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152131014, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=376), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.014","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.014","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.111","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.111","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=377) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.115","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=377): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.115","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.115","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 188 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.115","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.115","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=378) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.118","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=378): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.118","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152131118, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=378), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.118","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.118","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.216","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.217","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=379) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.219","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=379): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.219","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.220","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 189 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.220","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.220","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=380) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.225","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=380): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.226","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152131225, latencyMs=5, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=380), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.226","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.226","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.319","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.320","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=381) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.323","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=381): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.323","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.323","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 190 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.323","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.323","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=382) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.329","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=382): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.329","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152131329, latencyMs=6, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=382), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.329","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.329","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.424","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.424","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=383) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.428","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=383): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.428","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.428","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 191 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.428","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.428","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=384) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.433","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=384): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.433","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152131433, latencyMs=5, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=384), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.433","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.433","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.529","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.530","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=385) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.536","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=385): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.537","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.537","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 192 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.537","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.537","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=386) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.545","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=386): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.545","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152131545, latencyMs=8, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=386), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.545","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.545","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.637","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.637","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=387) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.646","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=387): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.646","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.646","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 193 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.646","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.646","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=388) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.654","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=388): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.654","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152131654, latencyMs=8, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=388), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.654","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.655","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.747","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.747","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=389) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.749","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=389): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.749","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.749","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 194 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.749","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.749","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=390) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.751","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=390): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.751","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152131751, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=390), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.751","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.751","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.850","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.850","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=391) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.855","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=391): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.855","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.856","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 195 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.856","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.856","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=392) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.862","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=392): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.862","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152131862, latencyMs=6, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=392), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.862","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.862","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.956","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.956","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=393) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.967","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=393): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.967","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.967","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 196 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.967","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.967","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=394) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.977","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=394): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.977","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152131977, latencyMs=10, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=394), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.977","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:11.977","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.067","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.067","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=395) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.071","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=395): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.071","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.071","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 197 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.071","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.071","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=396) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.080","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=396): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.081","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152132080, latencyMs=9, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=396), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.081","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.081","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.171","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.171","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=397) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.176","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=397): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.176","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.176","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 198 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.176","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.176","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=398) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.180","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=398): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.180","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152132180, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=398), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.180","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.180","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.276","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.276","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=399) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.281","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=399): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.282","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.282","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 199 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.282","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.282","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=400) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.284","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=400): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.284","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152132284, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=400), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.284","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.284","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.382","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.382","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=401) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.386","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=401): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.386","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.386","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 200 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.386","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.386","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=402) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.389","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=402): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.389","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152132389, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=402), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.389","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.389","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.486","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.486","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=403) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.490","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=403): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.490","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.490","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 201 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.490","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.490","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=404) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.493","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=404): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.494","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152132493, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=404), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.494","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.494","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.590","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.590","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=405) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.594","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=405): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.595","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.595","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 202 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.595","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.595","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=406) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.600","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=406): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.600","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152132600, latencyMs=5, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=406), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.600","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.600","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.695","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.695","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=407) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.698","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=407): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.698","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.698","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 203 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.698","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.699","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=408) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.704","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=408): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.704","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152132704, latencyMs=5, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=408), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.704","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.704","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.799","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.799","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=409) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.801","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=409): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.801","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.801","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 204 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.801","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.801","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=410) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.811","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=410): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.811","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152132811, latencyMs=10, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=410), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.811","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.812","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.902","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.902","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=411) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.910","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=411): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.910","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.910","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 205 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.910","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.910","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=412) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.912","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=412): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.912","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152132912, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=412), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.912","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:12.912","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.011","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.011","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=413) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.015","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=413): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.015","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.015","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 206 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.015","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.015","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=414) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.018","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=414): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.018","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152133018, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=414), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.018","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.018","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.116","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.116","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=415) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.119","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=415): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.119","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.119","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 207 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.119","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.119","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=416) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.125","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=416): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.125","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152133125, latencyMs=6, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=416), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.125","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.125","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.220","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.220","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=417) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.225","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=417): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.225","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.225","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 208 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.225","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.225","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=418) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.228","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=418): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.228","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152133228, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=418), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.228","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.228","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.326","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.326","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=419) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.329","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=419): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.329","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.329","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 209 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.329","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.329","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=420) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.347","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=420): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.347","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152133347, latencyMs=18, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=420), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.347","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.347","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.430","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.430","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=421) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.454","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=421): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.454","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.454","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 210 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.455","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.455","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=422) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.457","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=422): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.457","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152133457, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=422), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.457","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.457","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.555","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.555","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=423) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.595","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=423): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.599","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.601","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 211 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.601","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.601","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=424) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.628","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=424): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.629","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152133628, latencyMs=27, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=424), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.629","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.629","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.696","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.696","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=425) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.704","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=425): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.704","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.704","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 212 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.704","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.704","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=426) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.709","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=426): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.709","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152133709, latencyMs=5, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=426), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.709","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.709","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.805","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.805","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=427) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.807","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=427): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.807","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.807","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 213 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.807","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.807","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=428) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.809","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=428): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.809","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152133809, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=428), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.809","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.809","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.908","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.908","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=429) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.912","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=429): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.913","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.913","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 214 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.913","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.913","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=430) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.918","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=430): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.918","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152133918, latencyMs=5, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=430), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.918","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:13.918","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.013","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.013","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=431) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.014","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=431): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.014","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.014","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 215 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.014","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.014","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=432) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.017","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=432): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.017","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152134017, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=432), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.017","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.017","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.114","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.114","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=433) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.116","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=433): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.116","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.116","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 216 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.116","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.116","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=434) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.118","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=434): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.118","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152134118, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=434), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.118","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.118","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.217","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.217","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=435) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.223","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=435): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.223","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.223","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 217 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.224","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.224","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=436) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.229","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=436): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.229","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152134229, latencyMs=5, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=436), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.229","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.229","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.323","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.323","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=437) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.328","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=437): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.328","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.328","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 218 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.328","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.328","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=438) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.335","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=438): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.335","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152134335, latencyMs=7, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=438), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.335","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.335","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.429","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.429","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=439) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.432","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=439): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.432","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.432","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 219 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.432","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.432","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=440) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.435","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=440): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.435","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152134435, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=440), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.435","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.435","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.535","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.536","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=441) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.548","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=441): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.550","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.554","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 220 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.555","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.556","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=442) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.572","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=442): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.573","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152134567, latencyMs=11, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=442), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.575","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.575","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.648","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.658","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=443) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.716","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=443): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.717","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.722","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 221 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.722","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.753","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=444) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.806","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=444): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.806","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152134806, latencyMs=84, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=444), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.806","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.830","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.830","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.837","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=445) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.888","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=445): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.889","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.889","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 222 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.890","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.890","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=446) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.904","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=446): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.907","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152134904, latencyMs=14, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=446), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.907","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.907","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.992","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:14.993","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=447) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.023","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=447): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.024","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.024","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 223 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.024","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.024","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=448) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.030","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=448): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.031","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152135030, latencyMs=6, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=448), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.031","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.031","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.124","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.124","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=449) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.128","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=449): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.128","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.128","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 224 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.129","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.129","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=450) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.133","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=450): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.134","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152135133, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=450), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.134","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.134","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.230","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.230","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=451) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.237","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=451): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.237","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.238","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 225 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.238","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.238","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=452) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.242","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=452): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.242","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152135242, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=452), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.242","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.242","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.338","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.338","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=453) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.341","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=453): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.341","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.341","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 226 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.341","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.341","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=454) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.343","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=454): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.343","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152135343, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=454), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.343","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.344","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.440","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.440","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=455) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.444","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=455): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.444","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.444","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 227 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.444","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.444","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=456) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.447","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=456): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.448","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152135447, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=456), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.448","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.448","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.550","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.554","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=457) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.557","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=457): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.557","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.557","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 228 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.557","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.557","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=458) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.565","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=458): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.565","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152135565, latencyMs=8, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=458), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.565","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.565","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.658","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.658","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=459) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.661","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=459): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.661","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.661","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 229 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.661","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.661","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=460) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.663","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=460): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.663","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152135663, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=460), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.663","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.663","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.761","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.761","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=461) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.764","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=461): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.764","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.764","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 230 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.764","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.764","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=462) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.766","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=462): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.766","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152135766, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=462), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.766","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.766","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.865","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.865","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=463) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.867","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=463): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.867","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.867","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 231 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.867","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.867","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=464) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.868","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=464): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.869","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152135868, latencyMs=1, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=464), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.869","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.869","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.968","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.968","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=465) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.972","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=465): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.972","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.972","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 232 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.972","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.972","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=466) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.975","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=466): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.975","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152135975, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=466), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.975","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:15.975","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.072","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.072","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=467) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.074","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=467): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.074","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.074","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 233 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.074","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.074","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=468) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.075","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=468): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.075","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152136075, latencyMs=1, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=468), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.075","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.076","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.175","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.175","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=469) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.178","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=469): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.178","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.178","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 234 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.178","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.179","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=470) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.181","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=470): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.181","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152136181, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=470), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.181","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.181","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.278","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.278","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=471) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.282","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=471): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.282","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.282","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 235 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.282","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.282","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=472) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.287","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=472): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.287","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152136287, latencyMs=5, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=472), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.287","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.287","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.383","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.383","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=473) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.389","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=473): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.389","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.389","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 236 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.389","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.389","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=474) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.396","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=474): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.396","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152136396, latencyMs=7, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=474), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.396","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.396","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.490","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.490","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=475) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.493","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=475): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.493","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.493","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 237 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.493","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.493","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=476) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.497","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=476): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.497","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152136497, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=476), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.497","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.497","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.594","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.594","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=477) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.597","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=477): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.597","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.597","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 238 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.597","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.597","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=478) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.601","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=478): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.601","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152136601, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=478), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.601","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.601","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.698","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.698","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=479) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.701","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=479): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.701","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.701","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 239 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.701","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.701","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=480) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.706","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=480): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.707","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152136706, latencyMs=5, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=480), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.707","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.707","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.802","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.802","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=481) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.806","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=481): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.806","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.807","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 240 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.807","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.807","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=482) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.809","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=482): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.809","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152136809, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=482), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.809","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.809","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.907","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.907","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=483) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.909","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=483): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.909","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.909","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 241 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.910","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.910","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=484) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.914","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=484): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.914","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152136914, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=484), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.914","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:16.914","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.010","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.010","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=485) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.014","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=485): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.014","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.014","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 242 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.014","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.014","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=486) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.019","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=486): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.019","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152137019, latencyMs=5, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=486), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.019","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.019","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.114","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.114","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=487) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.118","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=487): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.119","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.119","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 243 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.119","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.119","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=488) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.125","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=488): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.125","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152137125, latencyMs=6, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=488), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.125","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.125","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.219","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.219","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=489) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.226","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=489): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.227","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.227","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 244 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.227","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.227","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=490) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.233","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=490): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.233","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152137233, latencyMs=6, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=490), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.234","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.234","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.326","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.326","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=491) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.331","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=491): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.331","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.332","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 245 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.332","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.332","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=492) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.334","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=492): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.334","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152137334, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=492), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.334","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.334","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.432","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.432","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=493) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.435","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=493): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.435","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.436","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 246 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.436","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.436","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=494) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.440","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=494): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.440","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152137440, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=494), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.440","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.440","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.536","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.536","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=495) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.540","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=495): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.540","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.540","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 247 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.540","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.540","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=496) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.549","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=496): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.549","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152137549, latencyMs=9, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=496), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.549","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.549","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.641","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.641","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=497) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.648","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=497): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.648","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.648","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 248 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.648","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.648","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=498) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.651","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=498): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.651","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152137651, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=498), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.651","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.651","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.748","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.749","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=499) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.753","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=499): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.753","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.753","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 249 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.753","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.753","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=500) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.756","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=500): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.756","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152137755, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=500), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.756","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.756","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.854","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.854","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=501) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.858","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=501): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.859","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.859","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 250 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.859","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.859","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=502) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.862","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=502): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.862","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152137862, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=502), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.862","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.862","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.958","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.959","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=503) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.961","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=503): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.961","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.961","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 251 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.961","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.961","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=504) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.964","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=504): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.964","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152137964, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=504), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.964","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:17.964","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.063","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.063","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=505) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.066","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=505): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.066","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.067","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 252 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.067","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.067","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=506) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.070","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=506): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.070","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152138070, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=506), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.070","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.070","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.166","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.166","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=507) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.170","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=507): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.170","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.170","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 253 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.170","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.170","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=508) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.173","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=508): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.173","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152138173, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=508), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.173","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.173","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.270","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.270","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=509) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.277","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=509): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.277","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.277","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 254 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.278","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.278","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=510) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.317","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=510): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.317","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152138316, latencyMs=38, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=510), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.317","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.317","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.378","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.379","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=511) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.389","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=511): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.389","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.390","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 255 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.390","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.390","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=512) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.406","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=512): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.406","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152138406, latencyMs=16, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=512), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.406","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.406","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.490","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.491","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=513) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.495","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=513): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.496","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.497","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 256 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.497","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.497","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=514) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.506","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=514): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.506","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152138505, latencyMs=8, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=514), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.506","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.506","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.596","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.596","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=515) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.603","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=515): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.603","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.603","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 257 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.603","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.603","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=516) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.611","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=516): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.611","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152138611, latencyMs=8, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=516), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.611","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.611","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.704","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.704","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=517) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.709","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=517): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.709","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.709","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 258 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.709","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.709","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=518) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.714","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=518): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.714","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152138714, latencyMs=5, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=518), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.714","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.714","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.808","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.808","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=519) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.812","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=519): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.812","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.812","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 259 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.812","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.812","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=520) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.816","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=520): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.816","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152138816, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=520), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.816","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.816","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.913","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.913","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=521) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.917","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=521): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.917","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.917","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 260 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.917","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.917","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=522) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.924","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=522): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.924","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152138924, latencyMs=7, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=522), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.924","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:18.924","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.018","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.018","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=523) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.023","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=523): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.023","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.023","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 261 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.023","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.023","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=524) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.026","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=524): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.026","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152139026, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=524), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.026","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.026","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.124","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.124","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=525) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.128","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=525): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.128","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.128","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 262 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.128","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.128","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=526) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.133","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=526): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.133","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152139133, latencyMs=5, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=526), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.133","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.133","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.229","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.229","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=527) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.235","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=527): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.235","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.235","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 263 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.236","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.236","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=528) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.243","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=528): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.243","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152139243, latencyMs=7, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=528), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.243","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.243","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.336","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.336","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=529) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.339","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=529): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.339","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.339","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 264 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.339","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.339","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=530) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.350","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=530): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.350","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152139350, latencyMs=11, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=530), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.350","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.350","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.440","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.440","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=531) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.444","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=531): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.444","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.444","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 265 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.444","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.444","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=532) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.447","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=532): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.447","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152139447, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=532), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.447","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.447","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.545","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.545","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=533) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.548","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=533): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.548","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.548","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 266 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.548","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.548","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=534) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.551","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=534): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.551","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152139551, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=534), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.551","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.551","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.648","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.648","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=535) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.651","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=535): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.651","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.651","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 267 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.651","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.651","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=536) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.654","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=536): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.654","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152139654, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=536), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.654","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.654","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.752","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.752","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=537) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.755","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=537): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.755","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.755","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 268 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.755","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.755","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=538) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.756","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=538): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.757","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152139756, latencyMs=1, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=538), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.757","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.757","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.831","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.831","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=539) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.835","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=539): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.835","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152139835, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=539), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.835","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.835","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.856","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.856","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=540) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.857","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=540): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.858","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.858","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 269 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.858","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.858","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=541) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.859","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=541): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.859","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152139859, latencyMs=1, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=541), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.859","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.859","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.958","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.958","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=542) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.961","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=542): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.961","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.961","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 270 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.962","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.962","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=543) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.974","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=543): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.975","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152139974, latencyMs=12, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=543), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.975","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:19.975","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.062","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.062","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=544) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.063","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=544): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.063","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.064","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 271 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.064","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.064","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=545) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.065","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=545): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.065","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152140065, latencyMs=1, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=545), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.065","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.065","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.164","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.164","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=546) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.166","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=546): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.166","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.166","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 272 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.166","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.166","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=547) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.167","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=547): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.167","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152140167, latencyMs=1, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=547), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.167","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.167","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.267","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.267","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=548) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.271","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=548): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.271","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.271","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 273 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.271","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.271","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=549) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.275","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=549): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.275","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152140275, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=549), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.275","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.275","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.372","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.372","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=550) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.375","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=550): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.375","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.375","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 274 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.375","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.375","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=551) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.378","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=551): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.378","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152140378, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=551), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.378","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.378","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.475","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.475","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=552) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.480","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=552): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.482","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.482","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 275 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.482","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.482","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=553) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.486","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=553): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.486","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152140486, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=553), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.486","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.486","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.581","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.582","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=554) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.585","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=554): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.585","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.585","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 276 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.585","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.585","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=555) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.588","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=555): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.588","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152140588, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=555), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.588","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.588","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.686","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.686","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=556) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.689","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=556): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.689","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.689","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 277 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.689","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.689","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=557) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.692","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=557): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.692","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152140692, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=557), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.692","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.692","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.789","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.789","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=558) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.798","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=558): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.799","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.799","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 278 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.799","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.799","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=559) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.804","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=559): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.804","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152140804, latencyMs=5, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=559), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.804","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.804","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.898","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.898","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=560) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.901","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=560): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.901","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.901","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 279 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.901","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.901","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=561) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.902","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=561): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.903","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152140902, latencyMs=1, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=561), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.903","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:20.903","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.002","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.002","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=562) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.004","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=562): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.004","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.004","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 280 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.004","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.004","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=563) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.006","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=563): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.007","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152141006, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=563), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.007","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.007","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.105","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.105","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=564) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.107","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=564): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.107","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.107","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 281 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.107","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.107","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=565) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.109","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=565): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.109","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152141109, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=565), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.109","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.109","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.207","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.207","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=566) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.209","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=566): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.209","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.209","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 282 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.209","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.209","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=567) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.210","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=567): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.210","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152141210, latencyMs=1, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=567), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.210","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.210","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.310","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.310","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=568) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.317","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=568): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.317","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.317","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 283 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.317","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.317","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=569) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.319","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=569): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.319","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152141319, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=569), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.319","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.319","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.418","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.418","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=570) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.420","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=570): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.420","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.420","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 284 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.420","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.420","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=571) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.422","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=571): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.422","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152141422, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=571), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.422","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.422","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.520","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.521","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=572) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.524","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=572): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.524","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.524","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 285 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.524","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.524","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=573) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.526","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=573): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.526","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152141525, latencyMs=1, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=573), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.526","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.526","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.625","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.625","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=574) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.634","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=574): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.634","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.634","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 286 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.634","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.634","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=575) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.641","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=575): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.641","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152141641, latencyMs=7, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=575), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.641","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.641","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.735","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.735","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=576) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.740","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=576): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.740","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.740","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 287 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.740","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.740","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=577) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.751","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=577): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.751","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152141751, latencyMs=11, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=577), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.751","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.751","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.841","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.841","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=578) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.847","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=578): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.847","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.847","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 288 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.847","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.847","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=579) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.854","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=579): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.854","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152141854, latencyMs=7, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=579), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.854","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.854","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.948","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.948","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=580) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.952","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=580): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.952","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.952","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 289 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.952","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.952","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=581) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.955","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=581): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.955","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152141955, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=581), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.955","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:21.955","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.053","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.053","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=582) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.058","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=582): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.058","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.058","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 290 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.058","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.058","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=583) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.070","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=583): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.070","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152142070, latencyMs=12, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=583), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.071","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.071","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.158","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.158","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=584) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.162","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=584): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.162","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.162","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 291 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.162","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.163","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=585) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.172","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=585): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.172","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152142172, latencyMs=9, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=585), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.172","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.172","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.262","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.263","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=586) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.268","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=586): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.268","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.268","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 292 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.268","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.268","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=587) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.276","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=587): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.276","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152142276, latencyMs=8, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=587), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.277","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.277","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.369","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.369","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=588) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.376","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=588): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.376","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.377","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 293 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.377","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.377","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=589) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.384","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=589): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.384","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152142384, latencyMs=7, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=589), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.384","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.384","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.478","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.478","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=590) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.482","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=590): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.483","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.483","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 294 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.483","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.483","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=591) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.490","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=591): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.490","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152142490, latencyMs=7, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=591), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.490","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.490","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.583","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.583","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=592) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.591","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=592): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.591","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.591","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 295 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.591","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.591","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=593) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.596","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=593): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.596","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152142596, latencyMs=5, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=593), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.596","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.596","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.692","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.692","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=594) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.697","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=594): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.697","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.697","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 296 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.697","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.697","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=595) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.702","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=595): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.702","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152142702, latencyMs=5, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=595), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.702","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.702","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.798","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.798","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=596) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.802","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=596): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.802","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.802","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 297 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.802","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.802","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=597) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.807","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=597): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.807","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152142807, latencyMs=5, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=597), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.807","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.807","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.903","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.903","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=598) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.905","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=598): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.906","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.906","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 298 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.906","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.906","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=599) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.914","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=599): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.914","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152142914, latencyMs=8, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=599), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.914","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:22.914","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.005","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.005","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=600) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.012","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=600): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.012","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.012","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 299 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.012","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.012","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=601) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.016","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=601): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.016","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152143016, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=601), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.016","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.016","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.113","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.113","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=602) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.121","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=602): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.122","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.122","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 300 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.122","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.122","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=603) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.125","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=603): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.125","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152143125, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=603), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.125","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.125","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.221","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.221","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=604) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.226","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=604): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.226","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.226","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 301 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.226","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.226","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=605) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.229","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=605): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.229","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152143229, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=605), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.229","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.229","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.326","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.327","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=606) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.339","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=606): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.339","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.340","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 302 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.340","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.340","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=607) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.381","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=607): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.381","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152143381, latencyMs=41, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=607), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.381","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.381","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.440","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.441","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=608) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.450","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=608): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.450","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.450","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 303 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.450","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.450","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=609) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.460","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=609): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.460","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152143459, latencyMs=9, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=609), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.460","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.460","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.550","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.550","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=610) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.558","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=610): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.558","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.558","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 304 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.559","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.559","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=611) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.562","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=611): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.562","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152143562, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=611), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.562","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.562","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.659","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.659","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=612) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.661","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=612): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.661","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.661","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 305 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.661","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.661","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=613) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.663","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=613): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.663","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152143663, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=613), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.663","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.663","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.762","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.762","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=614) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.766","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=614): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.766","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.766","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 306 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.766","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.766","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=615) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.770","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=615): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.770","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152143770, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=615), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.771","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.771","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.867","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.867","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=616) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.876","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=616): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.877","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.877","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 307 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.877","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.877","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=617) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.880","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=617): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.880","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152143880, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=617), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.880","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.880","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.977","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.977","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=618) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.981","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=618): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.981","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.982","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 308 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.982","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.982","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=619) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.991","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=619): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.991","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152143991, latencyMs=9, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=619), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.991","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:23.991","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.081","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.081","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=620) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.083","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=620): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.083","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.083","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 309 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.083","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.083","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=621) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.085","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=621): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.085","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152144085, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=621), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.085","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.085","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.184","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.185","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=622) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.186","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=622): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.186","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.186","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 310 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.186","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.186","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=623) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.187","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=623): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.187","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152144187, latencyMs=1, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=623), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.187","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.187","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.286","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.286","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=624) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.297","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=624): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.297","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.297","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 311 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.297","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.297","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=625) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.307","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=625): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.307","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152144307, latencyMs=10, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=625), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.307","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.307","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.398","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.398","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=626) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.402","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=626): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.402","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.402","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 312 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.402","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.402","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=627) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.404","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=627): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.404","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152144404, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=627), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.404","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.404","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.503","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.503","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=628) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.507","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=628): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.507","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.507","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 313 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.507","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.507","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=629) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.513","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=629): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.513","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152144512, latencyMs=5, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=629), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.513","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.513","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.607","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.607","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=630) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.612","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=630): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.612","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.612","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 314 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.612","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.612","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=631) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.614","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=631): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.614","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152144614, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=631), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.614","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.614","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.713","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.713","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=632) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.718","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=632): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.718","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.718","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 315 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.718","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.718","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=633) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.731","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=633): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.731","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152144731, latencyMs=13, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=633), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.731","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.732","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.818","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.818","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=634) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.822","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=634): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.822","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.822","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 316 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.822","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.822","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=635) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.831","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=635): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.831","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152144831, latencyMs=9, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=635), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.831","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.831","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.832","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.832","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=636) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.840","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=636): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.841","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152144840, latencyMs=8, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=636), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.841","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.841","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.923","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.923","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=637) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.928","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=637): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.928","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.928","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 317 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.928","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.928","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=638) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.937","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=638): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.937","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152144937, latencyMs=9, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=638), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.937","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:24.937","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.030","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.030","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=639) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.032","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=639): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.032","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.032","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 318 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.033","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.033","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=640) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.035","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=640): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.035","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152145035, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=640), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.035","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.035","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.133","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.133","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=641) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.139","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=641): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.139","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.140","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 319 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.140","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.140","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=642) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.141","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=642): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.141","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152145141, latencyMs=1, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=642), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.142","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.142","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.239","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.239","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=643) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.243","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=643): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.243","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.243","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 320 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.243","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.244","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=644) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.254","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=644): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.254","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152145254, latencyMs=11, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=644), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.254","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.254","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.344","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.344","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=645) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.357","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=645): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.357","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.357","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 321 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.357","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.357","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=646) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.359","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=646): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.359","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152145359, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=646), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.359","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.359","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.458","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.458","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=647) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.462","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=647): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.462","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.462","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 322 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.462","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.462","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=648) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.465","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=648): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.465","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152145465, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=648), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.465","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.465","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.563","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.563","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=649) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.566","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=649): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.566","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.566","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 323 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.566","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.566","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=650) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.568","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=650): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.569","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152145568, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=650), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.569","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.569","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.667","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.667","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=651) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.673","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=651): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.673","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.673","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 324 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.673","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.673","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=652) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.682","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=652): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.683","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152145682, latencyMs=9, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=652), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.683","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.683","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.773","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.773","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=653) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.777","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=653): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.777","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.777","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 325 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.777","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.777","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=654) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.788","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=654): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.788","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152145788, latencyMs=11, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=654), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.788","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.788","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.878","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.878","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=655) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.883","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=655): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.883","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.883","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 326 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.883","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.883","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=656) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.885","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=656): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.885","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152145885, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=656), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.885","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.885","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.983","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.983","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=657) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.986","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=657): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.986","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.986","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 327 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.987","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.987","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=658) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.988","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=658): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.988","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152145988, latencyMs=1, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=658), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.989","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:25.989","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.086","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.086","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=659) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.088","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=659): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.089","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.089","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 328 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.089","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.089","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=660) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.090","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=660): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.090","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152146090, latencyMs=1, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=660), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.090","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.090","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.189","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.189","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=661) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.192","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=661): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.192","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.192","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 329 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.192","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.192","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=662) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.206","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=662): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.206","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152146206, latencyMs=14, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=662), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.206","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.206","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.293","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.293","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=663) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.295","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=663): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.295","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.296","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 330 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.296","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.296","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=664) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.297","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=664): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.297","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152146297, latencyMs=1, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=664), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.297","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.298","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.396","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.396","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=665) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.397","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=665): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.397","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.397","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 331 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.398","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.398","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=666) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.399","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=666): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.399","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152146399, latencyMs=1, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=666), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.399","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.399","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.497","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.497","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=667) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.499","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=667): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.499","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.499","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 332 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.499","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.499","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=668) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.510","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=668): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.511","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152146510, latencyMs=11, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=668), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.511","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.511","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.600","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.600","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=669) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.602","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=669): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.602","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.603","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 333 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.603","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.603","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=670) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.604","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=670): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.604","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152146604, latencyMs=1, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=670), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.604","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.604","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.704","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.704","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=671) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.705","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=671): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.705","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.706","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 334 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.706","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.706","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=672) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.707","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=672): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.707","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152146707, latencyMs=1, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=672), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.707","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.707","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.806","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.806","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=673) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.808","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=673): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.808","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.808","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 335 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.808","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.808","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=674) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.809","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=674): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.809","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152146809, latencyMs=1, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=674), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.809","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.809","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.909","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.909","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=675) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.912","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=675): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.912","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.912","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 336 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.912","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.912","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=676) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.919","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=676): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.919","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152146919, latencyMs=7, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=676), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.919","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:26.919","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.013","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.013","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=677) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.027","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=677): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.027","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.027","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 337 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.027","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.027","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=678) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.028","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=678): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.028","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152147028, latencyMs=1, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=678), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.028","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.028","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.127","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.127","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=679) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.131","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=679): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.131","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.131","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 338 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.131","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.131","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=680) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.148","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=680): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.148","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152147148, latencyMs=17, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=680), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.148","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.149","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.231","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.231","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=681) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.233","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=681): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.233","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.233","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 339 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.233","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.233","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=682) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.234","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=682): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.234","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152147234, latencyMs=1, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=682), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.235","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.235","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.333","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.334","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=683) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.342","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=683): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.342","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.342","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 340 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.342","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.342","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=684) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.344","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=684): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.344","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152147344, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=684), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.344","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.344","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.443","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.444","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=685) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.452","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=685): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.452","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.452","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 341 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.452","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.452","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=686) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.457","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=686): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.457","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152147457, latencyMs=5, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=686), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.457","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.457","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.551","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.551","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=687) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.555","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=687): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.555","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.555","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 342 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.555","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.555","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=688) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.560","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=688): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.560","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152147560, latencyMs=5, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=688), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.560","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.560","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.668","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.668","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=689) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.673","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=689): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.673","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.673","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 343 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.673","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.673","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=690) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.675","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=690): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.675","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152147675, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=690), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.675","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.675","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.774","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.775","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=691) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.779","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=691): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.779","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.779","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 344 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.780","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.780","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=692) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.782","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=692): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.782","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152147782, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=692), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.782","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.782","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.880","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.880","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=693) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.884","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=693): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.885","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.885","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 345 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.885","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.885","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=694) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.901","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=694): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.901","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152147901, latencyMs=16, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=694), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.901","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.901","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.984","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.984","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=695) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.990","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=695): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.990","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.990","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 346 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.990","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.990","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=696) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.996","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=696): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.996","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152147996, latencyMs=6, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=696), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.996","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:27.996","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.091","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.092","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=697) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.095","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=697): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.095","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.095","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 347 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.095","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.095","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=698) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.097","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=698): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.097","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152148097, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=698), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.097","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.097","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.196","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.196","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=699) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.200","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=699): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.200","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.200","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 348 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.200","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.200","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=700) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.206","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=700): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.206","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152148206, latencyMs=6, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=700), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.206","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.206","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.301","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.301","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=701) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.318","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=701): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.318","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.318","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 349 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.318","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.318","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=702) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.321","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=702): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.321","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152148321, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=702), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.321","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.321","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.419","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.419","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=703) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.422","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=703): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.423","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.423","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 350 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.423","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.423","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=704) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.425","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=704): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.425","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152148425, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=704), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.425","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.425","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.523","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.523","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=705) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.539","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=705): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.539","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.539","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 351 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.539","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.540","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=706) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.541","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=706): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.541","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152148541, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=706), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.541","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.541","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.640","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.640","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=707) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.650","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=707): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.650","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.650","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 352 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.650","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.651","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=708) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.659","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=708): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.659","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152148659, latencyMs=9, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=708), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.659","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.659","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.751","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.751","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=709) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.753","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=709): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.753","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.753","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 353 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.753","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.753","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=710) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.755","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=710): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.755","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152148754, latencyMs=1, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=710), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.755","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.755","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.854","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.854","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=711) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.855","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=711): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.856","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.856","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 354 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.856","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.856","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=712) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.857","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=712): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.857","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152148857, latencyMs=1, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=712), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.857","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.857","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.956","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.956","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=713) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.960","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=713): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.960","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.960","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 355 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.960","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.960","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=714) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.965","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=714): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.965","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152148965, latencyMs=5, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=714), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.965","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:28.965","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.060","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.060","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=715) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.065","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=715): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.065","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.065","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 356 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.065","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.065","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=716) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.067","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=716): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.067","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152149067, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=716), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.067","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.068","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.166","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.166","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=717) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.169","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=717): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.169","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.169","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 357 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.169","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.169","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=718) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.172","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=718): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.172","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152149172, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=718), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.172","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.172","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.269","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.269","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=719) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.273","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=719): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.273","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.273","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 358 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.273","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.273","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=720) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.275","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=720): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.275","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152149275, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=720), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.275","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.275","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.374","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.374","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=721) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.379","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=721): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.379","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.379","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 359 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.379","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.379","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=722) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.386","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=722): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.386","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152149386, latencyMs=7, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=722), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.386","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.386","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.479","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.479","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=723) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.485","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=723): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.485","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.485","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 360 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.485","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.485","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=724) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.494","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=724): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.494","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152149494, latencyMs=9, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=724), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.494","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.494","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.585","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.585","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=725) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.589","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=725): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.590","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.590","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 361 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.590","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.590","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=726) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.598","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=726): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.598","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152149598, latencyMs=8, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=726), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.598","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.598","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.690","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.690","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=727) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.692","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=727): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.693","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.693","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 362 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.693","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.693","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=728) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.695","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=728): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.695","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152149695, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=728), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.695","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.695","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.793","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.793","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=729) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.796","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=729): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.796","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.796","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 363 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.796","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.796","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=730) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.801","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=730): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.801","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152149801, latencyMs=5, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=730), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.801","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.801","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.833","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.834","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=731) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.837","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=731): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.837","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152149837, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=731), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.837","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.837","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.897","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.897","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=732) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.899","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=732): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.899","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.899","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 364 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.899","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.899","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=733) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.901","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=733): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.901","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152149901, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=733), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.901","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:29.901","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.000","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.000","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=734) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.003","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=734): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.003","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.004","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 365 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.004","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.004","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=735) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.006","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=735): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.006","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152150006, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=735), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.006","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.006","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.104","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.104","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=736) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.106","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=736): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.106","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.106","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 366 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.106","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.106","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=737) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.107","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=737): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.107","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152150107, latencyMs=1, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=737), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.107","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.107","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.207","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.207","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=738) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.209","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=738): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.209","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.209","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 367 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.209","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.209","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=739) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.211","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=739): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.211","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152150211, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=739), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.211","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.211","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.310","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.310","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=740) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.313","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=740): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.313","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.313","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 368 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.313","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.313","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=741) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.327","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=741): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.327","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152150327, latencyMs=14, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=741), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.327","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.327","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.414","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.414","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=742) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.416","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=742): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.416","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.416","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 369 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.416","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.416","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=743) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.418","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=743): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.418","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152150418, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=743), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.418","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.418","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.516","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.517","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=744) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.579","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=744): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.579","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.579","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 370 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.580","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.580","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=745) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.623","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=745): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.623","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152150623, latencyMs=43, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=745), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.623","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.623","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.681","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.681","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=746) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.704","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=746): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.705","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.705","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 371 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.705","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.706","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=747) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.720","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=747): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.720","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152150720, latencyMs=15, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=747), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.720","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.720","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.805","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.805","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=748) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.811","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=748): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.811","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.811","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 372 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.811","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.811","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=749) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.813","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=749): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.813","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152150813, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=749), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.813","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.813","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.911","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.911","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=750) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.919","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=750): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.919","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.919","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 373 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.919","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.920","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=751) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.928","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=751): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.928","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152150928, latencyMs=9, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=751), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.928","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:30.928","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.019","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.019","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=752) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.023","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=752): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.023","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.023","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 374 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.023","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.023","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=753) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.030","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=753): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.030","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152151030, latencyMs=7, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=753), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.030","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.030","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.123","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.123","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=754) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.127","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=754): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.127","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.127","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 375 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.127","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.127","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=755) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.146","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=755): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.146","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152151146, latencyMs=19, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=755), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.146","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.146","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.228","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.228","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=756) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.230","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=756): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.230","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.230","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 376 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.230","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.230","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=757) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.232","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=757): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.232","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152151232, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=757), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.232","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.232","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.331","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.331","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=758) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.336","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=758): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.336","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.336","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 377 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.336","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.336","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=759) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.341","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=759): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.341","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152151341, latencyMs=5, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=759), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.341","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.341","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.437","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.437","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=760) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.439","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=760): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.440","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.440","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 378 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.440","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.440","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=761) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.444","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=761): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.444","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152151444, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=761), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.444","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.444","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.540","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.540","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=762) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.544","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=762): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.544","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.544","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 379 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.544","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.544","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=763) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.549","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=763): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.549","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152151549, latencyMs=5, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=763), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.549","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.549","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.645","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.645","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=764) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.646","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=764): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.646","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.646","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 380 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.646","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.646","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=765) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.648","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=765): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.648","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152151648, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=765), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.648","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.648","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.747","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.747","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=766) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.750","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=766): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.750","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.750","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 381 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.750","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.750","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=767) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.754","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=767): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.754","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152151754, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=767), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.754","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.754","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.852","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.852","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=768) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.853","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=768): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.854","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.854","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 382 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.854","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.854","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=769) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.855","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=769): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.855","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152151855, latencyMs=1, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=769), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.855","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.855","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.955","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.955","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=770) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.956","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=770): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.956","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.956","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 383 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.956","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.956","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=771) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.957","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=771): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.957","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152151957, latencyMs=1, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=771), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.957","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:31.957","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.058","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.058","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=772) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.060","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=772): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.060","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.060","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 384 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.060","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.061","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=773) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.062","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=773): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.062","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152152062, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=773), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.062","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.062","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.161","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.161","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=774) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.163","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=774): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.163","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.163","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 385 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.163","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.163","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=775) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.164","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=775): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.165","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152152164, latencyMs=1, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=775), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.165","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.165","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.264","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.264","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=776) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.268","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=776): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.268","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.268","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 386 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.268","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.268","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=777) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.272","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=777): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.272","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152152272, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=777), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.272","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.272","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.367","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.367","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=778) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.381","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=778): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.381","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.381","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 387 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.381","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.381","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=779) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.382","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=779): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.383","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152152382, latencyMs=1, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=779), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.383","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.383","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.481","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.481","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=780) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.485","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=780): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.485","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.485","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 388 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.485","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.485","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=781) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.487","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=781): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.487","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152152487, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=781), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.487","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.487","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.586","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.586","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=782) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.589","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=782): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.589","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.589","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 389 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.589","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.589","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=783) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.592","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=783): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.592","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152152592, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=783), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.592","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.592","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.689","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.689","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=784) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.692","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=784): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.692","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.692","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 390 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.692","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.692","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=785) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.695","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=785): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.695","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152152695, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=785), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.695","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.695","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.794","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.794","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=786) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.797","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=786): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.798","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.798","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 391 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.798","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.798","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=787) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.801","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=787): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.801","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152152801, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=787), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.801","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.801","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.898","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.898","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=788) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.903","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=788): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=k1kDvVZsSlKrd1UHvk6VKg, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.903","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.903","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 392 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.903","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.903","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=789) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.906","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=789): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.906","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750152152906, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=789), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.906","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.906","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.965","level":"DEBUG", thread="SpringApplicationShutdownHook", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received user wakeup"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.965","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Raising WakeupException in response to user wakeup"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.966","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Executing onLeavePrepare with generation Generation{generationId=-1, memberId='', protocol='null'} and memberId "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.967","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Resetting generation due to: consumer pro-actively leaving the group"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.967","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Request joining group due to: consumer pro-actively leaving the group"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.967","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Unsubscribed all topics or patterns and assigned partitions"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.967","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Executing onLeavePrepare with generation Generation{generationId=-1, memberId='', protocol='null'} and memberId "}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.967","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Resetting generation due to: consumer pro-actively leaving the group"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.967","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Request joining group due to: consumer pro-actively leaving the group"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.968","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"Metrics scheduler closed"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.968","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"Closing reporter org.apache.kafka.common.metrics.JmxReporter"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.968","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"Metrics reporters closed"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.970","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"App info kafka.consumer for consumer-plain-kafka-consumer-1 unregistered"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.970","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Kafka consumer has been closed"}
{"name": ${spring.application.name}, "timestamp":"2025-06-17 14:52:32.970","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"plain-kafka-consumer: Consumer stopped"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:58.338","level":"INFO", thread="main", "uri":"", "traceId": "", "spanId": "", "message":"Starting App using Java 17.0.14 on CALTM00891 with PID 89613 (/Users/venktesh.k/workspace/personal/system-programming/spring-kafka-pg/app/build/classes/java/main started by venktesh.k in /Users/venktesh.k/workspace/personal/system-programming/spring-kafka-pg/app)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:58.342","level":"INFO", thread="main", "uri":"", "traceId": "", "spanId": "", "message":"No active profile set, falling back to 1 default profile: "default""}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:58.795","level":"INFO", thread="main", "uri":"", "traceId": "", "spanId": "", "message":"Tomcat initialized with port(s): 8085 (http)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:58.803","level":"INFO", thread="main", "uri":"", "traceId": "", "spanId": "", "message":"Initializing ProtocolHandler ["http-nio-8085"]"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:58.803","level":"INFO", thread="main", "uri":"", "traceId": "", "spanId": "", "message":"Starting service [Tomcat]"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:58.804","level":"INFO", thread="main", "uri":"", "traceId": "", "spanId": "", "message":"Starting Servlet engine: [Apache Tomcat/9.0.65]"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:58.866","level":"INFO", thread="main", "uri":"", "traceId": "", "spanId": "", "message":"Initializing Spring embedded WebApplicationContext"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:58.866","level":"INFO", thread="main", "uri":"", "traceId": "", "spanId": "", "message":"Root WebApplicationContext: initialization completed in 505 ms"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.103","level":"INFO", thread="main", "uri":"", "traceId": "", "spanId": "", "message":"ConsumerConfig values: 
	allow.auto.create.topics = true
	auto.commit.interval.ms = 5000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.dns.lookup = use_all_dns_ips
	client.id = consumer-plain-kafka-consumer-1
	client.rack = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = false
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = plain-kafka-consumer
	group.instance.id = null
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	internal.throw.on.fetch.stable.offset.unsupported = false
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor, class org.apache.kafka.clients.consumer.CooperativeStickyAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	session.timeout.ms = 45000
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.104","level":"DEBUG", thread="main", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Initializing the Kafka consumer"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.146","level":"INFO", thread="main", "uri":"", "traceId": "", "spanId": "", "message":"Kafka version: 3.1.2"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.146","level":"INFO", thread="main", "uri":"", "traceId": "", "spanId": "", "message":"Kafka commitId: f8c67dc3ae0a3265"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.146","level":"INFO", thread="main", "uri":"", "traceId": "", "spanId": "", "message":"Kafka startTimeMs: 1750159019145"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.147","level":"DEBUG", thread="main", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Kafka consumer initialized"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.148","level":"INFO", thread="main", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Subscribed to topic(s): test"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.153","level":"INFO", thread="main", "uri":"", "traceId": "", "spanId": "", "message":"Starting ProtocolHandler ["http-nio-8085"]"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.154","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: -1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.163","level":"INFO", thread="main", "uri":"", "traceId": "", "spanId": "", "message":"Tomcat started on port(s): 8085 (http) with context path ''"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.168","level":"INFO", thread="main", "uri":"", "traceId": "", "spanId": "", "message":"Started App in 1.053 seconds (JVM running for 1.402)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.267","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"Resolved host localhost as 127.0.0.1"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.268","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Initiating connection to node localhost:9092 (id: -1 rack: null) using address localhost/127.0.0.1"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.277","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Created socket with SO_RCVBUF = 342972, SO_SNDBUF = 146988, SO_TIMEOUT = 0 to node -1"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.279","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Completed connection to node -1. Fetching API versions."}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.279","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Initiating API versions fetch from node -1."}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.294","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending API_VERSIONS request with header RequestHeader(apiKey=API_VERSIONS, apiVersion=3, clientId=consumer-plain-kafka-consumer-1, correlationId=1) and timeout 30000 to node -1: ApiVersionsRequestData(clientSoftwareName='apache-kafka-java', clientSoftwareVersion='3.1.2')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.353","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received API_VERSIONS response from node -1 for request with header RequestHeader(apiKey=API_VERSIONS, apiVersion=3, clientId=consumer-plain-kafka-consumer-1, correlationId=1): ApiVersionsResponseData(errorCode=0, apiKeys=[ApiVersion(apiKey=0, minVersion=0, maxVersion=9), ApiVersion(apiKey=1, minVersion=0, maxVersion=15), ApiVersion(apiKey=2, minVersion=0, maxVersion=8), ApiVersion(apiKey=3, minVersion=0, maxVersion=12), ApiVersion(apiKey=8, minVersion=0, maxVersion=8), ApiVersion(apiKey=9, minVersion=0, maxVersion=8), ApiVersion(apiKey=10, minVersion=0, maxVersion=4), ApiVersion(apiKey=11, minVersion=0, maxVersion=9), ApiVersion(apiKey=12, minVersion=0, maxVersion=4), ApiVersion(apiKey=13, minVersion=0, maxVersion=5), ApiVersion(apiKey=14, minVersion=0, maxVersion=5), ApiVersion(apiKey=15, minVersion=0, maxVersion=5), ApiVersion(apiKey=16, minVersion=0, maxVersion=4), ApiVersion(apiKey=17, minVersion=0, maxVersion=1), ApiVersion(apiKey=18, minVersion=0, maxVersion=3), ApiVersion(apiKey=19, minVersion=0, maxVersion=7), ApiVersion(apiKey=20, minVersion=0, maxVersion=6), ApiVersion(apiKey=21, minVersion=0, maxVersion=2), ApiVersion(apiKey=22, minVersion=0, maxVersion=4), ApiVersion(apiKey=23, minVersion=0, maxVersion=4), ApiVersion(apiKey=24, minVersion=0, maxVersion=3), ApiVersion(apiKey=25, minVersion=0, maxVersion=3), ApiVersion(apiKey=26, minVersion=0, maxVersion=3), ApiVersion(apiKey=27, minVersion=0, maxVersion=1), ApiVersion(apiKey=28, minVersion=0, maxVersion=3), ApiVersion(apiKey=29, minVersion=0, maxVersion=3), ApiVersion(apiKey=30, minVersion=0, maxVersion=3), ApiVersion(apiKey=31, minVersion=0, maxVersion=3), ApiVersion(apiKey=32, minVersion=0, maxVersion=4), ApiVersion(apiKey=33, minVersion=0, maxVersion=2), ApiVersion(apiKey=34, minVersion=0, maxVersion=2), ApiVersion(apiKey=35, minVersion=0, maxVersion=4), ApiVersion(apiKey=36, minVersion=0, maxVersion=2), ApiVersion(apiKey=37, minVersion=0, maxVersion=3), ApiVersion(apiKey=42, minVersion=0, maxVersion=2), ApiVersion(apiKey=43, minVersion=0, maxVersion=2), ApiVersion(apiKey=44, minVersion=0, maxVersion=1), ApiVersion(apiKey=45, minVersion=0, maxVersion=0), ApiVersion(apiKey=46, minVersion=0, maxVersion=0), ApiVersion(apiKey=47, minVersion=0, maxVersion=0), ApiVersion(apiKey=48, minVersion=0, maxVersion=1), ApiVersion(apiKey=49, minVersion=0, maxVersion=1), ApiVersion(apiKey=50, minVersion=0, maxVersion=0), ApiVersion(apiKey=51, minVersion=0, maxVersion=0), ApiVersion(apiKey=55, minVersion=0, maxVersion=1), ApiVersion(apiKey=57, minVersion=0, maxVersion=1), ApiVersion(apiKey=60, minVersion=0, maxVersion=0), ApiVersion(apiKey=61, minVersion=0, maxVersion=0), ApiVersion(apiKey=64, minVersion=0, maxVersion=0), ApiVersion(apiKey=65, minVersion=0, maxVersion=0), ApiVersion(apiKey=66, minVersion=0, maxVersion=0)], throttleTimeMs=0, supportedFeatures=[SupportedFeatureKey(name='metadata.version', minVersion=1, maxVersion=11)], finalizedFeaturesEpoch=356, finalizedFeatures=[FinalizedFeatureKey(name='metadata.version', maxVersionLevel=11, minVersionLevel=11)])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.365","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node -1 has finalized features epoch: 356, finalized features: [FinalizedFeatureKey(name='metadata.version', maxVersionLevel=11, minVersionLevel=11)], supported features: [SupportedFeatureKey(name='metadata.version', minVersion=1, maxVersion=11)], API versions: (Produce(0): 0 to 9 [usable: 9], Fetch(1): 0 to 15 [usable: 13], ListOffsets(2): 0 to 8 [usable: 7], Metadata(3): 0 to 12 [usable: 12], LeaderAndIsr(4): UNSUPPORTED, StopReplica(5): UNSUPPORTED, UpdateMetadata(6): UNSUPPORTED, ControlledShutdown(7): UNSUPPORTED, OffsetCommit(8): 0 to 8 [usable: 8], OffsetFetch(9): 0 to 8 [usable: 8], FindCoordinator(10): 0 to 4 [usable: 4], JoinGroup(11): 0 to 9 [usable: 7], Heartbeat(12): 0 to 4 [usable: 4], LeaveGroup(13): 0 to 5 [usable: 4], SyncGroup(14): 0 to 5 [usable: 5], DescribeGroups(15): 0 to 5 [usable: 5], ListGroups(16): 0 to 4 [usable: 4], SaslHandshake(17): 0 to 1 [usable: 1], ApiVersions(18): 0 to 3 [usable: 3], CreateTopics(19): 0 to 7 [usable: 7], DeleteTopics(20): 0 to 6 [usable: 6], DeleteRecords(21): 0 to 2 [usable: 2], InitProducerId(22): 0 to 4 [usable: 4], OffsetForLeaderEpoch(23): 0 to 4 [usable: 4], AddPartitionsToTxn(24): 0 to 3 [usable: 3], AddOffsetsToTxn(25): 0 to 3 [usable: 3], EndTxn(26): 0 to 3 [usable: 3], WriteTxnMarkers(27): 0 to 1 [usable: 1], TxnOffsetCommit(28): 0 to 3 [usable: 3], DescribeAcls(29): 0 to 3 [usable: 2], CreateAcls(30): 0 to 3 [usable: 2], DeleteAcls(31): 0 to 3 [usable: 2], DescribeConfigs(32): 0 to 4 [usable: 4], AlterConfigs(33): 0 to 2 [usable: 2], AlterReplicaLogDirs(34): 0 to 2 [usable: 2], DescribeLogDirs(35): 0 to 4 [usable: 2], SaslAuthenticate(36): 0 to 2 [usable: 2], CreatePartitions(37): 0 to 3 [usable: 3], CreateDelegationToken(38): UNSUPPORTED, RenewDelegationToken(39): UNSUPPORTED, ExpireDelegationToken(40): UNSUPPORTED, DescribeDelegationToken(41): UNSUPPORTED, DeleteGroups(42): 0 to 2 [usable: 2], ElectLeaders(43): 0 to 2 [usable: 2], IncrementalAlterConfigs(44): 0 to 1 [usable: 1], AlterPartitionReassignments(45): 0 [usable: 0], ListPartitionReassignments(46): 0 [usable: 0], OffsetDelete(47): 0 [usable: 0], DescribeClientQuotas(48): 0 to 1 [usable: 1], AlterClientQuotas(49): 0 to 1 [usable: 1], DescribeUserScramCredentials(50): 0 [usable: 0], AlterUserScramCredentials(51): 0 [usable: 0], DescribeQuorum(55): 0 to 1 [usable: 0], AlterIsr(56): UNSUPPORTED, UpdateFeatures(57): 0 to 1 [usable: 0], DescribeCluster(60): 0 [usable: 0], DescribeProducers(61): 0 [usable: 0], UnregisterBroker(64): 0 [usable: 0], DescribeTransactions(65): 0 [usable: 0], ListTransactions(66): 0 [usable: 0], AllocateProducerIds(67): UNSUPPORTED)."}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.366","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: -1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.366","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=2) and timeout 30000 to node -1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.367","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=0) and timeout 30000 to node -1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.451","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node -1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=2): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=3, name='test', topicId=AAAAAAAAAAAAAAAAAAAAAA, isInternal=false, partitions=[], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.452","level":"WARN", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Error while fetching metadata with correlation id 2 : {test=UNKNOWN_TOPIC_OR_PARTITION}"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.453","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Requesting metadata update for topic test due to error UNKNOWN_TOPIC_OR_PARTITION"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.453","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Cluster ID: OTYwMzU2ZWU3ZmY0NGQ5OQ"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.453","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 2 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.480","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node -1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=0): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.481","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750159019480, latencyMs=215, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=0), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.481","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.481","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.551","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Initialize connection to node localhost:9092 (id: 1 rack: null) for sending metadata request"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.551","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"Resolved host localhost as 127.0.0.1"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.551","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Initiating connection to node localhost:9092 (id: 1 rack: null) using address localhost/127.0.0.1"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.553","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Created socket with SO_RCVBUF = 342972, SO_SNDBUF = 146988, SO_TIMEOUT = 0 to node 1"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.553","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Completed connection to node 1. Fetching API versions."}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.553","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Initiating API versions fetch from node 1."}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.553","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending API_VERSIONS request with header RequestHeader(apiKey=API_VERSIONS, apiVersion=3, clientId=consumer-plain-kafka-consumer-1, correlationId=3) and timeout 30000 to node 1: ApiVersionsRequestData(clientSoftwareName='apache-kafka-java', clientSoftwareVersion='3.1.2')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.563","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received API_VERSIONS response from node 1 for request with header RequestHeader(apiKey=API_VERSIONS, apiVersion=3, clientId=consumer-plain-kafka-consumer-1, correlationId=3): ApiVersionsResponseData(errorCode=0, apiKeys=[ApiVersion(apiKey=0, minVersion=0, maxVersion=9), ApiVersion(apiKey=1, minVersion=0, maxVersion=15), ApiVersion(apiKey=2, minVersion=0, maxVersion=8), ApiVersion(apiKey=3, minVersion=0, maxVersion=12), ApiVersion(apiKey=8, minVersion=0, maxVersion=8), ApiVersion(apiKey=9, minVersion=0, maxVersion=8), ApiVersion(apiKey=10, minVersion=0, maxVersion=4), ApiVersion(apiKey=11, minVersion=0, maxVersion=9), ApiVersion(apiKey=12, minVersion=0, maxVersion=4), ApiVersion(apiKey=13, minVersion=0, maxVersion=5), ApiVersion(apiKey=14, minVersion=0, maxVersion=5), ApiVersion(apiKey=15, minVersion=0, maxVersion=5), ApiVersion(apiKey=16, minVersion=0, maxVersion=4), ApiVersion(apiKey=17, minVersion=0, maxVersion=1), ApiVersion(apiKey=18, minVersion=0, maxVersion=3), ApiVersion(apiKey=19, minVersion=0, maxVersion=7), ApiVersion(apiKey=20, minVersion=0, maxVersion=6), ApiVersion(apiKey=21, minVersion=0, maxVersion=2), ApiVersion(apiKey=22, minVersion=0, maxVersion=4), ApiVersion(apiKey=23, minVersion=0, maxVersion=4), ApiVersion(apiKey=24, minVersion=0, maxVersion=3), ApiVersion(apiKey=25, minVersion=0, maxVersion=3), ApiVersion(apiKey=26, minVersion=0, maxVersion=3), ApiVersion(apiKey=27, minVersion=0, maxVersion=1), ApiVersion(apiKey=28, minVersion=0, maxVersion=3), ApiVersion(apiKey=29, minVersion=0, maxVersion=3), ApiVersion(apiKey=30, minVersion=0, maxVersion=3), ApiVersion(apiKey=31, minVersion=0, maxVersion=3), ApiVersion(apiKey=32, minVersion=0, maxVersion=4), ApiVersion(apiKey=33, minVersion=0, maxVersion=2), ApiVersion(apiKey=34, minVersion=0, maxVersion=2), ApiVersion(apiKey=35, minVersion=0, maxVersion=4), ApiVersion(apiKey=36, minVersion=0, maxVersion=2), ApiVersion(apiKey=37, minVersion=0, maxVersion=3), ApiVersion(apiKey=42, minVersion=0, maxVersion=2), ApiVersion(apiKey=43, minVersion=0, maxVersion=2), ApiVersion(apiKey=44, minVersion=0, maxVersion=1), ApiVersion(apiKey=45, minVersion=0, maxVersion=0), ApiVersion(apiKey=46, minVersion=0, maxVersion=0), ApiVersion(apiKey=47, minVersion=0, maxVersion=0), ApiVersion(apiKey=48, minVersion=0, maxVersion=1), ApiVersion(apiKey=49, minVersion=0, maxVersion=1), ApiVersion(apiKey=50, minVersion=0, maxVersion=0), ApiVersion(apiKey=51, minVersion=0, maxVersion=0), ApiVersion(apiKey=55, minVersion=0, maxVersion=1), ApiVersion(apiKey=57, minVersion=0, maxVersion=1), ApiVersion(apiKey=60, minVersion=0, maxVersion=0), ApiVersion(apiKey=61, minVersion=0, maxVersion=0), ApiVersion(apiKey=64, minVersion=0, maxVersion=0), ApiVersion(apiKey=65, minVersion=0, maxVersion=0), ApiVersion(apiKey=66, minVersion=0, maxVersion=0)], throttleTimeMs=0, supportedFeatures=[SupportedFeatureKey(name='metadata.version', minVersion=1, maxVersion=11)], finalizedFeaturesEpoch=356, finalizedFeatures=[FinalizedFeatureKey(name='metadata.version', maxVersionLevel=11, minVersionLevel=11)])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.564","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 has finalized features epoch: 356, finalized features: [FinalizedFeatureKey(name='metadata.version', maxVersionLevel=11, minVersionLevel=11)], supported features: [SupportedFeatureKey(name='metadata.version', minVersion=1, maxVersion=11)], API versions: (Produce(0): 0 to 9 [usable: 9], Fetch(1): 0 to 15 [usable: 13], ListOffsets(2): 0 to 8 [usable: 7], Metadata(3): 0 to 12 [usable: 12], LeaderAndIsr(4): UNSUPPORTED, StopReplica(5): UNSUPPORTED, UpdateMetadata(6): UNSUPPORTED, ControlledShutdown(7): UNSUPPORTED, OffsetCommit(8): 0 to 8 [usable: 8], OffsetFetch(9): 0 to 8 [usable: 8], FindCoordinator(10): 0 to 4 [usable: 4], JoinGroup(11): 0 to 9 [usable: 7], Heartbeat(12): 0 to 4 [usable: 4], LeaveGroup(13): 0 to 5 [usable: 4], SyncGroup(14): 0 to 5 [usable: 5], DescribeGroups(15): 0 to 5 [usable: 5], ListGroups(16): 0 to 4 [usable: 4], SaslHandshake(17): 0 to 1 [usable: 1], ApiVersions(18): 0 to 3 [usable: 3], CreateTopics(19): 0 to 7 [usable: 7], DeleteTopics(20): 0 to 6 [usable: 6], DeleteRecords(21): 0 to 2 [usable: 2], InitProducerId(22): 0 to 4 [usable: 4], OffsetForLeaderEpoch(23): 0 to 4 [usable: 4], AddPartitionsToTxn(24): 0 to 3 [usable: 3], AddOffsetsToTxn(25): 0 to 3 [usable: 3], EndTxn(26): 0 to 3 [usable: 3], WriteTxnMarkers(27): 0 to 1 [usable: 1], TxnOffsetCommit(28): 0 to 3 [usable: 3], DescribeAcls(29): 0 to 3 [usable: 2], CreateAcls(30): 0 to 3 [usable: 2], DeleteAcls(31): 0 to 3 [usable: 2], DescribeConfigs(32): 0 to 4 [usable: 4], AlterConfigs(33): 0 to 2 [usable: 2], AlterReplicaLogDirs(34): 0 to 2 [usable: 2], DescribeLogDirs(35): 0 to 4 [usable: 2], SaslAuthenticate(36): 0 to 2 [usable: 2], CreatePartitions(37): 0 to 3 [usable: 3], CreateDelegationToken(38): UNSUPPORTED, RenewDelegationToken(39): UNSUPPORTED, ExpireDelegationToken(40): UNSUPPORTED, DescribeDelegationToken(41): UNSUPPORTED, DeleteGroups(42): 0 to 2 [usable: 2], ElectLeaders(43): 0 to 2 [usable: 2], IncrementalAlterConfigs(44): 0 to 1 [usable: 1], AlterPartitionReassignments(45): 0 [usable: 0], ListPartitionReassignments(46): 0 [usable: 0], OffsetDelete(47): 0 [usable: 0], DescribeClientQuotas(48): 0 to 1 [usable: 1], AlterClientQuotas(49): 0 to 1 [usable: 1], DescribeUserScramCredentials(50): 0 [usable: 0], AlterUserScramCredentials(51): 0 [usable: 0], DescribeQuorum(55): 0 to 1 [usable: 0], AlterIsr(56): UNSUPPORTED, UpdateFeatures(57): 0 to 1 [usable: 0], DescribeCluster(60): 0 [usable: 0], DescribeProducers(61): 0 [usable: 0], UnregisterBroker(64): 0 [usable: 0], DescribeTransactions(65): 0 [usable: 0], ListTransactions(66): 0 [usable: 0], AllocateProducerIds(67): UNSUPPORTED)."}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.564","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.564","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=4) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.568","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=4): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=3, name='test', topicId=AAAAAAAAAAAAAAAAAAAAAA, isInternal=false, partitions=[], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.568","level":"WARN", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Error while fetching metadata with correlation id 4 : {test=UNKNOWN_TOPIC_OR_PARTITION}"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.568","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Requesting metadata update for topic test due to error UNKNOWN_TOPIC_OR_PARTITION"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.568","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 3 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.568","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.568","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=5) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.570","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=5): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.570","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750159019570, latencyMs=2, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=5), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.570","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.570","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.668","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.668","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=6) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.674","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=6): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=59Vll4XiSKq-TCCuoK4aJw, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.675","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Resetting the last seen epoch of partition test-0 to 0 since the associated topicId changed from null to 59Vll4XiSKq-TCCuoK4aJw"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.675","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 4 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.676","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.676","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=7) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.686","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=7): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.687","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750159019686, latencyMs=10, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=7), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=-1, host='', port=-1, errorCode=15, errorMessage='')]))"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.687","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator lookup failed: "}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.687","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Coordinator discovery failed, refreshing metadata"}
org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.775","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.775","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending METADATA request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=8) and timeout 30000 to node 1: MetadataRequestData(topics=[MetadataRequestTopic(topicId=AAAAAAAAAAAAAAAAAAAAAA, name='test')], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.779","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received METADATA response from node 1 for request with header RequestHeader(apiKey=METADATA, apiVersion=12, clientId=consumer-plain-kafka-consumer-1, correlationId=8): MetadataResponseData(throttleTimeMs=0, brokers=[MetadataResponseBroker(nodeId=1, host='localhost', port=9092, rack=null)], clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', controllerId=1, topics=[MetadataResponseTopic(errorCode=0, name='test', topicId=59Vll4XiSKq-TCCuoK4aJw, isInternal=false, partitions=[MetadataResponsePartition(errorCode=0, partitionIndex=0, leaderId=1, leaderEpoch=0, replicaNodes=[1], isrNodes=[1], offlineReplicas=[])], topicAuthorizedOperations=-2147483648)], clusterAuthorizedOperations=-2147483648)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.779","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updating last seen epoch for partition test-0 from 0 to epoch 0 from new metadata"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.779","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Updated cluster metadata updateVersion 5 to MetadataCache{clusterId='OTYwMzU2ZWU3ZmY0NGQ5OQ', nodes={1=localhost:9092 (id: 1 rack: null)}, partitions=[PartitionMetadata(error=NONE, partition=test-0, leader=Optional[1], leaderEpoch=Optional[0], replicas=1, isr=1, offlineReplicas=)], controller=localhost:9092 (id: 1 rack: null)}"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.779","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.779","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=9) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.789","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=9): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=1, host='localhost', port=9092, errorCode=0, errorMessage='')])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.789","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750159019789, latencyMs=10, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=9), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=1, host='localhost', port=9092, errorCode=0, errorMessage='')]))"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.790","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Discovered group coordinator localhost:9092 (id: 2147483646 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.790","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"Resolved host localhost as 127.0.0.1"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.790","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Initiating connection to node localhost:9092 (id: 2147483646 rack: null) using address localhost/127.0.0.1"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.791","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Executing onJoinPrepare with generation -1 and memberId "}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.791","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Heartbeat thread started"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.791","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] (Re-)joining group"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.791","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Joining group with current subscription: [test]"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.794","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending JoinGroup (JoinGroupRequestData(groupId='plain-kafka-consumer', sessionTimeoutMs=45000, rebalanceTimeoutMs=300000, memberId='', groupInstanceId=null, protocolType='consumer', protocols=[JoinGroupRequestProtocol(name='range', metadata=[0, 1, 0, 0, 0, 1, 0, 4, 116, 101, 115, 116, -1, -1, -1, -1, 0, 0, 0, 0]), JoinGroupRequestProtocol(name='cooperative-sticky', metadata=[0, 1, 0, 0, 0, 1, 0, 4, 116, 101, 115, 116, 0, 0, 0, 4, -1, -1, -1, -1, 0, 0, 0, 0])])) to coordinator localhost:9092 (id: 2147483646 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.795","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Created socket with SO_RCVBUF = 342972, SO_SNDBUF = 146988, SO_TIMEOUT = 0 to node 2147483646"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.795","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Completed connection to node 2147483646. Fetching API versions."}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.795","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Initiating API versions fetch from node 2147483646."}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.795","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending API_VERSIONS request with header RequestHeader(apiKey=API_VERSIONS, apiVersion=3, clientId=consumer-plain-kafka-consumer-1, correlationId=11) and timeout 30000 to node 2147483646: ApiVersionsRequestData(clientSoftwareName='apache-kafka-java', clientSoftwareVersion='3.1.2')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.805","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received API_VERSIONS response from node 2147483646 for request with header RequestHeader(apiKey=API_VERSIONS, apiVersion=3, clientId=consumer-plain-kafka-consumer-1, correlationId=11): ApiVersionsResponseData(errorCode=0, apiKeys=[ApiVersion(apiKey=0, minVersion=0, maxVersion=9), ApiVersion(apiKey=1, minVersion=0, maxVersion=15), ApiVersion(apiKey=2, minVersion=0, maxVersion=8), ApiVersion(apiKey=3, minVersion=0, maxVersion=12), ApiVersion(apiKey=8, minVersion=0, maxVersion=8), ApiVersion(apiKey=9, minVersion=0, maxVersion=8), ApiVersion(apiKey=10, minVersion=0, maxVersion=4), ApiVersion(apiKey=11, minVersion=0, maxVersion=9), ApiVersion(apiKey=12, minVersion=0, maxVersion=4), ApiVersion(apiKey=13, minVersion=0, maxVersion=5), ApiVersion(apiKey=14, minVersion=0, maxVersion=5), ApiVersion(apiKey=15, minVersion=0, maxVersion=5), ApiVersion(apiKey=16, minVersion=0, maxVersion=4), ApiVersion(apiKey=17, minVersion=0, maxVersion=1), ApiVersion(apiKey=18, minVersion=0, maxVersion=3), ApiVersion(apiKey=19, minVersion=0, maxVersion=7), ApiVersion(apiKey=20, minVersion=0, maxVersion=6), ApiVersion(apiKey=21, minVersion=0, maxVersion=2), ApiVersion(apiKey=22, minVersion=0, maxVersion=4), ApiVersion(apiKey=23, minVersion=0, maxVersion=4), ApiVersion(apiKey=24, minVersion=0, maxVersion=3), ApiVersion(apiKey=25, minVersion=0, maxVersion=3), ApiVersion(apiKey=26, minVersion=0, maxVersion=3), ApiVersion(apiKey=27, minVersion=0, maxVersion=1), ApiVersion(apiKey=28, minVersion=0, maxVersion=3), ApiVersion(apiKey=29, minVersion=0, maxVersion=3), ApiVersion(apiKey=30, minVersion=0, maxVersion=3), ApiVersion(apiKey=31, minVersion=0, maxVersion=3), ApiVersion(apiKey=32, minVersion=0, maxVersion=4), ApiVersion(apiKey=33, minVersion=0, maxVersion=2), ApiVersion(apiKey=34, minVersion=0, maxVersion=2), ApiVersion(apiKey=35, minVersion=0, maxVersion=4), ApiVersion(apiKey=36, minVersion=0, maxVersion=2), ApiVersion(apiKey=37, minVersion=0, maxVersion=3), ApiVersion(apiKey=42, minVersion=0, maxVersion=2), ApiVersion(apiKey=43, minVersion=0, maxVersion=2), ApiVersion(apiKey=44, minVersion=0, maxVersion=1), ApiVersion(apiKey=45, minVersion=0, maxVersion=0), ApiVersion(apiKey=46, minVersion=0, maxVersion=0), ApiVersion(apiKey=47, minVersion=0, maxVersion=0), ApiVersion(apiKey=48, minVersion=0, maxVersion=1), ApiVersion(apiKey=49, minVersion=0, maxVersion=1), ApiVersion(apiKey=50, minVersion=0, maxVersion=0), ApiVersion(apiKey=51, minVersion=0, maxVersion=0), ApiVersion(apiKey=55, minVersion=0, maxVersion=1), ApiVersion(apiKey=57, minVersion=0, maxVersion=1), ApiVersion(apiKey=60, minVersion=0, maxVersion=0), ApiVersion(apiKey=61, minVersion=0, maxVersion=0), ApiVersion(apiKey=64, minVersion=0, maxVersion=0), ApiVersion(apiKey=65, minVersion=0, maxVersion=0), ApiVersion(apiKey=66, minVersion=0, maxVersion=0)], throttleTimeMs=0, supportedFeatures=[SupportedFeatureKey(name='metadata.version', minVersion=1, maxVersion=11)], finalizedFeaturesEpoch=413, finalizedFeatures=[FinalizedFeatureKey(name='metadata.version', maxVersionLevel=11, minVersionLevel=11)])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.806","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 2147483646 has finalized features epoch: 413, finalized features: [FinalizedFeatureKey(name='metadata.version', maxVersionLevel=11, minVersionLevel=11)], supported features: [SupportedFeatureKey(name='metadata.version', minVersion=1, maxVersion=11)], API versions: (Produce(0): 0 to 9 [usable: 9], Fetch(1): 0 to 15 [usable: 13], ListOffsets(2): 0 to 8 [usable: 7], Metadata(3): 0 to 12 [usable: 12], LeaderAndIsr(4): UNSUPPORTED, StopReplica(5): UNSUPPORTED, UpdateMetadata(6): UNSUPPORTED, ControlledShutdown(7): UNSUPPORTED, OffsetCommit(8): 0 to 8 [usable: 8], OffsetFetch(9): 0 to 8 [usable: 8], FindCoordinator(10): 0 to 4 [usable: 4], JoinGroup(11): 0 to 9 [usable: 7], Heartbeat(12): 0 to 4 [usable: 4], LeaveGroup(13): 0 to 5 [usable: 4], SyncGroup(14): 0 to 5 [usable: 5], DescribeGroups(15): 0 to 5 [usable: 5], ListGroups(16): 0 to 4 [usable: 4], SaslHandshake(17): 0 to 1 [usable: 1], ApiVersions(18): 0 to 3 [usable: 3], CreateTopics(19): 0 to 7 [usable: 7], DeleteTopics(20): 0 to 6 [usable: 6], DeleteRecords(21): 0 to 2 [usable: 2], InitProducerId(22): 0 to 4 [usable: 4], OffsetForLeaderEpoch(23): 0 to 4 [usable: 4], AddPartitionsToTxn(24): 0 to 3 [usable: 3], AddOffsetsToTxn(25): 0 to 3 [usable: 3], EndTxn(26): 0 to 3 [usable: 3], WriteTxnMarkers(27): 0 to 1 [usable: 1], TxnOffsetCommit(28): 0 to 3 [usable: 3], DescribeAcls(29): 0 to 3 [usable: 2], CreateAcls(30): 0 to 3 [usable: 2], DeleteAcls(31): 0 to 3 [usable: 2], DescribeConfigs(32): 0 to 4 [usable: 4], AlterConfigs(33): 0 to 2 [usable: 2], AlterReplicaLogDirs(34): 0 to 2 [usable: 2], DescribeLogDirs(35): 0 to 4 [usable: 2], SaslAuthenticate(36): 0 to 2 [usable: 2], CreatePartitions(37): 0 to 3 [usable: 3], CreateDelegationToken(38): UNSUPPORTED, RenewDelegationToken(39): UNSUPPORTED, ExpireDelegationToken(40): UNSUPPORTED, DescribeDelegationToken(41): UNSUPPORTED, DeleteGroups(42): 0 to 2 [usable: 2], ElectLeaders(43): 0 to 2 [usable: 2], IncrementalAlterConfigs(44): 0 to 1 [usable: 1], AlterPartitionReassignments(45): 0 [usable: 0], ListPartitionReassignments(46): 0 [usable: 0], OffsetDelete(47): 0 [usable: 0], DescribeClientQuotas(48): 0 to 1 [usable: 1], AlterClientQuotas(49): 0 to 1 [usable: 1], DescribeUserScramCredentials(50): 0 [usable: 0], AlterUserScramCredentials(51): 0 [usable: 0], DescribeQuorum(55): 0 to 1 [usable: 0], AlterIsr(56): UNSUPPORTED, UpdateFeatures(57): 0 to 1 [usable: 0], DescribeCluster(60): 0 [usable: 0], DescribeProducers(61): 0 [usable: 0], UnregisterBroker(64): 0 [usable: 0], DescribeTransactions(65): 0 [usable: 0], ListTransactions(66): 0 [usable: 0], AllocateProducerIds(67): UNSUPPORTED)."}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.806","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending JOIN_GROUP request with header RequestHeader(apiKey=JOIN_GROUP, apiVersion=7, clientId=consumer-plain-kafka-consumer-1, correlationId=10) and timeout 305000 to node 2147483646: JoinGroupRequestData(groupId='plain-kafka-consumer', sessionTimeoutMs=45000, rebalanceTimeoutMs=300000, memberId='', groupInstanceId=null, protocolType='consumer', protocols=[JoinGroupRequestProtocol(name='range', metadata=[0, 1, 0, 0, 0, 1, 0, 4, 116, 101, 115, 116, -1, -1, -1, -1, 0, 0, 0, 0]), JoinGroupRequestProtocol(name='cooperative-sticky', metadata=[0, 1, 0, 0, 0, 1, 0, 4, 116, 101, 115, 116, 0, 0, 0, 4, -1, -1, -1, -1, 0, 0, 0, 0])])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.831","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received JOIN_GROUP response from node 2147483646 for request with header RequestHeader(apiKey=JOIN_GROUP, apiVersion=7, clientId=consumer-plain-kafka-consumer-1, correlationId=10): JoinGroupResponseData(throttleTimeMs=0, errorCode=16, generationId=-1, protocolType=null, protocolName=null, leader='', memberId='', members=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.831","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator localhost:9092 (id: 2147483646 rack: null) is unavailable or invalid due to cause: error response NOT_COORDINATOR.isDisconnected: false. Rediscovery will be attempted."}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.831","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Requesting disconnect from last known coordinator localhost:9092 (id: 2147483646 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.831","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] JoinGroup failed: This is not the correct coordinator. Marking coordinator unknown. Sent generation was Generation{generationId=-1, memberId='', protocol='null'}"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.831","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.831","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Client requested disconnect from node 2147483646"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.833","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=12) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.838","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=12): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=1, host='localhost', port=9092, errorCode=0, errorMessage='')])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.838","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750159019838, latencyMs=7, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=12), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=1, host='localhost', port=9092, errorCode=0, errorMessage='')]))"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.838","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Discovered group coordinator localhost:9092 (id: 2147483646 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.838","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator localhost:9092 (id: 2147483646 rack: null) is unavailable or invalid due to cause: coordinator unavailable.isDisconnected: false. Rediscovery will be attempted."}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.839","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Requesting disconnect from last known coordinator localhost:9092 (id: 2147483646 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.939","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.939","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Client requested disconnect from node 2147483646, which is already disconnected"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.939","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=13) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.943","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=13): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=1, host='localhost', port=9092, errorCode=0, errorMessage='')])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.943","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750159019943, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=13), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=1, host='localhost', port=9092, errorCode=0, errorMessage='')]))"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.943","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Discovered group coordinator localhost:9092 (id: 2147483646 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.943","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"Resolved host localhost as 127.0.0.1"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.943","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Initiating connection to node localhost:9092 (id: 2147483646 rack: null) using address localhost/127.0.0.1"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.944","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Created socket with SO_RCVBUF = 342972, SO_SNDBUF = 146988, SO_TIMEOUT = 0 to node 2147483646"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.944","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Completed connection to node 2147483646. Fetching API versions."}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.944","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Initiating API versions fetch from node 2147483646."}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.944","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending API_VERSIONS request with header RequestHeader(apiKey=API_VERSIONS, apiVersion=3, clientId=consumer-plain-kafka-consumer-1, correlationId=14) and timeout 30000 to node 2147483646: ApiVersionsRequestData(clientSoftwareName='apache-kafka-java', clientSoftwareVersion='3.1.2')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.944","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] (Re-)joining group"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.944","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Joining group with current subscription: [test]"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.944","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending JoinGroup (JoinGroupRequestData(groupId='plain-kafka-consumer', sessionTimeoutMs=45000, rebalanceTimeoutMs=300000, memberId='', groupInstanceId=null, protocolType='consumer', protocols=[JoinGroupRequestProtocol(name='range', metadata=[0, 1, 0, 0, 0, 1, 0, 4, 116, 101, 115, 116, -1, -1, -1, -1, 0, 0, 0, 0]), JoinGroupRequestProtocol(name='cooperative-sticky', metadata=[0, 1, 0, 0, 0, 1, 0, 4, 116, 101, 115, 116, 0, 0, 0, 4, -1, -1, -1, -1, 0, 0, 0, 0])])) to coordinator localhost:9092 (id: 2147483646 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.950","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received API_VERSIONS response from node 2147483646 for request with header RequestHeader(apiKey=API_VERSIONS, apiVersion=3, clientId=consumer-plain-kafka-consumer-1, correlationId=14): ApiVersionsResponseData(errorCode=0, apiKeys=[ApiVersion(apiKey=0, minVersion=0, maxVersion=9), ApiVersion(apiKey=1, minVersion=0, maxVersion=15), ApiVersion(apiKey=2, minVersion=0, maxVersion=8), ApiVersion(apiKey=3, minVersion=0, maxVersion=12), ApiVersion(apiKey=8, minVersion=0, maxVersion=8), ApiVersion(apiKey=9, minVersion=0, maxVersion=8), ApiVersion(apiKey=10, minVersion=0, maxVersion=4), ApiVersion(apiKey=11, minVersion=0, maxVersion=9), ApiVersion(apiKey=12, minVersion=0, maxVersion=4), ApiVersion(apiKey=13, minVersion=0, maxVersion=5), ApiVersion(apiKey=14, minVersion=0, maxVersion=5), ApiVersion(apiKey=15, minVersion=0, maxVersion=5), ApiVersion(apiKey=16, minVersion=0, maxVersion=4), ApiVersion(apiKey=17, minVersion=0, maxVersion=1), ApiVersion(apiKey=18, minVersion=0, maxVersion=3), ApiVersion(apiKey=19, minVersion=0, maxVersion=7), ApiVersion(apiKey=20, minVersion=0, maxVersion=6), ApiVersion(apiKey=21, minVersion=0, maxVersion=2), ApiVersion(apiKey=22, minVersion=0, maxVersion=4), ApiVersion(apiKey=23, minVersion=0, maxVersion=4), ApiVersion(apiKey=24, minVersion=0, maxVersion=3), ApiVersion(apiKey=25, minVersion=0, maxVersion=3), ApiVersion(apiKey=26, minVersion=0, maxVersion=3), ApiVersion(apiKey=27, minVersion=0, maxVersion=1), ApiVersion(apiKey=28, minVersion=0, maxVersion=3), ApiVersion(apiKey=29, minVersion=0, maxVersion=3), ApiVersion(apiKey=30, minVersion=0, maxVersion=3), ApiVersion(apiKey=31, minVersion=0, maxVersion=3), ApiVersion(apiKey=32, minVersion=0, maxVersion=4), ApiVersion(apiKey=33, minVersion=0, maxVersion=2), ApiVersion(apiKey=34, minVersion=0, maxVersion=2), ApiVersion(apiKey=35, minVersion=0, maxVersion=4), ApiVersion(apiKey=36, minVersion=0, maxVersion=2), ApiVersion(apiKey=37, minVersion=0, maxVersion=3), ApiVersion(apiKey=42, minVersion=0, maxVersion=2), ApiVersion(apiKey=43, minVersion=0, maxVersion=2), ApiVersion(apiKey=44, minVersion=0, maxVersion=1), ApiVersion(apiKey=45, minVersion=0, maxVersion=0), ApiVersion(apiKey=46, minVersion=0, maxVersion=0), ApiVersion(apiKey=47, minVersion=0, maxVersion=0), ApiVersion(apiKey=48, minVersion=0, maxVersion=1), ApiVersion(apiKey=49, minVersion=0, maxVersion=1), ApiVersion(apiKey=50, minVersion=0, maxVersion=0), ApiVersion(apiKey=51, minVersion=0, maxVersion=0), ApiVersion(apiKey=55, minVersion=0, maxVersion=1), ApiVersion(apiKey=57, minVersion=0, maxVersion=1), ApiVersion(apiKey=60, minVersion=0, maxVersion=0), ApiVersion(apiKey=61, minVersion=0, maxVersion=0), ApiVersion(apiKey=64, minVersion=0, maxVersion=0), ApiVersion(apiKey=65, minVersion=0, maxVersion=0), ApiVersion(apiKey=66, minVersion=0, maxVersion=0)], throttleTimeMs=0, supportedFeatures=[SupportedFeatureKey(name='metadata.version', minVersion=1, maxVersion=11)], finalizedFeaturesEpoch=413, finalizedFeatures=[FinalizedFeatureKey(name='metadata.version', maxVersionLevel=11, minVersionLevel=11)])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.950","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 2147483646 has finalized features epoch: 413, finalized features: [FinalizedFeatureKey(name='metadata.version', maxVersionLevel=11, minVersionLevel=11)], supported features: [SupportedFeatureKey(name='metadata.version', minVersion=1, maxVersion=11)], API versions: (Produce(0): 0 to 9 [usable: 9], Fetch(1): 0 to 15 [usable: 13], ListOffsets(2): 0 to 8 [usable: 7], Metadata(3): 0 to 12 [usable: 12], LeaderAndIsr(4): UNSUPPORTED, StopReplica(5): UNSUPPORTED, UpdateMetadata(6): UNSUPPORTED, ControlledShutdown(7): UNSUPPORTED, OffsetCommit(8): 0 to 8 [usable: 8], OffsetFetch(9): 0 to 8 [usable: 8], FindCoordinator(10): 0 to 4 [usable: 4], JoinGroup(11): 0 to 9 [usable: 7], Heartbeat(12): 0 to 4 [usable: 4], LeaveGroup(13): 0 to 5 [usable: 4], SyncGroup(14): 0 to 5 [usable: 5], DescribeGroups(15): 0 to 5 [usable: 5], ListGroups(16): 0 to 4 [usable: 4], SaslHandshake(17): 0 to 1 [usable: 1], ApiVersions(18): 0 to 3 [usable: 3], CreateTopics(19): 0 to 7 [usable: 7], DeleteTopics(20): 0 to 6 [usable: 6], DeleteRecords(21): 0 to 2 [usable: 2], InitProducerId(22): 0 to 4 [usable: 4], OffsetForLeaderEpoch(23): 0 to 4 [usable: 4], AddPartitionsToTxn(24): 0 to 3 [usable: 3], AddOffsetsToTxn(25): 0 to 3 [usable: 3], EndTxn(26): 0 to 3 [usable: 3], WriteTxnMarkers(27): 0 to 1 [usable: 1], TxnOffsetCommit(28): 0 to 3 [usable: 3], DescribeAcls(29): 0 to 3 [usable: 2], CreateAcls(30): 0 to 3 [usable: 2], DeleteAcls(31): 0 to 3 [usable: 2], DescribeConfigs(32): 0 to 4 [usable: 4], AlterConfigs(33): 0 to 2 [usable: 2], AlterReplicaLogDirs(34): 0 to 2 [usable: 2], DescribeLogDirs(35): 0 to 4 [usable: 2], SaslAuthenticate(36): 0 to 2 [usable: 2], CreatePartitions(37): 0 to 3 [usable: 3], CreateDelegationToken(38): UNSUPPORTED, RenewDelegationToken(39): UNSUPPORTED, ExpireDelegationToken(40): UNSUPPORTED, DescribeDelegationToken(41): UNSUPPORTED, DeleteGroups(42): 0 to 2 [usable: 2], ElectLeaders(43): 0 to 2 [usable: 2], IncrementalAlterConfigs(44): 0 to 1 [usable: 1], AlterPartitionReassignments(45): 0 [usable: 0], ListPartitionReassignments(46): 0 [usable: 0], OffsetDelete(47): 0 [usable: 0], DescribeClientQuotas(48): 0 to 1 [usable: 1], AlterClientQuotas(49): 0 to 1 [usable: 1], DescribeUserScramCredentials(50): 0 [usable: 0], AlterUserScramCredentials(51): 0 [usable: 0], DescribeQuorum(55): 0 to 1 [usable: 0], AlterIsr(56): UNSUPPORTED, UpdateFeatures(57): 0 to 1 [usable: 0], DescribeCluster(60): 0 [usable: 0], DescribeProducers(61): 0 [usable: 0], UnregisterBroker(64): 0 [usable: 0], DescribeTransactions(65): 0 [usable: 0], ListTransactions(66): 0 [usable: 0], AllocateProducerIds(67): UNSUPPORTED)."}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.950","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending JOIN_GROUP request with header RequestHeader(apiKey=JOIN_GROUP, apiVersion=7, clientId=consumer-plain-kafka-consumer-1, correlationId=15) and timeout 305000 to node 2147483646: JoinGroupRequestData(groupId='plain-kafka-consumer', sessionTimeoutMs=45000, rebalanceTimeoutMs=300000, memberId='', groupInstanceId=null, protocolType='consumer', protocols=[JoinGroupRequestProtocol(name='range', metadata=[0, 1, 0, 0, 0, 1, 0, 4, 116, 101, 115, 116, -1, -1, -1, -1, 0, 0, 0, 0]), JoinGroupRequestProtocol(name='cooperative-sticky', metadata=[0, 1, 0, 0, 0, 1, 0, 4, 116, 101, 115, 116, 0, 0, 0, 4, -1, -1, -1, -1, 0, 0, 0, 0])])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.953","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received JOIN_GROUP response from node 2147483646 for request with header RequestHeader(apiKey=JOIN_GROUP, apiVersion=7, clientId=consumer-plain-kafka-consumer-1, correlationId=15): JoinGroupResponseData(throttleTimeMs=0, errorCode=16, generationId=-1, protocolType=null, protocolName=null, leader='', memberId='', members=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.953","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator localhost:9092 (id: 2147483646 rack: null) is unavailable or invalid due to cause: error response NOT_COORDINATOR.isDisconnected: false. Rediscovery will be attempted."}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.953","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Requesting disconnect from last known coordinator localhost:9092 (id: 2147483646 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.953","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] JoinGroup failed: This is not the correct coordinator. Marking coordinator unknown. Sent generation was Generation{generationId=-1, memberId='', protocol='null'}"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.953","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.953","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Client requested disconnect from node 2147483646"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.953","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=16) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.957","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=16): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=1, host='localhost', port=9092, errorCode=0, errorMessage='')])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.957","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750159019956, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=16), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=1, host='localhost', port=9092, errorCode=0, errorMessage='')]))"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.957","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Discovered group coordinator localhost:9092 (id: 2147483646 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.957","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator localhost:9092 (id: 2147483646 rack: null) is unavailable or invalid due to cause: coordinator unavailable.isDisconnected: false. Rediscovery will be attempted."}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:46:59.957","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Requesting disconnect from last known coordinator localhost:9092 (id: 2147483646 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.062","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.062","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Client requested disconnect from node 2147483646, which is already disconnected"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.062","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=17) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.066","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=17): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=1, host='localhost', port=9092, errorCode=0, errorMessage='')])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.066","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750159020066, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=17), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=1, host='localhost', port=9092, errorCode=0, errorMessage='')]))"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.066","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Discovered group coordinator localhost:9092 (id: 2147483646 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.066","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"Resolved host localhost as 127.0.0.1"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.066","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Initiating connection to node localhost:9092 (id: 2147483646 rack: null) using address localhost/127.0.0.1"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.067","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Created socket with SO_RCVBUF = 342972, SO_SNDBUF = 146988, SO_TIMEOUT = 0 to node 2147483646"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.067","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Completed connection to node 2147483646. Fetching API versions."}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.067","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Initiating API versions fetch from node 2147483646."}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.067","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending API_VERSIONS request with header RequestHeader(apiKey=API_VERSIONS, apiVersion=3, clientId=consumer-plain-kafka-consumer-1, correlationId=18) and timeout 30000 to node 2147483646: ApiVersionsRequestData(clientSoftwareName='apache-kafka-java', clientSoftwareVersion='3.1.2')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.067","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] (Re-)joining group"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.067","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Joining group with current subscription: [test]"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.067","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending JoinGroup (JoinGroupRequestData(groupId='plain-kafka-consumer', sessionTimeoutMs=45000, rebalanceTimeoutMs=300000, memberId='', groupInstanceId=null, protocolType='consumer', protocols=[JoinGroupRequestProtocol(name='range', metadata=[0, 1, 0, 0, 0, 1, 0, 4, 116, 101, 115, 116, -1, -1, -1, -1, 0, 0, 0, 0]), JoinGroupRequestProtocol(name='cooperative-sticky', metadata=[0, 1, 0, 0, 0, 1, 0, 4, 116, 101, 115, 116, 0, 0, 0, 4, -1, -1, -1, -1, 0, 0, 0, 0])])) to coordinator localhost:9092 (id: 2147483646 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.077","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received API_VERSIONS response from node 2147483646 for request with header RequestHeader(apiKey=API_VERSIONS, apiVersion=3, clientId=consumer-plain-kafka-consumer-1, correlationId=18): ApiVersionsResponseData(errorCode=0, apiKeys=[ApiVersion(apiKey=0, minVersion=0, maxVersion=9), ApiVersion(apiKey=1, minVersion=0, maxVersion=15), ApiVersion(apiKey=2, minVersion=0, maxVersion=8), ApiVersion(apiKey=3, minVersion=0, maxVersion=12), ApiVersion(apiKey=8, minVersion=0, maxVersion=8), ApiVersion(apiKey=9, minVersion=0, maxVersion=8), ApiVersion(apiKey=10, minVersion=0, maxVersion=4), ApiVersion(apiKey=11, minVersion=0, maxVersion=9), ApiVersion(apiKey=12, minVersion=0, maxVersion=4), ApiVersion(apiKey=13, minVersion=0, maxVersion=5), ApiVersion(apiKey=14, minVersion=0, maxVersion=5), ApiVersion(apiKey=15, minVersion=0, maxVersion=5), ApiVersion(apiKey=16, minVersion=0, maxVersion=4), ApiVersion(apiKey=17, minVersion=0, maxVersion=1), ApiVersion(apiKey=18, minVersion=0, maxVersion=3), ApiVersion(apiKey=19, minVersion=0, maxVersion=7), ApiVersion(apiKey=20, minVersion=0, maxVersion=6), ApiVersion(apiKey=21, minVersion=0, maxVersion=2), ApiVersion(apiKey=22, minVersion=0, maxVersion=4), ApiVersion(apiKey=23, minVersion=0, maxVersion=4), ApiVersion(apiKey=24, minVersion=0, maxVersion=3), ApiVersion(apiKey=25, minVersion=0, maxVersion=3), ApiVersion(apiKey=26, minVersion=0, maxVersion=3), ApiVersion(apiKey=27, minVersion=0, maxVersion=1), ApiVersion(apiKey=28, minVersion=0, maxVersion=3), ApiVersion(apiKey=29, minVersion=0, maxVersion=3), ApiVersion(apiKey=30, minVersion=0, maxVersion=3), ApiVersion(apiKey=31, minVersion=0, maxVersion=3), ApiVersion(apiKey=32, minVersion=0, maxVersion=4), ApiVersion(apiKey=33, minVersion=0, maxVersion=2), ApiVersion(apiKey=34, minVersion=0, maxVersion=2), ApiVersion(apiKey=35, minVersion=0, maxVersion=4), ApiVersion(apiKey=36, minVersion=0, maxVersion=2), ApiVersion(apiKey=37, minVersion=0, maxVersion=3), ApiVersion(apiKey=42, minVersion=0, maxVersion=2), ApiVersion(apiKey=43, minVersion=0, maxVersion=2), ApiVersion(apiKey=44, minVersion=0, maxVersion=1), ApiVersion(apiKey=45, minVersion=0, maxVersion=0), ApiVersion(apiKey=46, minVersion=0, maxVersion=0), ApiVersion(apiKey=47, minVersion=0, maxVersion=0), ApiVersion(apiKey=48, minVersion=0, maxVersion=1), ApiVersion(apiKey=49, minVersion=0, maxVersion=1), ApiVersion(apiKey=50, minVersion=0, maxVersion=0), ApiVersion(apiKey=51, minVersion=0, maxVersion=0), ApiVersion(apiKey=55, minVersion=0, maxVersion=1), ApiVersion(apiKey=57, minVersion=0, maxVersion=1), ApiVersion(apiKey=60, minVersion=0, maxVersion=0), ApiVersion(apiKey=61, minVersion=0, maxVersion=0), ApiVersion(apiKey=64, minVersion=0, maxVersion=0), ApiVersion(apiKey=65, minVersion=0, maxVersion=0), ApiVersion(apiKey=66, minVersion=0, maxVersion=0)], throttleTimeMs=0, supportedFeatures=[SupportedFeatureKey(name='metadata.version', minVersion=1, maxVersion=11)], finalizedFeaturesEpoch=413, finalizedFeatures=[FinalizedFeatureKey(name='metadata.version', maxVersionLevel=11, minVersionLevel=11)])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.077","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 2147483646 has finalized features epoch: 413, finalized features: [FinalizedFeatureKey(name='metadata.version', maxVersionLevel=11, minVersionLevel=11)], supported features: [SupportedFeatureKey(name='metadata.version', minVersion=1, maxVersion=11)], API versions: (Produce(0): 0 to 9 [usable: 9], Fetch(1): 0 to 15 [usable: 13], ListOffsets(2): 0 to 8 [usable: 7], Metadata(3): 0 to 12 [usable: 12], LeaderAndIsr(4): UNSUPPORTED, StopReplica(5): UNSUPPORTED, UpdateMetadata(6): UNSUPPORTED, ControlledShutdown(7): UNSUPPORTED, OffsetCommit(8): 0 to 8 [usable: 8], OffsetFetch(9): 0 to 8 [usable: 8], FindCoordinator(10): 0 to 4 [usable: 4], JoinGroup(11): 0 to 9 [usable: 7], Heartbeat(12): 0 to 4 [usable: 4], LeaveGroup(13): 0 to 5 [usable: 4], SyncGroup(14): 0 to 5 [usable: 5], DescribeGroups(15): 0 to 5 [usable: 5], ListGroups(16): 0 to 4 [usable: 4], SaslHandshake(17): 0 to 1 [usable: 1], ApiVersions(18): 0 to 3 [usable: 3], CreateTopics(19): 0 to 7 [usable: 7], DeleteTopics(20): 0 to 6 [usable: 6], DeleteRecords(21): 0 to 2 [usable: 2], InitProducerId(22): 0 to 4 [usable: 4], OffsetForLeaderEpoch(23): 0 to 4 [usable: 4], AddPartitionsToTxn(24): 0 to 3 [usable: 3], AddOffsetsToTxn(25): 0 to 3 [usable: 3], EndTxn(26): 0 to 3 [usable: 3], WriteTxnMarkers(27): 0 to 1 [usable: 1], TxnOffsetCommit(28): 0 to 3 [usable: 3], DescribeAcls(29): 0 to 3 [usable: 2], CreateAcls(30): 0 to 3 [usable: 2], DeleteAcls(31): 0 to 3 [usable: 2], DescribeConfigs(32): 0 to 4 [usable: 4], AlterConfigs(33): 0 to 2 [usable: 2], AlterReplicaLogDirs(34): 0 to 2 [usable: 2], DescribeLogDirs(35): 0 to 4 [usable: 2], SaslAuthenticate(36): 0 to 2 [usable: 2], CreatePartitions(37): 0 to 3 [usable: 3], CreateDelegationToken(38): UNSUPPORTED, RenewDelegationToken(39): UNSUPPORTED, ExpireDelegationToken(40): UNSUPPORTED, DescribeDelegationToken(41): UNSUPPORTED, DeleteGroups(42): 0 to 2 [usable: 2], ElectLeaders(43): 0 to 2 [usable: 2], IncrementalAlterConfigs(44): 0 to 1 [usable: 1], AlterPartitionReassignments(45): 0 [usable: 0], ListPartitionReassignments(46): 0 [usable: 0], OffsetDelete(47): 0 [usable: 0], DescribeClientQuotas(48): 0 to 1 [usable: 1], AlterClientQuotas(49): 0 to 1 [usable: 1], DescribeUserScramCredentials(50): 0 [usable: 0], AlterUserScramCredentials(51): 0 [usable: 0], DescribeQuorum(55): 0 to 1 [usable: 0], AlterIsr(56): UNSUPPORTED, UpdateFeatures(57): 0 to 1 [usable: 0], DescribeCluster(60): 0 [usable: 0], DescribeProducers(61): 0 [usable: 0], UnregisterBroker(64): 0 [usable: 0], DescribeTransactions(65): 0 [usable: 0], ListTransactions(66): 0 [usable: 0], AllocateProducerIds(67): UNSUPPORTED)."}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.078","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending JOIN_GROUP request with header RequestHeader(apiKey=JOIN_GROUP, apiVersion=7, clientId=consumer-plain-kafka-consumer-1, correlationId=19) and timeout 305000 to node 2147483646: JoinGroupRequestData(groupId='plain-kafka-consumer', sessionTimeoutMs=45000, rebalanceTimeoutMs=300000, memberId='', groupInstanceId=null, protocolType='consumer', protocols=[JoinGroupRequestProtocol(name='range', metadata=[0, 1, 0, 0, 0, 1, 0, 4, 116, 101, 115, 116, -1, -1, -1, -1, 0, 0, 0, 0]), JoinGroupRequestProtocol(name='cooperative-sticky', metadata=[0, 1, 0, 0, 0, 1, 0, 4, 116, 101, 115, 116, 0, 0, 0, 4, -1, -1, -1, -1, 0, 0, 0, 0])])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.081","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received JOIN_GROUP response from node 2147483646 for request with header RequestHeader(apiKey=JOIN_GROUP, apiVersion=7, clientId=consumer-plain-kafka-consumer-1, correlationId=19): JoinGroupResponseData(throttleTimeMs=0, errorCode=16, generationId=-1, protocolType=null, protocolName=null, leader='', memberId='', members=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.081","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator localhost:9092 (id: 2147483646 rack: null) is unavailable or invalid due to cause: error response NOT_COORDINATOR.isDisconnected: false. Rediscovery will be attempted."}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.081","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Requesting disconnect from last known coordinator localhost:9092 (id: 2147483646 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.081","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] JoinGroup failed: This is not the correct coordinator. Marking coordinator unknown. Sent generation was Generation{generationId=-1, memberId='', protocol='null'}"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.082","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.082","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Client requested disconnect from node 2147483646"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.082","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=20) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.086","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=20): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=1, host='localhost', port=9092, errorCode=0, errorMessage='')])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.086","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750159020086, latencyMs=4, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=20), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=1, host='localhost', port=9092, errorCode=0, errorMessage='')]))"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.086","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Discovered group coordinator localhost:9092 (id: 2147483646 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.086","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator localhost:9092 (id: 2147483646 rack: null) is unavailable or invalid due to cause: coordinator unavailable.isDisconnected: false. Rediscovery will be attempted."}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.086","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Requesting disconnect from last known coordinator localhost:9092 (id: 2147483646 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.188","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.188","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Client requested disconnect from node 2147483646, which is already disconnected"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.188","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=21) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.193","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=21): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=1, host='localhost', port=9092, errorCode=0, errorMessage='')])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.193","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750159020193, latencyMs=5, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=21), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=1, host='localhost', port=9092, errorCode=0, errorMessage='')]))"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.193","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Discovered group coordinator localhost:9092 (id: 2147483646 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.193","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"Resolved host localhost as 127.0.0.1"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.193","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Initiating connection to node localhost:9092 (id: 2147483646 rack: null) using address localhost/127.0.0.1"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.194","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] (Re-)joining group"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.194","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Joining group with current subscription: [test]"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.194","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending JoinGroup (JoinGroupRequestData(groupId='plain-kafka-consumer', sessionTimeoutMs=45000, rebalanceTimeoutMs=300000, memberId='', groupInstanceId=null, protocolType='consumer', protocols=[JoinGroupRequestProtocol(name='range', metadata=[0, 1, 0, 0, 0, 1, 0, 4, 116, 101, 115, 116, -1, -1, -1, -1, 0, 0, 0, 0]), JoinGroupRequestProtocol(name='cooperative-sticky', metadata=[0, 1, 0, 0, 0, 1, 0, 4, 116, 101, 115, 116, 0, 0, 0, 4, -1, -1, -1, -1, 0, 0, 0, 0])])) to coordinator localhost:9092 (id: 2147483646 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.194","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Created socket with SO_RCVBUF = 342972, SO_SNDBUF = 146988, SO_TIMEOUT = 0 to node 2147483646"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.194","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Completed connection to node 2147483646. Fetching API versions."}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.194","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Initiating API versions fetch from node 2147483646."}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.194","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending API_VERSIONS request with header RequestHeader(apiKey=API_VERSIONS, apiVersion=3, clientId=consumer-plain-kafka-consumer-1, correlationId=23) and timeout 30000 to node 2147483646: ApiVersionsRequestData(clientSoftwareName='apache-kafka-java', clientSoftwareVersion='3.1.2')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.200","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received API_VERSIONS response from node 2147483646 for request with header RequestHeader(apiKey=API_VERSIONS, apiVersion=3, clientId=consumer-plain-kafka-consumer-1, correlationId=23): ApiVersionsResponseData(errorCode=0, apiKeys=[ApiVersion(apiKey=0, minVersion=0, maxVersion=9), ApiVersion(apiKey=1, minVersion=0, maxVersion=15), ApiVersion(apiKey=2, minVersion=0, maxVersion=8), ApiVersion(apiKey=3, minVersion=0, maxVersion=12), ApiVersion(apiKey=8, minVersion=0, maxVersion=8), ApiVersion(apiKey=9, minVersion=0, maxVersion=8), ApiVersion(apiKey=10, minVersion=0, maxVersion=4), ApiVersion(apiKey=11, minVersion=0, maxVersion=9), ApiVersion(apiKey=12, minVersion=0, maxVersion=4), ApiVersion(apiKey=13, minVersion=0, maxVersion=5), ApiVersion(apiKey=14, minVersion=0, maxVersion=5), ApiVersion(apiKey=15, minVersion=0, maxVersion=5), ApiVersion(apiKey=16, minVersion=0, maxVersion=4), ApiVersion(apiKey=17, minVersion=0, maxVersion=1), ApiVersion(apiKey=18, minVersion=0, maxVersion=3), ApiVersion(apiKey=19, minVersion=0, maxVersion=7), ApiVersion(apiKey=20, minVersion=0, maxVersion=6), ApiVersion(apiKey=21, minVersion=0, maxVersion=2), ApiVersion(apiKey=22, minVersion=0, maxVersion=4), ApiVersion(apiKey=23, minVersion=0, maxVersion=4), ApiVersion(apiKey=24, minVersion=0, maxVersion=3), ApiVersion(apiKey=25, minVersion=0, maxVersion=3), ApiVersion(apiKey=26, minVersion=0, maxVersion=3), ApiVersion(apiKey=27, minVersion=0, maxVersion=1), ApiVersion(apiKey=28, minVersion=0, maxVersion=3), ApiVersion(apiKey=29, minVersion=0, maxVersion=3), ApiVersion(apiKey=30, minVersion=0, maxVersion=3), ApiVersion(apiKey=31, minVersion=0, maxVersion=3), ApiVersion(apiKey=32, minVersion=0, maxVersion=4), ApiVersion(apiKey=33, minVersion=0, maxVersion=2), ApiVersion(apiKey=34, minVersion=0, maxVersion=2), ApiVersion(apiKey=35, minVersion=0, maxVersion=4), ApiVersion(apiKey=36, minVersion=0, maxVersion=2), ApiVersion(apiKey=37, minVersion=0, maxVersion=3), ApiVersion(apiKey=42, minVersion=0, maxVersion=2), ApiVersion(apiKey=43, minVersion=0, maxVersion=2), ApiVersion(apiKey=44, minVersion=0, maxVersion=1), ApiVersion(apiKey=45, minVersion=0, maxVersion=0), ApiVersion(apiKey=46, minVersion=0, maxVersion=0), ApiVersion(apiKey=47, minVersion=0, maxVersion=0), ApiVersion(apiKey=48, minVersion=0, maxVersion=1), ApiVersion(apiKey=49, minVersion=0, maxVersion=1), ApiVersion(apiKey=50, minVersion=0, maxVersion=0), ApiVersion(apiKey=51, minVersion=0, maxVersion=0), ApiVersion(apiKey=55, minVersion=0, maxVersion=1), ApiVersion(apiKey=57, minVersion=0, maxVersion=1), ApiVersion(apiKey=60, minVersion=0, maxVersion=0), ApiVersion(apiKey=61, minVersion=0, maxVersion=0), ApiVersion(apiKey=64, minVersion=0, maxVersion=0), ApiVersion(apiKey=65, minVersion=0, maxVersion=0), ApiVersion(apiKey=66, minVersion=0, maxVersion=0)], throttleTimeMs=0, supportedFeatures=[SupportedFeatureKey(name='metadata.version', minVersion=1, maxVersion=11)], finalizedFeaturesEpoch=413, finalizedFeatures=[FinalizedFeatureKey(name='metadata.version', maxVersionLevel=11, minVersionLevel=11)])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.200","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 2147483646 has finalized features epoch: 413, finalized features: [FinalizedFeatureKey(name='metadata.version', maxVersionLevel=11, minVersionLevel=11)], supported features: [SupportedFeatureKey(name='metadata.version', minVersion=1, maxVersion=11)], API versions: (Produce(0): 0 to 9 [usable: 9], Fetch(1): 0 to 15 [usable: 13], ListOffsets(2): 0 to 8 [usable: 7], Metadata(3): 0 to 12 [usable: 12], LeaderAndIsr(4): UNSUPPORTED, StopReplica(5): UNSUPPORTED, UpdateMetadata(6): UNSUPPORTED, ControlledShutdown(7): UNSUPPORTED, OffsetCommit(8): 0 to 8 [usable: 8], OffsetFetch(9): 0 to 8 [usable: 8], FindCoordinator(10): 0 to 4 [usable: 4], JoinGroup(11): 0 to 9 [usable: 7], Heartbeat(12): 0 to 4 [usable: 4], LeaveGroup(13): 0 to 5 [usable: 4], SyncGroup(14): 0 to 5 [usable: 5], DescribeGroups(15): 0 to 5 [usable: 5], ListGroups(16): 0 to 4 [usable: 4], SaslHandshake(17): 0 to 1 [usable: 1], ApiVersions(18): 0 to 3 [usable: 3], CreateTopics(19): 0 to 7 [usable: 7], DeleteTopics(20): 0 to 6 [usable: 6], DeleteRecords(21): 0 to 2 [usable: 2], InitProducerId(22): 0 to 4 [usable: 4], OffsetForLeaderEpoch(23): 0 to 4 [usable: 4], AddPartitionsToTxn(24): 0 to 3 [usable: 3], AddOffsetsToTxn(25): 0 to 3 [usable: 3], EndTxn(26): 0 to 3 [usable: 3], WriteTxnMarkers(27): 0 to 1 [usable: 1], TxnOffsetCommit(28): 0 to 3 [usable: 3], DescribeAcls(29): 0 to 3 [usable: 2], CreateAcls(30): 0 to 3 [usable: 2], DeleteAcls(31): 0 to 3 [usable: 2], DescribeConfigs(32): 0 to 4 [usable: 4], AlterConfigs(33): 0 to 2 [usable: 2], AlterReplicaLogDirs(34): 0 to 2 [usable: 2], DescribeLogDirs(35): 0 to 4 [usable: 2], SaslAuthenticate(36): 0 to 2 [usable: 2], CreatePartitions(37): 0 to 3 [usable: 3], CreateDelegationToken(38): UNSUPPORTED, RenewDelegationToken(39): UNSUPPORTED, ExpireDelegationToken(40): UNSUPPORTED, DescribeDelegationToken(41): UNSUPPORTED, DeleteGroups(42): 0 to 2 [usable: 2], ElectLeaders(43): 0 to 2 [usable: 2], IncrementalAlterConfigs(44): 0 to 1 [usable: 1], AlterPartitionReassignments(45): 0 [usable: 0], ListPartitionReassignments(46): 0 [usable: 0], OffsetDelete(47): 0 [usable: 0], DescribeClientQuotas(48): 0 to 1 [usable: 1], AlterClientQuotas(49): 0 to 1 [usable: 1], DescribeUserScramCredentials(50): 0 [usable: 0], AlterUserScramCredentials(51): 0 [usable: 0], DescribeQuorum(55): 0 to 1 [usable: 0], AlterIsr(56): UNSUPPORTED, UpdateFeatures(57): 0 to 1 [usable: 0], DescribeCluster(60): 0 [usable: 0], DescribeProducers(61): 0 [usable: 0], UnregisterBroker(64): 0 [usable: 0], DescribeTransactions(65): 0 [usable: 0], ListTransactions(66): 0 [usable: 0], AllocateProducerIds(67): UNSUPPORTED)."}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.201","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending JOIN_GROUP request with header RequestHeader(apiKey=JOIN_GROUP, apiVersion=7, clientId=consumer-plain-kafka-consumer-1, correlationId=22) and timeout 305000 to node 2147483646: JoinGroupRequestData(groupId='plain-kafka-consumer', sessionTimeoutMs=45000, rebalanceTimeoutMs=300000, memberId='', groupInstanceId=null, protocolType='consumer', protocols=[JoinGroupRequestProtocol(name='range', metadata=[0, 1, 0, 0, 0, 1, 0, 4, 116, 101, 115, 116, -1, -1, -1, -1, 0, 0, 0, 0]), JoinGroupRequestProtocol(name='cooperative-sticky', metadata=[0, 1, 0, 0, 0, 1, 0, 4, 116, 101, 115, 116, 0, 0, 0, 4, -1, -1, -1, -1, 0, 0, 0, 0])])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.207","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received JOIN_GROUP response from node 2147483646 for request with header RequestHeader(apiKey=JOIN_GROUP, apiVersion=7, clientId=consumer-plain-kafka-consumer-1, correlationId=22): JoinGroupResponseData(throttleTimeMs=0, errorCode=16, generationId=-1, protocolType=null, protocolName=null, leader='', memberId='', members=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.207","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator localhost:9092 (id: 2147483646 rack: null) is unavailable or invalid due to cause: error response NOT_COORDINATOR.isDisconnected: false. Rediscovery will be attempted."}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.207","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Requesting disconnect from last known coordinator localhost:9092 (id: 2147483646 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.207","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] JoinGroup failed: This is not the correct coordinator. Marking coordinator unknown. Sent generation was Generation{generationId=-1, memberId='', protocol='null'}"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.207","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.207","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Client requested disconnect from node 2147483646"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.207","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=24) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.210","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=24): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=1, host='localhost', port=9092, errorCode=0, errorMessage='')])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.210","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750159020210, latencyMs=3, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=24), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=1, host='localhost', port=9092, errorCode=0, errorMessage='')]))"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.210","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Discovered group coordinator localhost:9092 (id: 2147483646 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.211","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Group coordinator localhost:9092 (id: 2147483646 rack: null) is unavailable or invalid due to cause: coordinator unavailable.isDisconnected: false. Rediscovery will be attempted."}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.211","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Requesting disconnect from last known coordinator localhost:9092 (id: 2147483646 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.315","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FindCoordinator request to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.315","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Client requested disconnect from node 2147483646, which is already disconnected"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.315","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FIND_COORDINATOR request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=25) and timeout 30000 to node 1: FindCoordinatorRequestData(key='', keyType=0, coordinatorKeys=[plain-kafka-consumer])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.322","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FIND_COORDINATOR response from node 1 for request with header RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=25): FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=1, host='localhost', port=9092, errorCode=0, errorMessage='')])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.323","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FindCoordinator response ClientResponse(receivedTimeMs=1750159020322, latencyMs=7, disconnected=false, requestHeader=RequestHeader(apiKey=FIND_COORDINATOR, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=25), responseBody=FindCoordinatorResponseData(throttleTimeMs=0, errorCode=0, errorMessage='', nodeId=0, host='', port=0, coordinators=[Coordinator(key='plain-kafka-consumer', nodeId=1, host='localhost', port=9092, errorCode=0, errorMessage='')]))"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.323","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Discovered group coordinator localhost:9092 (id: 2147483646 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.323","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"Resolved host localhost as 127.0.0.1"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.323","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Initiating connection to node localhost:9092 (id: 2147483646 rack: null) using address localhost/127.0.0.1"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.323","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Created socket with SO_RCVBUF = 342972, SO_SNDBUF = 146988, SO_TIMEOUT = 0 to node 2147483646"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.323","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Completed connection to node 2147483646. Fetching API versions."}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.323","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Initiating API versions fetch from node 2147483646."}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.323","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending API_VERSIONS request with header RequestHeader(apiKey=API_VERSIONS, apiVersion=3, clientId=consumer-plain-kafka-consumer-1, correlationId=26) and timeout 30000 to node 2147483646: ApiVersionsRequestData(clientSoftwareName='apache-kafka-java', clientSoftwareVersion='3.1.2')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.323","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] (Re-)joining group"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.323","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Joining group with current subscription: [test]"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.324","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending JoinGroup (JoinGroupRequestData(groupId='plain-kafka-consumer', sessionTimeoutMs=45000, rebalanceTimeoutMs=300000, memberId='', groupInstanceId=null, protocolType='consumer', protocols=[JoinGroupRequestProtocol(name='range', metadata=[0, 1, 0, 0, 0, 1, 0, 4, 116, 101, 115, 116, -1, -1, -1, -1, 0, 0, 0, 0]), JoinGroupRequestProtocol(name='cooperative-sticky', metadata=[0, 1, 0, 0, 0, 1, 0, 4, 116, 101, 115, 116, 0, 0, 0, 4, -1, -1, -1, -1, 0, 0, 0, 0])])) to coordinator localhost:9092 (id: 2147483646 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.327","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received API_VERSIONS response from node 2147483646 for request with header RequestHeader(apiKey=API_VERSIONS, apiVersion=3, clientId=consumer-plain-kafka-consumer-1, correlationId=26): ApiVersionsResponseData(errorCode=0, apiKeys=[ApiVersion(apiKey=0, minVersion=0, maxVersion=9), ApiVersion(apiKey=1, minVersion=0, maxVersion=15), ApiVersion(apiKey=2, minVersion=0, maxVersion=8), ApiVersion(apiKey=3, minVersion=0, maxVersion=12), ApiVersion(apiKey=8, minVersion=0, maxVersion=8), ApiVersion(apiKey=9, minVersion=0, maxVersion=8), ApiVersion(apiKey=10, minVersion=0, maxVersion=4), ApiVersion(apiKey=11, minVersion=0, maxVersion=9), ApiVersion(apiKey=12, minVersion=0, maxVersion=4), ApiVersion(apiKey=13, minVersion=0, maxVersion=5), ApiVersion(apiKey=14, minVersion=0, maxVersion=5), ApiVersion(apiKey=15, minVersion=0, maxVersion=5), ApiVersion(apiKey=16, minVersion=0, maxVersion=4), ApiVersion(apiKey=17, minVersion=0, maxVersion=1), ApiVersion(apiKey=18, minVersion=0, maxVersion=3), ApiVersion(apiKey=19, minVersion=0, maxVersion=7), ApiVersion(apiKey=20, minVersion=0, maxVersion=6), ApiVersion(apiKey=21, minVersion=0, maxVersion=2), ApiVersion(apiKey=22, minVersion=0, maxVersion=4), ApiVersion(apiKey=23, minVersion=0, maxVersion=4), ApiVersion(apiKey=24, minVersion=0, maxVersion=3), ApiVersion(apiKey=25, minVersion=0, maxVersion=3), ApiVersion(apiKey=26, minVersion=0, maxVersion=3), ApiVersion(apiKey=27, minVersion=0, maxVersion=1), ApiVersion(apiKey=28, minVersion=0, maxVersion=3), ApiVersion(apiKey=29, minVersion=0, maxVersion=3), ApiVersion(apiKey=30, minVersion=0, maxVersion=3), ApiVersion(apiKey=31, minVersion=0, maxVersion=3), ApiVersion(apiKey=32, minVersion=0, maxVersion=4), ApiVersion(apiKey=33, minVersion=0, maxVersion=2), ApiVersion(apiKey=34, minVersion=0, maxVersion=2), ApiVersion(apiKey=35, minVersion=0, maxVersion=4), ApiVersion(apiKey=36, minVersion=0, maxVersion=2), ApiVersion(apiKey=37, minVersion=0, maxVersion=3), ApiVersion(apiKey=42, minVersion=0, maxVersion=2), ApiVersion(apiKey=43, minVersion=0, maxVersion=2), ApiVersion(apiKey=44, minVersion=0, maxVersion=1), ApiVersion(apiKey=45, minVersion=0, maxVersion=0), ApiVersion(apiKey=46, minVersion=0, maxVersion=0), ApiVersion(apiKey=47, minVersion=0, maxVersion=0), ApiVersion(apiKey=48, minVersion=0, maxVersion=1), ApiVersion(apiKey=49, minVersion=0, maxVersion=1), ApiVersion(apiKey=50, minVersion=0, maxVersion=0), ApiVersion(apiKey=51, minVersion=0, maxVersion=0), ApiVersion(apiKey=55, minVersion=0, maxVersion=1), ApiVersion(apiKey=57, minVersion=0, maxVersion=1), ApiVersion(apiKey=60, minVersion=0, maxVersion=0), ApiVersion(apiKey=61, minVersion=0, maxVersion=0), ApiVersion(apiKey=64, minVersion=0, maxVersion=0), ApiVersion(apiKey=65, minVersion=0, maxVersion=0), ApiVersion(apiKey=66, minVersion=0, maxVersion=0)], throttleTimeMs=0, supportedFeatures=[SupportedFeatureKey(name='metadata.version', minVersion=1, maxVersion=11)], finalizedFeaturesEpoch=414, finalizedFeatures=[FinalizedFeatureKey(name='metadata.version', maxVersionLevel=11, minVersionLevel=11)])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.327","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 2147483646 has finalized features epoch: 414, finalized features: [FinalizedFeatureKey(name='metadata.version', maxVersionLevel=11, minVersionLevel=11)], supported features: [SupportedFeatureKey(name='metadata.version', minVersion=1, maxVersion=11)], API versions: (Produce(0): 0 to 9 [usable: 9], Fetch(1): 0 to 15 [usable: 13], ListOffsets(2): 0 to 8 [usable: 7], Metadata(3): 0 to 12 [usable: 12], LeaderAndIsr(4): UNSUPPORTED, StopReplica(5): UNSUPPORTED, UpdateMetadata(6): UNSUPPORTED, ControlledShutdown(7): UNSUPPORTED, OffsetCommit(8): 0 to 8 [usable: 8], OffsetFetch(9): 0 to 8 [usable: 8], FindCoordinator(10): 0 to 4 [usable: 4], JoinGroup(11): 0 to 9 [usable: 7], Heartbeat(12): 0 to 4 [usable: 4], LeaveGroup(13): 0 to 5 [usable: 4], SyncGroup(14): 0 to 5 [usable: 5], DescribeGroups(15): 0 to 5 [usable: 5], ListGroups(16): 0 to 4 [usable: 4], SaslHandshake(17): 0 to 1 [usable: 1], ApiVersions(18): 0 to 3 [usable: 3], CreateTopics(19): 0 to 7 [usable: 7], DeleteTopics(20): 0 to 6 [usable: 6], DeleteRecords(21): 0 to 2 [usable: 2], InitProducerId(22): 0 to 4 [usable: 4], OffsetForLeaderEpoch(23): 0 to 4 [usable: 4], AddPartitionsToTxn(24): 0 to 3 [usable: 3], AddOffsetsToTxn(25): 0 to 3 [usable: 3], EndTxn(26): 0 to 3 [usable: 3], WriteTxnMarkers(27): 0 to 1 [usable: 1], TxnOffsetCommit(28): 0 to 3 [usable: 3], DescribeAcls(29): 0 to 3 [usable: 2], CreateAcls(30): 0 to 3 [usable: 2], DeleteAcls(31): 0 to 3 [usable: 2], DescribeConfigs(32): 0 to 4 [usable: 4], AlterConfigs(33): 0 to 2 [usable: 2], AlterReplicaLogDirs(34): 0 to 2 [usable: 2], DescribeLogDirs(35): 0 to 4 [usable: 2], SaslAuthenticate(36): 0 to 2 [usable: 2], CreatePartitions(37): 0 to 3 [usable: 3], CreateDelegationToken(38): UNSUPPORTED, RenewDelegationToken(39): UNSUPPORTED, ExpireDelegationToken(40): UNSUPPORTED, DescribeDelegationToken(41): UNSUPPORTED, DeleteGroups(42): 0 to 2 [usable: 2], ElectLeaders(43): 0 to 2 [usable: 2], IncrementalAlterConfigs(44): 0 to 1 [usable: 1], AlterPartitionReassignments(45): 0 [usable: 0], ListPartitionReassignments(46): 0 [usable: 0], OffsetDelete(47): 0 [usable: 0], DescribeClientQuotas(48): 0 to 1 [usable: 1], AlterClientQuotas(49): 0 to 1 [usable: 1], DescribeUserScramCredentials(50): 0 [usable: 0], AlterUserScramCredentials(51): 0 [usable: 0], DescribeQuorum(55): 0 to 1 [usable: 0], AlterIsr(56): UNSUPPORTED, UpdateFeatures(57): 0 to 1 [usable: 0], DescribeCluster(60): 0 [usable: 0], DescribeProducers(61): 0 [usable: 0], UnregisterBroker(64): 0 [usable: 0], DescribeTransactions(65): 0 [usable: 0], ListTransactions(66): 0 [usable: 0], AllocateProducerIds(67): UNSUPPORTED)."}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.327","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending JOIN_GROUP request with header RequestHeader(apiKey=JOIN_GROUP, apiVersion=7, clientId=consumer-plain-kafka-consumer-1, correlationId=27) and timeout 305000 to node 2147483646: JoinGroupRequestData(groupId='plain-kafka-consumer', sessionTimeoutMs=45000, rebalanceTimeoutMs=300000, memberId='', groupInstanceId=null, protocolType='consumer', protocols=[JoinGroupRequestProtocol(name='range', metadata=[0, 1, 0, 0, 0, 1, 0, 4, 116, 101, 115, 116, -1, -1, -1, -1, 0, 0, 0, 0]), JoinGroupRequestProtocol(name='cooperative-sticky', metadata=[0, 1, 0, 0, 0, 1, 0, 4, 116, 101, 115, 116, 0, 0, 0, 4, -1, -1, -1, -1, 0, 0, 0, 0])])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.342","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received JOIN_GROUP response from node 2147483646 for request with header RequestHeader(apiKey=JOIN_GROUP, apiVersion=7, clientId=consumer-plain-kafka-consumer-1, correlationId=27): JoinGroupResponseData(throttleTimeMs=0, errorCode=79, generationId=-1, protocolType=null, protocolName=null, leader='', memberId='consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a', members=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.342","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] JoinGroup failed due to non-fatal error: MEMBER_ID_REQUIRED Will set the member id as consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a and then rejoin. Sent generation was  Generation{generationId=-1, memberId='', protocol='null'}"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.342","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Request joining group due to: need to re-join with the given member-id"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.342","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] (Re-)joining group"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.342","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Joining group with current subscription: [test]"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.342","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending JoinGroup (JoinGroupRequestData(groupId='plain-kafka-consumer', sessionTimeoutMs=45000, rebalanceTimeoutMs=300000, memberId='consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a', groupInstanceId=null, protocolType='consumer', protocols=[JoinGroupRequestProtocol(name='range', metadata=[0, 1, 0, 0, 0, 1, 0, 4, 116, 101, 115, 116, -1, -1, -1, -1, 0, 0, 0, 0]), JoinGroupRequestProtocol(name='cooperative-sticky', metadata=[0, 1, 0, 0, 0, 1, 0, 4, 116, 101, 115, 116, 0, 0, 0, 4, -1, -1, -1, -1, 0, 0, 0, 0])])) to coordinator localhost:9092 (id: 2147483646 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.342","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending JOIN_GROUP request with header RequestHeader(apiKey=JOIN_GROUP, apiVersion=7, clientId=consumer-plain-kafka-consumer-1, correlationId=28) and timeout 305000 to node 2147483646: JoinGroupRequestData(groupId='plain-kafka-consumer', sessionTimeoutMs=45000, rebalanceTimeoutMs=300000, memberId='consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a', groupInstanceId=null, protocolType='consumer', protocols=[JoinGroupRequestProtocol(name='range', metadata=[0, 1, 0, 0, 0, 1, 0, 4, 116, 101, 115, 116, -1, -1, -1, -1, 0, 0, 0, 0]), JoinGroupRequestProtocol(name='cooperative-sticky', metadata=[0, 1, 0, 0, 0, 1, 0, 4, 116, 101, 115, 116, 0, 0, 0, 4, -1, -1, -1, -1, 0, 0, 0, 0])])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.359","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received JOIN_GROUP response from node 2147483646 for request with header RequestHeader(apiKey=JOIN_GROUP, apiVersion=7, clientId=consumer-plain-kafka-consumer-1, correlationId=28): JoinGroupResponseData(throttleTimeMs=0, errorCode=0, generationId=1, protocolType='consumer', protocolName='range', leader='consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a', memberId='consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a', members=[JoinGroupResponseMember(memberId='consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a', groupInstanceId=null, metadata=[0, 1, 0, 0, 0, 1, 0, 4, 116, 101, 115, 116, -1, -1, -1, -1, 0, 0, 0, 0])])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.360","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received successful JoinGroup response: JoinGroupResponseData(throttleTimeMs=0, errorCode=0, generationId=1, protocolType='consumer', protocolName='range', leader='consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a', memberId='consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a', members=[JoinGroupResponseMember(memberId='consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a', groupInstanceId=null, metadata=[0, 1, 0, 0, 0, 1, 0, 4, 116, 101, 115, 116, -1, -1, -1, -1, 0, 0, 0, 0])])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.360","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Enabling heartbeat thread"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.360","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Successfully joined group with generation Generation{generationId=1, memberId='consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a', protocol='range'}"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.360","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Performing assignment using strategy range with subscriptions {consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a=Subscription(topics=[test], ownedPartitions=[], groupInstanceId=null)}"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.361","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Finished assignment for group at generation 1: {consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a=Assignment(partitions=[test-0])}"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.362","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending leader SyncGroup to coordinator localhost:9092 (id: 2147483646 rack: null) at generation Generation{generationId=1, memberId='consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a', protocol='range'}: SyncGroupRequestData(groupId='plain-kafka-consumer', generationId=1, memberId='consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a', groupInstanceId=null, protocolType='consumer', protocolName='range', assignments=[SyncGroupRequestAssignment(memberId='consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a', assignment=[0, 1, 0, 0, 0, 1, 0, 4, 116, 101, 115, 116, 0, 0, 0, 1, 0, 0, 0, 0, -1, -1, -1, -1])])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.363","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending SYNC_GROUP request with header RequestHeader(apiKey=SYNC_GROUP, apiVersion=5, clientId=consumer-plain-kafka-consumer-1, correlationId=29) and timeout 30000 to node 2147483646: SyncGroupRequestData(groupId='plain-kafka-consumer', generationId=1, memberId='consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a', groupInstanceId=null, protocolType='consumer', protocolName='range', assignments=[SyncGroupRequestAssignment(memberId='consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a', assignment=[0, 1, 0, 0, 0, 1, 0, 4, 116, 101, 115, 116, 0, 0, 0, 1, 0, 0, 0, 0, -1, -1, -1, -1])])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.397","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received SYNC_GROUP response from node 2147483646 for request with header RequestHeader(apiKey=SYNC_GROUP, apiVersion=5, clientId=consumer-plain-kafka-consumer-1, correlationId=29): SyncGroupResponseData(throttleTimeMs=0, errorCode=0, protocolType='consumer', protocolName='range', assignment=[0, 1, 0, 0, 0, 1, 0, 4, 116, 101, 115, 116, 0, 0, 0, 1, 0, 0, 0, 0, -1, -1, -1, -1])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.397","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received successful SyncGroup response: SyncGroupResponseData(throttleTimeMs=0, errorCode=0, protocolType='consumer', protocolName='range', assignment=[0, 1, 0, 0, 0, 1, 0, 4, 116, 101, 115, 116, 0, 0, 0, 1, 0, 0, 0, 0, -1, -1, -1, -1])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.397","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Successfully synced group in generation Generation{generationId=1, memberId='consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a', protocol='range'}"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.397","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Executing onJoinComplete with generation 1 and memberId consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.397","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Notifying assignor about the new Assignment(partitions=[test-0])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.398","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Adding newly assigned partitions: test-0"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.398","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Fetching committed offsets for partitions: [test-0]"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.399","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending OFFSET_FETCH request with header RequestHeader(apiKey=OFFSET_FETCH, apiVersion=8, clientId=consumer-plain-kafka-consumer-1, correlationId=30) and timeout 30000 to node 2147483646: OffsetFetchRequestData(groupId='', topics=[], groups=[OffsetFetchRequestGroup(groupId='plain-kafka-consumer', topics=[OffsetFetchRequestTopics(name='test', partitionIndexes=[0])])], requireStable=true)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.412","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received OFFSET_FETCH response from node 2147483646 for request with header RequestHeader(apiKey=OFFSET_FETCH, apiVersion=8, clientId=consumer-plain-kafka-consumer-1, correlationId=30): OffsetFetchResponseData(throttleTimeMs=0, topics=[], errorCode=0, groups=[OffsetFetchResponseGroup(groupId='plain-kafka-consumer', topics=[OffsetFetchResponseTopics(name='test', partitions=[OffsetFetchResponsePartitions(partitionIndex=0, committedOffset=-1, committedLeaderEpoch=-1, metadata='', errorCode=0)])], errorCode=0)])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.412","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Found no committed offset for partition test-0"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.414","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Fetching committed offsets for partitions: [test-0]"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.414","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending OFFSET_FETCH request with header RequestHeader(apiKey=OFFSET_FETCH, apiVersion=8, clientId=consumer-plain-kafka-consumer-1, correlationId=31) and timeout 30000 to node 2147483646: OffsetFetchRequestData(groupId='', topics=[], groups=[OffsetFetchRequestGroup(groupId='plain-kafka-consumer', topics=[OffsetFetchRequestTopics(name='test', partitionIndexes=[0])])], requireStable=true)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.416","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received OFFSET_FETCH response from node 2147483646 for request with header RequestHeader(apiKey=OFFSET_FETCH, apiVersion=8, clientId=consumer-plain-kafka-consumer-1, correlationId=31): OffsetFetchResponseData(throttleTimeMs=0, topics=[], errorCode=0, groups=[OffsetFetchResponseGroup(groupId='plain-kafka-consumer', topics=[OffsetFetchResponseTopics(name='test', partitions=[OffsetFetchResponsePartitions(partitionIndex=0, committedOffset=-1, committedLeaderEpoch=-1, metadata='', errorCode=0)])], errorCode=0)])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.416","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Found no committed offset for partition test-0"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.417","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending ListOffsetRequest ListOffsetsRequestData(replicaId=-1, isolationLevel=0, topics=[ListOffsetsTopic(name='test', partitions=[ListOffsetsPartition(partitionIndex=0, currentLeaderEpoch=0, timestamp=-1, maxNumOffsets=1)])]) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.417","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending LIST_OFFSETS request with header RequestHeader(apiKey=LIST_OFFSETS, apiVersion=7, clientId=consumer-plain-kafka-consumer-1, correlationId=32) and timeout 30000 to node 1: ListOffsetsRequestData(replicaId=-1, isolationLevel=0, topics=[ListOffsetsTopic(name='test', partitions=[ListOffsetsPartition(partitionIndex=0, currentLeaderEpoch=0, timestamp=-1, maxNumOffsets=1)])])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.427","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received LIST_OFFSETS response from node 1 for request with header RequestHeader(apiKey=LIST_OFFSETS, apiVersion=7, clientId=consumer-plain-kafka-consumer-1, correlationId=32): ListOffsetsResponseData(throttleTimeMs=0, topics=[ListOffsetsTopicResponse(name='test', partitions=[ListOffsetsPartitionResponse(partitionIndex=0, errorCode=0, oldStyleOffsets=[], timestamp=-1, offset=0, leaderEpoch=0)])])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.428","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Handling ListOffsetResponse response for test-0. Fetched offset 0, timestamp -1"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.428","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Not replacing existing epoch 0 with new epoch 0 for partition test-0"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.428","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Resetting offset for partition test-0 to position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}}."}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.429","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending OFFSET_COMMIT request with header RequestHeader(apiKey=OFFSET_COMMIT, apiVersion=8, clientId=consumer-plain-kafka-consumer-1, correlationId=33) and timeout 30000 to node 2147483646: OffsetCommitRequestData(groupId='plain-kafka-consumer', generationId=1, memberId='consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a', groupInstanceId=null, retentionTimeMs=-1, topics=[OffsetCommitRequestTopic(name='test', partitions=[OffsetCommitRequestPartition(partitionIndex=0, committedOffset=0, committedLeaderEpoch=-1, commitTimestamp=-1, committedMetadata='')])])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.448","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received OFFSET_COMMIT response from node 2147483646 for request with header RequestHeader(apiKey=OFFSET_COMMIT, apiVersion=8, clientId=consumer-plain-kafka-consumer-1, correlationId=33): OffsetCommitResponseData(throttleTimeMs=0, topics=[OffsetCommitResponseTopic(name='test', partitions=[OffsetCommitResponsePartition(partitionIndex=0, errorCode=0)])])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.448","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Committed offset 0 for partition test-0"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.449","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"plain-kafka-consumer: partitions assigned: [test-0]"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.450","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.450","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built full fetch (sessionId=INVALID, epoch=INITIAL) for node 1 with 1 partition(s)."}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.451","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED FullFetchRequest(toSend=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:00.451","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=34) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=0, sessionEpoch=0, topics=[FetchTopic(topic='test', topicId=59Vll4XiSKq-TCCuoK4aJw, partitions=[FetchPartition(partition=0, currentLeaderEpoch=0, fetchOffset=0, lastFetchedEpoch=-1, logStartOffset=-1, partitionMaxBytes=1048576)])], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:01.027","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=34): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[FetchableTopicResponse(topic='', topicId=59Vll4XiSKq-TCCuoK4aJw, partitions=[PartitionData(partitionIndex=0, errorCode=0, highWatermark=0, lastStableOffset=0, logStartOffset=0, divergingEpoch=EpochEndOffset(epoch=-1, endOffset=-1), currentLeader=LeaderIdAndEpoch(leaderId=-1, leaderEpoch=-1), snapshotId=SnapshotId(endOffset=-1, epoch=-1), abortedTransactions=null, preferredReadReplica=-1, records=MemoryRecords(size=0, buffer=java.nio.HeapByteBuffer[pos=0 lim=0 cap=3]))])])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:01.028","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent a full fetch response that created a new incremental fetch session 411694213 with 1 response partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:01.029","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Fetch READ_UNCOMMITTED at offset 0 for partition test-0 returned fetch data PartitionData(partitionIndex=0, errorCode=0, highWatermark=0, lastStableOffset=0, logStartOffset=0, divergingEpoch=EpochEndOffset(epoch=-1, endOffset=-1), currentLeader=LeaderIdAndEpoch(leaderId=-1, leaderEpoch=-1), snapshotId=SnapshotId(endOffset=-1, epoch=-1), abortedTransactions=null, preferredReadReplica=-1, records=MemoryRecords(size=0, buffer=java.nio.HeapByteBuffer[pos=0 lim=0 cap=3]))"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:01.030","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:01.030","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=1) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:01.030","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:01.030","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=35) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=1, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:01.548","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=35): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:01.549","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:01.549","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:01.549","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=2) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:01.549","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:01.549","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=36) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=2, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:02.071","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=36): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:02.073","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:02.074","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:02.074","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=3) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:02.074","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:02.074","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=37) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=3, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:02.580","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=37): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:02.580","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:02.580","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:02.580","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=4) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:02.580","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:02.580","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=38) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=4, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:03.087","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=38): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:03.087","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:03.087","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:03.087","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=5) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:03.087","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:03.087","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=39) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=5, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:03.361","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending Heartbeat request with generation 1 and member id consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a to coordinator localhost:9092 (id: 2147483646 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:03.362","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending HEARTBEAT request with header RequestHeader(apiKey=HEARTBEAT, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=40) and timeout 30000 to node 2147483646: HeartbeatRequestData(groupId='plain-kafka-consumer', generationId=1, memberId='consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a', groupInstanceId=null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:03.380","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received HEARTBEAT response from node 2147483646 for request with header RequestHeader(apiKey=HEARTBEAT, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=40): HeartbeatResponseData(throttleTimeMs=0, errorCode=0)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:03.380","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received successful Heartbeat response"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:03.599","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=39): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:03.599","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:03.599","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:03.599","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=6) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:03.599","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:03.599","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=41) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=6, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:04.109","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=41): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:04.110","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:04.110","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:04.110","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=7) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:04.110","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:04.110","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=42) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=7, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:04.621","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=42): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:04.621","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:04.622","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:04.622","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=8) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:04.622","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:04.622","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=43) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=8, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:05.133","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=43): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:05.133","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:05.133","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:05.133","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=9) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:05.133","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:05.133","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=44) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=9, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:05.645","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=44): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:05.645","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:05.645","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:05.645","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=10) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:05.645","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:05.646","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=45) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=10, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:06.156","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=45): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:06.156","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:06.157","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:06.157","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=11) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:06.157","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:06.157","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=46) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=11, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:06.362","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending Heartbeat request with generation 1 and member id consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a to coordinator localhost:9092 (id: 2147483646 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:06.362","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending HEARTBEAT request with header RequestHeader(apiKey=HEARTBEAT, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=47) and timeout 30000 to node 2147483646: HeartbeatRequestData(groupId='plain-kafka-consumer', generationId=1, memberId='consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a', groupInstanceId=null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:06.370","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received HEARTBEAT response from node 2147483646 for request with header RequestHeader(apiKey=HEARTBEAT, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=47): HeartbeatResponseData(throttleTimeMs=0, errorCode=0)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:06.370","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received successful Heartbeat response"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:06.664","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=46): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:06.664","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:06.665","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:06.665","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=12) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:06.665","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:06.665","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=48) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=12, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:07.175","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=48): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:07.175","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:07.175","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:07.175","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=13) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:07.175","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:07.175","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=49) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=13, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:07.685","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=49): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:07.685","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:07.685","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:07.685","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=14) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:07.685","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:07.685","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=50) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=14, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:08.197","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=50): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:08.198","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:08.198","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:08.198","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=15) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:08.198","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:08.199","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=51) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=15, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:08.728","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=51): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:08.729","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:08.729","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:08.729","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=16) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:08.729","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:08.729","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=52) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=16, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:09.241","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=52): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:09.241","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:09.241","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:09.241","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=17) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:09.241","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:09.241","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=53) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=17, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:09.363","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending Heartbeat request with generation 1 and member id consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a to coordinator localhost:9092 (id: 2147483646 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:09.363","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending HEARTBEAT request with header RequestHeader(apiKey=HEARTBEAT, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=54) and timeout 30000 to node 2147483646: HeartbeatRequestData(groupId='plain-kafka-consumer', generationId=1, memberId='consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a', groupInstanceId=null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:09.370","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received HEARTBEAT response from node 2147483646 for request with header RequestHeader(apiKey=HEARTBEAT, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=54): HeartbeatResponseData(throttleTimeMs=0, errorCode=0)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:09.370","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received successful Heartbeat response"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:09.757","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=53): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:09.758","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:09.759","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:09.759","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=18) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:09.759","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:09.759","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=55) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=18, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:10.268","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=55): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:10.268","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:10.268","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:10.268","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=19) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:10.268","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:10.269","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=56) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=19, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:10.780","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=56): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:10.781","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:10.781","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:10.781","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=20) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:10.781","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:10.781","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=57) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=20, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:11.311","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=57): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:11.311","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:11.311","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:11.311","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=21) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:11.311","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:11.312","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=58) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=21, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:11.837","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=58): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:11.837","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:11.838","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:11.838","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=22) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:11.838","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:11.838","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=59) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=22, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:12.362","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=59): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:12.363","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:12.363","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending Heartbeat request with generation 1 and member id consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a to coordinator localhost:9092 (id: 2147483646 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:12.363","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending HEARTBEAT request with header RequestHeader(apiKey=HEARTBEAT, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=60) and timeout 30000 to node 2147483646: HeartbeatRequestData(groupId='plain-kafka-consumer', generationId=1, memberId='consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a', groupInstanceId=null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:12.363","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:12.363","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=23) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:12.363","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:12.363","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=61) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=23, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:12.370","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received HEARTBEAT response from node 2147483646 for request with header RequestHeader(apiKey=HEARTBEAT, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=60): HeartbeatResponseData(throttleTimeMs=0, errorCode=0)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:12.370","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received successful Heartbeat response"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:12.881","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=61): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:12.881","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:12.881","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:12.881","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=24) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:12.881","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:12.881","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=62) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=24, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:13.405","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=62): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:13.406","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:13.406","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:13.406","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=25) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:13.406","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:13.406","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=63) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=25, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:13.937","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=63): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:13.937","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:13.939","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:13.939","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=26) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:13.939","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:13.940","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=64) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=26, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:14.451","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=64): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:14.451","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:14.452","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:14.452","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=27) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:14.452","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:14.452","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=65) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=27, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:14.972","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=65): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:14.973","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:14.973","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:14.973","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=28) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:14.973","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:14.973","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=66) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=28, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:15.364","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending Heartbeat request with generation 1 and member id consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a to coordinator localhost:9092 (id: 2147483646 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:15.364","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending HEARTBEAT request with header RequestHeader(apiKey=HEARTBEAT, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=67) and timeout 30000 to node 2147483646: HeartbeatRequestData(groupId='plain-kafka-consumer', generationId=1, memberId='consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a', groupInstanceId=null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:15.380","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received HEARTBEAT response from node 2147483646 for request with header RequestHeader(apiKey=HEARTBEAT, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=67): HeartbeatResponseData(throttleTimeMs=0, errorCode=0)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:15.380","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received successful Heartbeat response"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:15.492","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=66): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:15.493","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:15.493","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:15.493","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=29) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:15.493","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:15.494","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=68) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=29, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:16.016","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=68): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:16.016","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:16.016","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:16.016","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=30) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:16.016","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:16.016","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=69) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=30, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:16.530","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=69): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:16.530","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:16.531","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:16.531","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=31) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:16.531","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:16.531","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=70) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=31, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:17.041","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=70): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:17.041","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:17.041","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:17.041","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=32) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:17.042","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:17.042","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=71) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=32, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:17.553","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=71): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:17.553","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:17.553","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:17.553","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=33) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:17.553","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:17.553","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=72) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=33, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:18.081","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=72): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:18.081","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:18.082","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:18.082","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=34) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:18.082","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:18.082","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=73) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=34, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:18.365","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending Heartbeat request with generation 1 and member id consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a to coordinator localhost:9092 (id: 2147483646 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:18.365","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending HEARTBEAT request with header RequestHeader(apiKey=HEARTBEAT, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=74) and timeout 30000 to node 2147483646: HeartbeatRequestData(groupId='plain-kafka-consumer', generationId=1, memberId='consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a', groupInstanceId=null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:18.381","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received HEARTBEAT response from node 2147483646 for request with header RequestHeader(apiKey=HEARTBEAT, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=74): HeartbeatResponseData(throttleTimeMs=0, errorCode=0)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:18.381","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received successful Heartbeat response"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:18.600","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=73): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:18.601","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:18.601","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:18.601","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=35) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:18.601","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:18.601","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=75) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=35, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:19.111","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=75): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:19.111","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:19.112","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:19.112","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=36) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:19.112","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:19.112","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=76) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=36, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:19.621","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=76): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:19.621","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:19.622","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:19.622","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=37) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:19.622","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:19.622","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=77) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=37, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:20.131","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=77): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:20.131","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:20.132","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:20.132","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=38) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:20.132","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:20.132","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=78) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=38, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:20.641","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=78): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:20.641","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:20.642","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:20.642","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=39) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:20.642","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:20.642","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=79) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=39, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:21.146","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=79): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:21.147","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:21.147","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:21.147","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=40) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:21.147","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:21.147","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=80) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=40, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:21.367","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending Heartbeat request with generation 1 and member id consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a to coordinator localhost:9092 (id: 2147483646 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:21.367","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending HEARTBEAT request with header RequestHeader(apiKey=HEARTBEAT, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=81) and timeout 30000 to node 2147483646: HeartbeatRequestData(groupId='plain-kafka-consumer', generationId=1, memberId='consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a', groupInstanceId=null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:21.372","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received HEARTBEAT response from node 2147483646 for request with header RequestHeader(apiKey=HEARTBEAT, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=81): HeartbeatResponseData(throttleTimeMs=0, errorCode=0)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:21.372","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received successful Heartbeat response"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:21.652","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=80): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:21.653","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:21.653","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:21.653","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=41) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:21.653","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:21.653","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=82) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=41, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:22.162","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=82): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:22.162","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:22.163","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:22.163","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=42) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:22.163","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:22.163","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=83) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=42, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:22.672","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=83): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:22.672","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:22.672","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:22.672","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=43) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:22.672","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:22.672","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=84) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=43, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:23.184","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=84): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:23.184","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:23.184","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:23.185","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=44) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:23.185","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:23.185","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=85) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=44, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:23.694","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=85): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:23.694","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:23.694","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:23.694","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=45) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:23.694","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:23.694","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=86) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=45, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:24.206","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=86): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:24.206","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:24.206","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:24.206","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=46) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:24.206","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:24.207","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=87) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=46, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:24.367","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending Heartbeat request with generation 1 and member id consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a to coordinator localhost:9092 (id: 2147483646 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:24.368","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending HEARTBEAT request with header RequestHeader(apiKey=HEARTBEAT, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=88) and timeout 30000 to node 2147483646: HeartbeatRequestData(groupId='plain-kafka-consumer', generationId=1, memberId='consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a', groupInstanceId=null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:24.385","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received HEARTBEAT response from node 2147483646 for request with header RequestHeader(apiKey=HEARTBEAT, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=88): HeartbeatResponseData(throttleTimeMs=0, errorCode=0)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:24.386","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received successful Heartbeat response"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:24.711","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=87): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:24.712","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:24.712","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:24.712","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=47) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:24.712","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:24.712","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=89) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=47, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:25.224","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=89): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:25.225","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:25.225","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:25.225","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=48) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:25.225","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:25.226","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=90) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=48, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:25.736","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=90): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:25.737","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:25.737","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:25.737","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=49) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:25.737","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:25.737","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=91) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=49, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:26.242","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=91): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:26.242","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:26.243","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:26.243","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=50) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:26.243","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:26.243","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=92) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=50, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:26.749","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=92): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:26.750","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:26.750","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:26.751","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=51) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:26.751","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:26.751","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=93) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=51, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:27.266","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=93): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:27.267","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:27.267","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:27.267","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=52) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:27.267","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:27.267","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=94) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=52, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:27.368","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending Heartbeat request with generation 1 and member id consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a to coordinator localhost:9092 (id: 2147483646 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:27.368","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending HEARTBEAT request with header RequestHeader(apiKey=HEARTBEAT, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=95) and timeout 30000 to node 2147483646: HeartbeatRequestData(groupId='plain-kafka-consumer', generationId=1, memberId='consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a', groupInstanceId=null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:27.377","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received HEARTBEAT response from node 2147483646 for request with header RequestHeader(apiKey=HEARTBEAT, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=95): HeartbeatResponseData(throttleTimeMs=0, errorCode=0)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:27.377","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received successful Heartbeat response"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:27.784","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=94): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:27.784","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:27.784","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:27.784","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=53) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:27.784","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:27.784","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=96) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=53, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:28.291","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=96): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:28.292","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:28.292","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:28.292","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=54) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:28.292","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:28.292","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=97) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=54, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:28.801","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=97): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:28.802","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:28.802","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:28.802","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=55) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:28.802","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:28.802","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=98) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=55, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:29.317","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=98): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:29.317","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:29.317","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:29.317","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=56) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:29.317","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:29.317","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=99) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=56, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:29.840","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=99): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:29.840","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:29.840","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:29.840","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=57) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:29.840","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:29.840","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=100) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=57, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:30.344","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=100): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:30.344","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:30.344","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:30.344","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=58) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:30.344","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:30.344","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=101) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=58, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:30.372","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending Heartbeat request with generation 1 and member id consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a to coordinator localhost:9092 (id: 2147483646 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:30.372","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending HEARTBEAT request with header RequestHeader(apiKey=HEARTBEAT, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=102) and timeout 30000 to node 2147483646: HeartbeatRequestData(groupId='plain-kafka-consumer', generationId=1, memberId='consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a', groupInstanceId=null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:30.387","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received HEARTBEAT response from node 2147483646 for request with header RequestHeader(apiKey=HEARTBEAT, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=102): HeartbeatResponseData(throttleTimeMs=0, errorCode=0)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:30.387","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received successful Heartbeat response"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:30.918","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=101): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:30.918","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:30.920","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:30.920","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=59) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:30.920","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:30.921","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=103) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=59, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:31.462","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=103): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:31.463","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:31.463","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:31.463","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=60) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:31.463","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:31.463","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=104) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=60, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:31.968","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=104): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:31.968","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:31.968","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:31.968","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=61) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:31.968","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:31.968","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=105) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=61, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:32.474","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=105): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:32.474","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:32.474","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:32.474","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=62) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:32.474","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:32.474","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=106) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=62, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:32.995","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=106): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:32.995","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:32.995","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:32.996","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=63) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:32.996","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:32.996","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=107) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=63, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:33.372","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending Heartbeat request with generation 1 and member id consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a to coordinator localhost:9092 (id: 2147483646 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:33.372","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending HEARTBEAT request with header RequestHeader(apiKey=HEARTBEAT, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=108) and timeout 30000 to node 2147483646: HeartbeatRequestData(groupId='plain-kafka-consumer', generationId=1, memberId='consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a', groupInstanceId=null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:33.381","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received HEARTBEAT response from node 2147483646 for request with header RequestHeader(apiKey=HEARTBEAT, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=108): HeartbeatResponseData(throttleTimeMs=0, errorCode=0)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:33.381","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received successful Heartbeat response"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:33.517","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=107): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:33.517","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:33.518","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:33.518","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=64) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:33.518","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:33.518","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=109) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=64, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:34.024","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=109): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:34.024","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:34.025","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:34.025","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=65) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:34.025","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:34.025","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=110) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=65, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:34.532","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=110): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:34.532","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:34.533","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:34.533","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=66) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:34.533","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:34.533","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=111) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=66, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:35.042","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=111): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:35.042","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:35.042","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:35.042","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=67) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:35.042","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:35.042","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=112) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=67, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:35.548","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=112): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:35.549","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:35.549","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:35.549","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=68) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:35.549","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:35.549","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=113) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=68, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:36.067","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=113): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:36.067","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:36.068","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:36.068","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=69) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:36.068","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:36.068","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=114) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=69, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:36.373","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending Heartbeat request with generation 1 and member id consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a to coordinator localhost:9092 (id: 2147483646 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:36.373","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending HEARTBEAT request with header RequestHeader(apiKey=HEARTBEAT, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=115) and timeout 30000 to node 2147483646: HeartbeatRequestData(groupId='plain-kafka-consumer', generationId=1, memberId='consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a', groupInstanceId=null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:36.381","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received HEARTBEAT response from node 2147483646 for request with header RequestHeader(apiKey=HEARTBEAT, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=115): HeartbeatResponseData(throttleTimeMs=0, errorCode=0)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:36.381","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received successful Heartbeat response"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:36.576","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=114): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:36.577","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:36.577","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:36.577","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=70) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:36.577","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:36.577","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=116) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=70, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:37.082","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=116): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:37.082","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:37.082","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:37.082","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=71) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:37.082","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:37.082","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=117) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=71, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:37.604","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=117): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:37.604","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:37.604","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:37.604","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=72) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:37.604","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:37.604","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=118) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=72, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:38.123","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=118): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:38.123","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:38.124","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:38.124","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=73) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:38.124","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:38.124","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=119) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=73, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:38.638","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=119): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:38.638","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:38.638","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:38.638","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=74) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:38.638","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:38.638","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=120) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=74, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:39.149","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=120): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:39.150","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:39.150","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:39.150","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=75) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:39.150","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:39.150","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=121) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=75, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:39.374","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending Heartbeat request with generation 1 and member id consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a to coordinator localhost:9092 (id: 2147483646 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:39.374","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending HEARTBEAT request with header RequestHeader(apiKey=HEARTBEAT, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=122) and timeout 30000 to node 2147483646: HeartbeatRequestData(groupId='plain-kafka-consumer', generationId=1, memberId='consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a', groupInstanceId=null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:39.406","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received HEARTBEAT response from node 2147483646 for request with header RequestHeader(apiKey=HEARTBEAT, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=122): HeartbeatResponseData(throttleTimeMs=0, errorCode=0)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:39.406","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received successful Heartbeat response"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:39.678","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=121): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:39.679","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:39.679","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:39.679","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=76) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:39.679","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:39.679","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=123) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=76, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:40.218","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=123): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:40.219","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:40.220","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:40.220","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=77) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:40.220","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:40.221","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=124) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=77, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:40.744","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=124): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:40.744","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:40.744","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:40.744","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=78) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:40.744","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:40.745","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=125) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=78, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:41.255","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=125): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:41.256","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:41.256","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:41.256","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=79) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:41.256","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:41.256","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=126) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=79, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:41.762","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=126): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:41.762","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:41.763","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:41.763","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=80) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:41.763","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:41.763","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=127) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=80, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:42.273","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=127): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:42.273","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:42.274","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:42.274","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=81) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:42.275","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:42.275","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=128) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=81, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:42.375","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending Heartbeat request with generation 1 and member id consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a to coordinator localhost:9092 (id: 2147483646 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:42.376","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending HEARTBEAT request with header RequestHeader(apiKey=HEARTBEAT, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=129) and timeout 30000 to node 2147483646: HeartbeatRequestData(groupId='plain-kafka-consumer', generationId=1, memberId='consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a', groupInstanceId=null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:42.392","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received HEARTBEAT response from node 2147483646 for request with header RequestHeader(apiKey=HEARTBEAT, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=129): HeartbeatResponseData(throttleTimeMs=0, errorCode=0)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:42.392","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received successful Heartbeat response"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:42.782","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=128): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:42.782","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:42.782","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:42.782","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=82) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:42.782","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:42.782","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=130) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=82, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:43.287","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=130): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:43.288","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:43.289","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:43.289","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=83) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:43.289","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:43.289","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=131) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=83, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:43.794","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=131): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:43.794","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:43.794","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:43.794","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=84) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:43.794","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:43.794","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=132) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=84, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:44.311","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=132): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:44.311","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:44.311","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:44.311","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=85) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:44.311","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:44.311","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=133) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=85, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:44.821","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=133): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:44.821","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:44.822","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:44.822","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=86) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:44.822","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:44.822","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=134) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=86, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:45.330","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=134): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:45.330","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:45.330","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:45.330","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=87) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:45.330","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:45.330","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=135) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=87, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:45.376","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending Heartbeat request with generation 1 and member id consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a to coordinator localhost:9092 (id: 2147483646 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:45.376","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending HEARTBEAT request with header RequestHeader(apiKey=HEARTBEAT, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=136) and timeout 30000 to node 2147483646: HeartbeatRequestData(groupId='plain-kafka-consumer', generationId=1, memberId='consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a', groupInstanceId=null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:45.379","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received HEARTBEAT response from node 2147483646 for request with header RequestHeader(apiKey=HEARTBEAT, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=136): HeartbeatResponseData(throttleTimeMs=0, errorCode=0)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:45.379","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received successful Heartbeat response"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:45.835","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=135): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:45.835","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:45.835","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:45.835","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=88) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:45.835","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:45.835","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=137) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=88, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:46.349","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=137): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:46.350","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:46.350","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:46.350","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=89) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:46.350","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:46.350","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=138) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=89, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:46.860","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=138): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:46.860","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:46.860","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:46.861","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=90) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:46.861","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:46.861","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=139) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=90, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:47.372","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=139): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:47.372","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:47.373","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:47.373","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=91) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:47.373","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:47.373","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=140) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=91, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:47.878","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=140): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:47.878","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:47.878","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:47.878","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=92) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:47.878","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:47.878","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=141) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=92, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:48.377","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending Heartbeat request with generation 1 and member id consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a to coordinator localhost:9092 (id: 2147483646 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:48.379","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending HEARTBEAT request with header RequestHeader(apiKey=HEARTBEAT, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=142) and timeout 30000 to node 2147483646: HeartbeatRequestData(groupId='plain-kafka-consumer', generationId=1, memberId='consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a', groupInstanceId=null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:48.388","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=141): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:48.388","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:48.388","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:48.388","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=93) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:48.388","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:48.388","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=143) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=93, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:48.395","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received HEARTBEAT response from node 2147483646 for request with header RequestHeader(apiKey=HEARTBEAT, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=142): HeartbeatResponseData(throttleTimeMs=0, errorCode=0)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:48.395","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received successful Heartbeat response"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:48.893","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=143): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:48.893","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:48.893","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:48.893","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=94) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:48.893","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:48.893","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=144) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=94, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:49.399","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=144): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:49.399","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:49.399","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:49.399","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=95) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:49.399","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:49.399","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=145) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=95, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:49.905","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=145): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:49.906","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:49.906","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:49.906","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=96) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:49.906","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:49.906","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=146) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=96, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:50.410","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=146): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:50.411","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:50.411","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:50.411","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=97) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:50.411","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:50.412","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=147) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=97, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:50.923","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=147): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:50.923","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:50.923","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:50.923","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=98) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:50.923","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:50.923","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=148) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=98, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:51.378","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending Heartbeat request with generation 1 and member id consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a to coordinator localhost:9092 (id: 2147483646 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:51.378","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending HEARTBEAT request with header RequestHeader(apiKey=HEARTBEAT, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=149) and timeout 30000 to node 2147483646: HeartbeatRequestData(groupId='plain-kafka-consumer', generationId=1, memberId='consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a', groupInstanceId=null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:51.395","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received HEARTBEAT response from node 2147483646 for request with header RequestHeader(apiKey=HEARTBEAT, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=149): HeartbeatResponseData(throttleTimeMs=0, errorCode=0)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:51.395","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received successful Heartbeat response"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:51.434","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=148): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:51.434","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:51.434","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:51.434","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=99) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:51.434","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:51.434","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=150) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=99, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:51.951","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=150): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:51.951","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:51.951","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:51.951","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=100) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:51.952","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:51.952","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=151) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=100, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:52.461","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=151): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:52.462","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:52.462","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:52.462","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=101) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:52.462","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:52.462","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=152) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=101, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:52.980","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=152): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:52.981","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:52.981","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:52.981","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=102) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:52.981","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:52.981","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=153) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=102, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:53.494","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=153): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:53.494","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:53.494","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:53.494","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=103) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:53.494","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:53.494","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=154) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=103, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:54.000","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=154): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:54.000","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:54.000","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:54.000","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=104) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:54.000","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:54.001","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=155) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=104, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:54.378","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending Heartbeat request with generation 1 and member id consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a to coordinator localhost:9092 (id: 2147483646 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:54.378","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending HEARTBEAT request with header RequestHeader(apiKey=HEARTBEAT, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=156) and timeout 30000 to node 2147483646: HeartbeatRequestData(groupId='plain-kafka-consumer', generationId=1, memberId='consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a', groupInstanceId=null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:54.391","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received HEARTBEAT response from node 2147483646 for request with header RequestHeader(apiKey=HEARTBEAT, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=156): HeartbeatResponseData(throttleTimeMs=0, errorCode=0)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:54.391","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received successful Heartbeat response"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:54.506","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=155): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:54.506","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:54.506","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:54.506","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=105) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:54.506","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:54.506","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=157) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=105, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:55.015","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=157): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:55.015","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:55.016","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:55.016","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=106) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:55.016","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:55.016","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=158) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=106, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:55.527","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=158): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:55.527","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:55.527","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:55.528","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=107) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:55.528","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:55.529","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=159) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=107, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:56.035","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=159): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:56.035","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:56.035","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:56.035","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=108) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:56.035","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:56.035","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=160) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=108, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:56.543","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=160): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:56.544","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:56.544","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:56.544","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=109) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:56.544","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:56.544","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=161) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=109, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:57.066","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=161): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:57.068","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:57.068","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:57.068","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=110) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:57.068","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:57.069","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=162) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=110, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:57.379","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending Heartbeat request with generation 1 and member id consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a to coordinator localhost:9092 (id: 2147483646 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:57.379","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending HEARTBEAT request with header RequestHeader(apiKey=HEARTBEAT, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=163) and timeout 30000 to node 2147483646: HeartbeatRequestData(groupId='plain-kafka-consumer', generationId=1, memberId='consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a', groupInstanceId=null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:57.384","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received HEARTBEAT response from node 2147483646 for request with header RequestHeader(apiKey=HEARTBEAT, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=163): HeartbeatResponseData(throttleTimeMs=0, errorCode=0)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:57.384","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received successful Heartbeat response"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:57.576","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=162): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:57.576","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:57.576","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:57.576","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=111) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:57.576","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:57.576","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=164) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=111, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:58.102","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=164): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:58.102","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:58.102","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:58.102","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=112) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:58.102","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:58.102","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=165) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=112, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:58.623","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=165): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:58.624","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:58.624","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:58.624","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=113) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:58.624","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:58.624","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=166) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=113, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:59.130","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=166): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:59.130","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:59.131","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:59.131","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=114) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:59.131","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:59.131","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=167) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=114, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:59.640","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=167): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:59.640","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:59.641","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:59.641","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=115) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:59.641","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:47:59.641","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=168) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=115, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:00.154","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=168): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:00.155","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:00.155","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:00.155","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=116) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:00.155","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:00.155","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=169) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=116, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:00.381","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending Heartbeat request with generation 1 and member id consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a to coordinator localhost:9092 (id: 2147483646 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:00.381","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending HEARTBEAT request with header RequestHeader(apiKey=HEARTBEAT, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=170) and timeout 30000 to node 2147483646: HeartbeatRequestData(groupId='plain-kafka-consumer', generationId=1, memberId='consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a', groupInstanceId=null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:00.400","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received HEARTBEAT response from node 2147483646 for request with header RequestHeader(apiKey=HEARTBEAT, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=170): HeartbeatResponseData(throttleTimeMs=0, errorCode=0)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:00.400","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received successful Heartbeat response"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:00.661","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=169): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:00.661","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:00.661","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:00.661","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=117) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:00.661","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:00.661","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=171) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=117, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:01.175","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=171): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:01.175","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:01.176","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:01.176","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=118) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:01.176","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:01.176","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=172) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=118, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:01.692","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=172): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:01.692","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:01.693","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:01.693","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=119) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:01.693","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:01.693","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=173) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=119, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:02.202","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=173): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:02.202","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:02.203","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:02.203","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=120) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:02.203","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:02.203","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=174) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=120, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:02.708","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=174): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:02.708","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:02.708","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:02.708","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=121) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:02.708","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:02.708","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=175) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=121, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:03.223","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=175): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:03.224","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:03.224","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:03.224","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=122) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:03.224","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:03.224","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=176) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=122, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:03.381","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending Heartbeat request with generation 1 and member id consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a to coordinator localhost:9092 (id: 2147483646 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:03.381","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending HEARTBEAT request with header RequestHeader(apiKey=HEARTBEAT, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=177) and timeout 30000 to node 2147483646: HeartbeatRequestData(groupId='plain-kafka-consumer', generationId=1, memberId='consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a', groupInstanceId=null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:03.386","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received HEARTBEAT response from node 2147483646 for request with header RequestHeader(apiKey=HEARTBEAT, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=177): HeartbeatResponseData(throttleTimeMs=0, errorCode=0)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:03.386","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received successful Heartbeat response"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:03.737","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=176): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:03.737","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:03.737","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:03.737","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=123) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:03.737","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:03.737","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=178) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=123, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:04.241","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=178): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:04.242","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:04.242","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:04.242","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=124) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:04.242","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:04.242","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=179) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=124, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:04.762","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=179): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:04.763","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:04.764","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:04.764","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=125) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:04.764","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:04.764","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=180) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=125, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:05.286","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=180): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:05.286","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:05.286","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:05.286","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=126) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:05.286","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:05.286","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=181) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=126, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:05.832","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=181): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:05.833","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:05.833","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:05.833","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=127) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:05.833","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:05.833","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=182) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=127, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:06.347","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=182): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:06.347","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:06.347","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:06.348","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=128) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:06.348","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:06.348","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=183) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=128, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:06.385","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending Heartbeat request with generation 1 and member id consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a to coordinator localhost:9092 (id: 2147483646 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:06.385","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending HEARTBEAT request with header RequestHeader(apiKey=HEARTBEAT, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=184) and timeout 30000 to node 2147483646: HeartbeatRequestData(groupId='plain-kafka-consumer', generationId=1, memberId='consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a', groupInstanceId=null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:06.399","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received HEARTBEAT response from node 2147483646 for request with header RequestHeader(apiKey=HEARTBEAT, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=184): HeartbeatResponseData(throttleTimeMs=0, errorCode=0)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:06.399","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received successful Heartbeat response"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:06.865","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=183): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:06.865","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:06.865","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:06.865","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=129) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:06.865","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:06.865","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=185) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=129, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:07.371","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=185): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:07.371","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:07.371","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:07.371","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=130) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:07.371","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:07.372","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=186) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=130, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:07.883","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=186): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:07.883","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:07.884","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:07.884","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=131) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:07.884","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:07.884","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=187) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=131, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:08.403","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=187): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:08.403","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:08.404","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:08.404","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=132) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:08.404","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:08.404","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=188) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=132, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:08.908","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=188): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:08.908","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:08.908","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:08.908","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=133) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:08.908","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:08.908","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=189) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=133, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:09.386","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending Heartbeat request with generation 1 and member id consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a to coordinator localhost:9092 (id: 2147483646 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:09.386","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending HEARTBEAT request with header RequestHeader(apiKey=HEARTBEAT, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=190) and timeout 30000 to node 2147483646: HeartbeatRequestData(groupId='plain-kafka-consumer', generationId=1, memberId='consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a', groupInstanceId=null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:09.395","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received HEARTBEAT response from node 2147483646 for request with header RequestHeader(apiKey=HEARTBEAT, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=190): HeartbeatResponseData(throttleTimeMs=0, errorCode=0)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:09.395","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received successful Heartbeat response"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:09.414","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=189): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:09.414","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:09.414","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:09.414","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=134) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:09.414","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:09.414","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=191) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=134, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:09.927","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=191): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:09.927","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:09.927","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:09.928","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=135) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:09.928","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:09.928","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=192) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=135, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:10.446","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received FETCH response from node 1 for request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=192): FetchResponseData(throttleTimeMs=0, errorCode=0, sessionId=411694213, responses=[])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:10.458","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Node 1 sent an incremental fetch response with throttleTimeMs = 0 for session 411694213 with 0 response partition(s), 1 implied partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:10.460","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Added READ_UNCOMMITTED fetch request for partition test-0 at position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}} to node localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:10.460","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Built incremental fetch (sessionId=411694213, epoch=136) for node 1. Added 0 partition(s), altered 0 partition(s), removed 0 partition(s), replaced 0 partition(s) out of 1 partition(s)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:10.460","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending READ_UNCOMMITTED IncrementalFetchRequest(toSend=(), toForget=(), toReplace=(), implied=(test-0), canUseTopicIds=True) to broker localhost:9092 (id: 1 rack: null)"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:10.475","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending FETCH request with header RequestHeader(apiKey=FETCH, apiVersion=13, clientId=consumer-plain-kafka-consumer-1, correlationId=193) and timeout 30000 to node 1: FetchRequestData(clusterId=null, replicaId=-1, maxWaitMs=500, minBytes=1, maxBytes=52428800, isolationLevel=0, sessionId=411694213, sessionEpoch=136, topics=[], forgottenTopicsData=[], rackId='')"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:10.557","level":"DEBUG", thread="SpringApplicationShutdownHook", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received user wakeup"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:10.557","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Raising WakeupException in response to user wakeup"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:10.558","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Executing onLeavePrepare with generation Generation{generationId=1, memberId='consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a', protocol='range'} and memberId consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:10.558","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Revoke previously assigned partitions test-0"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:10.558","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"plain-kafka-consumer: partitions revoked: [test-0]"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:10.559","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Member consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a sending LeaveGroup request to coordinator localhost:9092 (id: 2147483646 rack: null) due to the consumer unsubscribed from all topics"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:10.559","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Sending LEAVE_GROUP request with header RequestHeader(apiKey=LEAVE_GROUP, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=194) and timeout 30000 to node 2147483646: LeaveGroupRequestData(groupId='plain-kafka-consumer', memberId='', members=[MemberIdentity(memberId='consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a', groupInstanceId=null)])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:10.559","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Resetting generation due to: consumer pro-actively leaving the group"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:10.559","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Request joining group due to: consumer pro-actively leaving the group"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:10.559","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Unsubscribed all topics or patterns and assigned partitions"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:10.559","level":"DEBUG", thread="kafka-coordinator-heartbeat-thread | plain-kafka-consumer", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Heartbeat thread has closed"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:10.559","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Executing onLeavePrepare with generation Generation{generationId=-1, memberId='', protocol='null'} and memberId "}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:10.559","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Resetting generation due to: consumer pro-actively leaving the group"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:10.559","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Request joining group due to: consumer pro-actively leaving the group"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:10.650","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Received LEAVE_GROUP response from node 2147483646 for request with header RequestHeader(apiKey=LEAVE_GROUP, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=194): LeaveGroupResponseData(throttleTimeMs=0, errorCode=0, members=[MemberResponse(memberId='consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a', groupInstanceId=null, errorCode=0)])"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:10.650","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] LeaveGroup response with Generation{generationId=1, memberId='consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a', protocol='range'} returned successfully: ClientResponse(receivedTimeMs=1750159090645, latencyMs=86, disconnected=false, requestHeader=RequestHeader(apiKey=LEAVE_GROUP, apiVersion=4, clientId=consumer-plain-kafka-consumer-1, correlationId=194), responseBody=LeaveGroupResponseData(throttleTimeMs=0, errorCode=0, members=[MemberResponse(memberId='consumer-plain-kafka-consumer-1-160d13dd-2370-46fa-a919-2d41a32e935a', groupInstanceId=null, errorCode=0)]))"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:10.660","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"Metrics scheduler closed"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:10.661","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"Closing reporter org.apache.kafka.common.metrics.JmxReporter"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:10.661","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"Metrics reporters closed"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:10.679","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"App info kafka.consumer for consumer-plain-kafka-consumer-1 unregistered"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:10.679","level":"DEBUG", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"[Consumer clientId=consumer-plain-kafka-consumer-1, groupId=plain-kafka-consumer] Kafka consumer has been closed"}
{"name": vkt-kafka-pg, "timestamp":"2025-06-17 16:48:10.680","level":"INFO", thread="org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1", "uri":"", "traceId": "", "spanId": "", "message":"plain-kafka-consumer: Consumer stopped"}
